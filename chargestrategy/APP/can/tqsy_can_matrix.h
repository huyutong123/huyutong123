/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 37.0.0 Mon Oct 17 14:23:20 2022.
 */

#ifndef TQSY_CAN_MATRIX_H
#define TQSY_CAN_MATRIX_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_FRAME_ID (0x40d8000u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_FRAME_ID (0x40a8000u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_FRAME_ID (0x4088000u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_FRAME_ID (0x4078000u)
#define TQSY_CAN_MATRIX_BMS_THE_LEAKAGE_LOCATION_FRAME_ID (0x406001eu)
#define TQSY_CAN_MATRIX_BMS_INSULATION_INFORMATION_FRAME_ID (0x405001eu)
#define TQSY_CAN_MATRIX_MBMS_SUM_3_FRAME_ID (0x4018000u)
#define TQSY_CAN_MATRIX_MBMS_SUM_FRAME_ID (0x4008000u)
#define TQSY_CAN_MATRIX_MBMS_SUM_2_FRAME_ID (0x4028000u)
#define TQSY_CAN_MATRIX_BMU1_VOL_1_FRAME_ID (0x8000001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_5_FRAME_ID (0x8010001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_9_FRAME_ID (0x8020001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_13_FRAME_ID (0x8030001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_17_FRAME_ID (0x8040001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_21_FRAME_ID (0x8050001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_25_FRAME_ID (0x8060001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_29_FRAME_ID (0x8070001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_33_FRAME_ID (0x8080001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_37_FRAME_ID (0x8090001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_41_FRAME_ID (0x80a0001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_45_FRAME_ID (0x80b0001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_49_FRAME_ID (0x80c0001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_53_FRAME_ID (0x80d0001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_57_FRAME_ID (0x80e0001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_61_FRAME_ID (0x80f0001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_65_FRAME_ID (0x8100001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_69_FRAME_ID (0x8110001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_73_FRAME_ID (0x8120001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_77_FRAME_ID (0x8130001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_81_FRAME_ID (0x8140001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_85_FRAME_ID (0x8150001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_89_FRAME_ID (0x8160001u)
#define TQSY_CAN_MATRIX_BMU1_VOL_93_FRAME_ID (0x8170001u)
#define TQSY_CAN_MATRIX_BMU2_VOL_1_FRAME_ID (0x8000002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_5_FRAME_ID (0x8010002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_9_FRAME_ID (0x8020002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_13_FRAME_ID (0x8030002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_17_FRAME_ID (0x8040002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_21_FRAME_ID (0x8050002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_25_FRAME_ID (0x8060002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_29_FRAME_ID (0x8070002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_33_FRAME_ID (0x8080002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_37_FRAME_ID (0x8090002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_41_FRAME_ID (0x80a0002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_45_FRAME_ID (0x80b0002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_49_FRAME_ID (0x80c0002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_53_FRAME_ID (0x80d0002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_57_FRAME_ID (0x80e0002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_61_FRAME_ID (0x80f0002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_65_FRAME_ID (0x8100002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_69_FRAME_ID (0x8110002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_73_FRAME_ID (0x8120002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_77_FRAME_ID (0x8130002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_81_FRAME_ID (0x8140002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_85_FRAME_ID (0x8150002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_89_FRAME_ID (0x8160002u)
#define TQSY_CAN_MATRIX_BMU2_VOL_93_FRAME_ID (0x8170002u)
#define TQSY_CAN_MATRIX_BMU3_VOL_1_FRAME_ID (0x8000003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_5_FRAME_ID (0x8010003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_9_FRAME_ID (0x8020003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_13_FRAME_ID (0x8030003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_17_FRAME_ID (0x8040003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_21_FRAME_ID (0x8050003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_25_FRAME_ID (0x8060003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_29_FRAME_ID (0x8070003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_33_FRAME_ID (0x8080003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_37_FRAME_ID (0x8090003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_41_FRAME_ID (0x80a0003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_45_FRAME_ID (0x80b0003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_49_FRAME_ID (0x80c0003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_53_FRAME_ID (0x80d0003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_57_FRAME_ID (0x80e0003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_61_FRAME_ID (0x80f0003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_65_FRAME_ID (0x8100003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_69_FRAME_ID (0x8110003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_73_FRAME_ID (0x8120003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_77_FRAME_ID (0x8130003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_81_FRAME_ID (0x8140003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_85_FRAME_ID (0x8150003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_89_FRAME_ID (0x8160003u)
#define TQSY_CAN_MATRIX_BMU3_VOL_93_FRAME_ID (0x8170003u)
#define TQSY_CAN_MATRIX_BMU4_VOL_1_FRAME_ID (0x8000004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_5_FRAME_ID (0x8010004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_9_FRAME_ID (0x8020004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_13_FRAME_ID (0x8030004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_17_FRAME_ID (0x8040004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_21_FRAME_ID (0x8050004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_25_FRAME_ID (0x8060004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_29_FRAME_ID (0x8070004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_33_FRAME_ID (0x8080004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_37_FRAME_ID (0x8090004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_41_FRAME_ID (0x80a0004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_45_FRAME_ID (0x80b0004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_49_FRAME_ID (0x80c0004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_53_FRAME_ID (0x80d0004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_57_FRAME_ID (0x80e0004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_61_FRAME_ID (0x80f0004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_65_FRAME_ID (0x8100004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_69_FRAME_ID (0x8110004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_73_FRAME_ID (0x8120004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_77_FRAME_ID (0x8130004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_81_FRAME_ID (0x8140004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_85_FRAME_ID (0x8150004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_89_FRAME_ID (0x8160004u)
#define TQSY_CAN_MATRIX_BMU4_VOL_93_FRAME_ID (0x8170004u)
#define TQSY_CAN_MATRIX_BMU5_VOL_1_FRAME_ID (0x8000005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_5_FRAME_ID (0x8010005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_9_FRAME_ID (0x8020005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_13_FRAME_ID (0x8030005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_17_FRAME_ID (0x8040005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_21_FRAME_ID (0x8050005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_25_FRAME_ID (0x8060005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_29_FRAME_ID (0x8070005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_33_FRAME_ID (0x8080005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_37_FRAME_ID (0x8090005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_41_FRAME_ID (0x80a0005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_45_FRAME_ID (0x80b0005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_49_FRAME_ID (0x80c0005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_53_FRAME_ID (0x80d0005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_57_FRAME_ID (0x80e0005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_61_FRAME_ID (0x80f0005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_65_FRAME_ID (0x8100005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_69_FRAME_ID (0x8110005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_73_FRAME_ID (0x8120005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_77_FRAME_ID (0x8130005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_81_FRAME_ID (0x8140005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_85_FRAME_ID (0x8150005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_89_FRAME_ID (0x8160005u)
#define TQSY_CAN_MATRIX_BMU5_VOL_93_FRAME_ID (0x8170005u)
#define TQSY_CAN_MATRIX_BMU6_VOL_1_FRAME_ID (0x8000006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_5_FRAME_ID (0x8010006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_9_FRAME_ID (0x8020006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_13_FRAME_ID (0x8030006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_17_FRAME_ID (0x8040006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_21_FRAME_ID (0x8050006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_25_FRAME_ID (0x8060006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_29_FRAME_ID (0x8070006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_33_FRAME_ID (0x8080006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_37_FRAME_ID (0x8090006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_41_FRAME_ID (0x80a0006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_45_FRAME_ID (0x80b0006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_49_FRAME_ID (0x80c0006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_53_FRAME_ID (0x80d0006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_57_FRAME_ID (0x80e0006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_61_FRAME_ID (0x80f0006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_65_FRAME_ID (0x8100006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_69_FRAME_ID (0x8110006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_73_FRAME_ID (0x8120006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_77_FRAME_ID (0x8130006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_81_FRAME_ID (0x8140006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_85_FRAME_ID (0x8150006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_89_FRAME_ID (0x8160006u)
#define TQSY_CAN_MATRIX_BMU6_VOL_93_FRAME_ID (0x8170006u)
#define TQSY_CAN_MATRIX_BMU1_TEMP_1_FRAME_ID (0x10000001u)
#define TQSY_CAN_MATRIX_BMU1_TEMP_9_FRAME_ID (0x10010001u)
#define TQSY_CAN_MATRIX_BMU1_TEMP_17_FRAME_ID (0x10020001u)
#define TQSY_CAN_MATRIX_BMU2_TEMP_1_FRAME_ID (0x10000002u)
#define TQSY_CAN_MATRIX_BMU2_TEMP_9_FRAME_ID (0x10010002u)
#define TQSY_CAN_MATRIX_BMU2_TEMP_17_FRAME_ID (0x10020002u)
#define TQSY_CAN_MATRIX_BMU3_TEMP_1_FRAME_ID (0x10000003u)
#define TQSY_CAN_MATRIX_BMU3_TEMP_9_FRAME_ID (0x10010003u)
#define TQSY_CAN_MATRIX_BMU3_TEMP_17_FRAME_ID (0x10020003u)
#define TQSY_CAN_MATRIX_BMU4_TEMP_1_FRAME_ID (0x10000004u)
#define TQSY_CAN_MATRIX_BMU4_TEMP_9_FRAME_ID (0x10010004u)
#define TQSY_CAN_MATRIX_BMU4_TEMP_17_FRAME_ID (0x10020004u)
#define TQSY_CAN_MATRIX_BMU5_TEMP_1_FRAME_ID (0x10000005u)
#define TQSY_CAN_MATRIX_BMU5_TEMP_9_FRAME_ID (0x10010005u)
#define TQSY_CAN_MATRIX_BMU5_TEMP_17_FRAME_ID (0x10020005u)
#define TQSY_CAN_MATRIX_BMU6_TEMP_1_FRAME_ID (0x10000006u)
#define TQSY_CAN_MATRIX_BMU6_TEMP_9_FRAME_ID (0x10010006u)
#define TQSY_CAN_MATRIX_BMU6_TEMP_17_FRAME_ID (0x10020006u)

/* Frame lengths in bytes. */
#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMS_THE_LEAKAGE_LOCATION_LENGTH (6u)
#define TQSY_CAN_MATRIX_BMS_INSULATION_INFORMATION_LENGTH (2u)
#define TQSY_CAN_MATRIX_MBMS_SUM_3_LENGTH (8u)
#define TQSY_CAN_MATRIX_MBMS_SUM_LENGTH (8u)
#define TQSY_CAN_MATRIX_MBMS_SUM_2_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_1_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_5_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_9_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_13_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_17_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_21_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_25_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_29_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_33_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_37_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_41_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_45_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_49_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_53_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_57_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_61_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_65_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_69_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_73_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_77_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_81_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_85_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_89_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_VOL_93_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_1_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_5_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_9_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_13_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_17_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_21_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_25_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_29_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_33_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_37_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_41_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_45_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_49_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_53_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_57_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_61_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_65_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_69_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_73_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_77_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_81_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_85_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_89_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_VOL_93_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_1_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_5_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_9_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_13_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_17_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_21_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_25_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_29_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_33_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_37_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_41_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_45_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_49_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_53_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_57_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_61_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_65_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_69_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_73_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_77_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_81_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_85_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_89_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_VOL_93_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_1_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_5_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_9_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_13_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_17_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_21_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_25_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_29_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_33_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_37_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_41_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_45_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_49_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_53_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_57_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_61_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_65_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_69_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_73_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_77_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_81_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_85_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_89_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_VOL_93_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_1_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_5_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_9_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_13_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_17_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_21_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_25_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_29_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_33_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_37_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_41_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_45_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_49_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_53_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_57_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_61_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_65_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_69_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_73_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_77_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_81_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_85_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_89_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_VOL_93_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_1_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_5_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_9_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_13_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_17_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_21_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_25_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_29_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_33_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_37_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_41_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_45_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_49_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_53_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_57_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_61_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_65_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_69_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_73_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_77_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_81_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_85_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_89_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_VOL_93_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_TEMP_1_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_TEMP_9_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU1_TEMP_17_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_TEMP_1_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_TEMP_9_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU2_TEMP_17_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_TEMP_1_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_TEMP_9_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU3_TEMP_17_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_TEMP_1_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_TEMP_9_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU4_TEMP_17_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_TEMP_1_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_TEMP_9_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU5_TEMP_17_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_TEMP_1_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_TEMP_9_LENGTH (8u)
#define TQSY_CAN_MATRIX_BMU6_TEMP_17_LENGTH (8u)

/* Extended or standard frame types. */
#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMS_THE_LEAKAGE_LOCATION_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMS_INSULATION_INFORMATION_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_MBMS_SUM_3_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_MBMS_SUM_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_MBMS_SUM_2_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_1_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_5_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_9_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_13_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_17_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_21_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_25_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_29_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_33_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_37_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_41_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_45_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_49_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_53_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_57_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_61_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_65_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_69_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_73_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_77_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_81_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_85_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_89_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_VOL_93_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_1_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_5_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_9_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_13_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_17_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_21_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_25_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_29_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_33_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_37_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_41_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_45_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_49_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_53_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_57_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_61_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_65_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_69_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_73_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_77_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_81_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_85_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_89_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_VOL_93_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_1_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_5_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_9_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_13_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_17_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_21_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_25_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_29_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_33_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_37_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_41_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_45_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_49_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_53_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_57_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_61_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_65_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_69_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_73_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_77_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_81_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_85_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_89_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_VOL_93_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_1_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_5_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_9_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_13_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_17_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_21_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_25_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_29_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_33_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_37_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_41_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_45_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_49_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_53_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_57_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_61_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_65_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_69_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_73_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_77_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_81_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_85_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_89_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_VOL_93_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_1_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_5_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_9_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_13_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_17_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_21_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_25_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_29_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_33_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_37_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_41_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_45_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_49_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_53_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_57_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_61_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_65_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_69_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_73_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_77_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_81_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_85_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_89_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_VOL_93_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_1_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_5_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_9_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_13_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_17_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_21_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_25_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_29_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_33_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_37_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_41_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_45_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_49_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_53_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_57_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_61_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_65_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_69_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_73_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_77_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_81_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_85_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_89_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_VOL_93_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_TEMP_1_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_TEMP_9_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU1_TEMP_17_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_TEMP_1_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_TEMP_9_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU2_TEMP_17_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_TEMP_1_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_TEMP_9_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU3_TEMP_17_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_TEMP_1_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_TEMP_9_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU4_TEMP_17_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_TEMP_1_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_TEMP_9_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU5_TEMP_17_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_TEMP_1_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_TEMP_9_IS_EXTENDED (1)
#define TQSY_CAN_MATRIX_BMU6_TEMP_17_IS_EXTENDED (1)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_MOTOR_POS_LOAD_OPEN_CHOICE (1)
#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_MOTOR_POS_SHORT_TO_VCC_CHOICE (2)
#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_MOTOR_POS_SHORT_TO_GND_CHOICE (4)

#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_MOTOR_NEG_LOAD_OPEN_CHOICE (1)
#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_MOTOR_NEG_SHORT_TO_VCC_CHOICE (2)
#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_MOTOR_NEG_SHORT_TO_GND_CHOICE (4)

#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_FAN_LOAD_OPEN_CHOICE (1)
#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_FAN_SHORT_TO_VCC_CHOICE (2)
#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_FAN_SHORT_TO_GND_CHOICE (4)

#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_HEAT_LOAD_OPEN_CHOICE (1)
#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_HEAT_SHORT_TO_VCC_CHOICE (2)
#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_HEAT_SHORT_TO_GND_CHOICE (4)

#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_PRE_LOAD_OPEN_CHOICE (1)
#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_PRE_SHORT_TO_VCC_CHOICE (2)
#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_PRE_SHORT_TO_GND_CHOICE (4)

#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_CHG_LOAD_OPEN_CHOICE (1)
#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_CHG_SHORT_TO_VCC_CHOICE (2)
#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_CHG_SHORT_TO_GND_CHOICE (4)

#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_RDT_LOAD_OPEN_CHOICE (1)
#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_RDT_SHORT_TO_VCC_CHOICE (2)
#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_RDT_SHORT_TO_GND_CHOICE (4)

#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_BMU_LOAD_OPEN_CHOICE (1)
#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_BMU_SHORT_TO_VCC_CHOICE (2)
#define TQSY_CAN_MATRIX_BMS_RELAY_FAULT_INFO_RELAY_ERR_CODE_BMU_SHORT_TO_GND_CHOICE (4)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_ISO_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_ISO_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_ISO_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_ISO_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CUR_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CUR_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CUR_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CUR_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_TEMPER_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_TEMPER_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_TEMPER_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_TEMPER_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CELLV_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CELLV_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CELLV_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CELLV_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETECT_CPU_EE_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETECT_CPU_EE_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETECT_CPU_EE_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETECT_CPU_EE_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_EXTERN_CLCK_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_EXTERN_CLCK_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_EXTERN_CLCK_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_EXTERN_CLCK_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_SUMV_OUT_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_SUMV_OUT_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_SUMV_OUT_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_SUMV_OUT_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_SUMV_IN_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_SUMV_IN_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_SUMV_IN_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_SUMV_IN_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CPU_ERR_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CPU_ERR_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CPU_ERR_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CPU_ERR_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETECT_CPU_FLASH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETECT_CPU_FLASH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETECT_CPU_FLASH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETECT_CPU_FLASH_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_45DB041_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_45DB041_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_45DB041_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_45DB041_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_EE_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_EE_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_EE_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_EE_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CAN2_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CAN2_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CAN2_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CAN2_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CAN1_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CAN1_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CAN1_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CAN1_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CAN0_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CAN0_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CAN0_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CAN0_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CAN4_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CAN4_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CAN4_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CAN4_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_RS485_ERR_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_RS485_ERR_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_RS485_ERR_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_RS485_ERR_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_RS232_ERR_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_RS232_ERR_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_RS232_ERR_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_RS232_ERR_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_ETHERNET_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_ETHERNET_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_ETHERNET_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_ETHERNET_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CAN3_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CAN3_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CAN3_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_CAN3_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_SOFT_ERR_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_SOFT_ERR_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_SOFT_ERR_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_SOFT_ERR_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_WH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_WH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_WH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DETCT_WH_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DCH_DETCT_BAL_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DCH_DETCT_BAL_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DCH_DETCT_BAL_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DCH_DETCT_BAL_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CHG_DETCT_BAL_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CHG_DETCT_BAL_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CHG_DETCT_BAL_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CHG_DETCT_BAL_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CUR_MODE4_FAULT_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CUR_MODE4_FAULT_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CUR_MODE4_FAULT_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CUR_MODE4_FAULT_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CUR_MODE3_FAULT_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CUR_MODE3_FAULT_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CUR_MODE3_FAULT_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CUR_MODE3_FAULT_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CUR_MODE2_FAULT_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CUR_MODE2_FAULT_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CUR_MODE2_FAULT_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CUR_MODE2_FAULT_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CUR_MODE1_FAULT_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CUR_MODE1_FAULT_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CUR_MODE1_FAULT_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CUR_MODE1_FAULT_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CONFIG_CELL_NUM_ERR_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CONFIG_CELL_NUM_ERR_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CONFIG_CELL_NUM_ERR_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_CONFIG_CELL_NUM_ERR_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DO_ERR_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DO_ERR_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DO_ERR_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DO_ERR_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DI_ERR_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DI_ERR_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DI_ERR_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_HARDWARE_FAULT_INFO_DI_ERR_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_CUR_OPEN_NEG_RELAY_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_CUR_OPEN_NEG_RELAY_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_CUR_OPEN_NEG_RELAY_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_CUR_OPEN_NEG_RELAY_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_CUR_OPEN_POS_RELAY_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_CUR_OPEN_POS_RELAY_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_CUR_OPEN_POS_RELAY_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_CUR_OPEN_POS_RELAY_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_POS_NOT_PICKUP_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_POS_NOT_PICKUP_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_POS_NOT_PICKUP_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_POS_NOT_PICKUP_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_POS_ADJOIN_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_POS_ADJOIN_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_POS_ADJOIN_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_POS_ADJOIN_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_PRE_NOT_PICKUP_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_PRE_NOT_PICKUP_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_PRE_NOT_PICKUP_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_PRE_NOT_PICKUP_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_PRE_ADJOIN_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_PRE_ADJOIN_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_PRE_ADJOIN_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_PRE_ADJOIN_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_NEG_NOT_PICKUP_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_NEG_NOT_PICKUP_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_NEG_NOT_PICKUP_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_NEG_NOT_PICKUP_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_NEG_ADJOIN_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_NEG_ADJOIN_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_NEG_ADJOIN_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_NEG_ADJOIN_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_HVIL_ABNRML_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_HVIL_ABNRML_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_HVIL_ABNRML_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_HVIL_ABNRML_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_HVIL_FAIL_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_HVIL_FAIL_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_HVIL_FAIL_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_HVIL_FAIL_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_DCDC_NOT_PICKUP_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_DCDC_NOT_PICKUP_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_DCDC_NOT_PICKUP_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_DCDC_NOT_PICKUP_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_DCDC_ADJOIN_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_DCDC_ADJOIN_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_DCDC_ADJOIN_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_DCDC_ADJOIN_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_SPOT_HIGH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_SPOT_HIGH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_SPOT_HIGH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_SPOT_HIGH_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_CUR_OPEN_CHG_RELAY_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_CUR_OPEN_CHG_RELAY_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_CUR_OPEN_CHG_RELAY_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_CUR_OPEN_CHG_RELAY_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_CHG_NOT_PICKUP_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_CHG_NOT_PICKUP_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_CHG_NOT_PICKUP_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_CHG_NOT_PICKUP_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_CHG_ADJOIN_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_CHG_ADJOIN_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_CHG_ADJOIN_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_CHG_ADJOIN_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_PRE_CHG_ERR_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_PRE_CHG_ERR_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_PRE_CHG_ERR_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_PRE_CHG_ERR_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_HEAT_NOT_OFF_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_HEAT_NOT_OFF_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_HEAT_NOT_OFF_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_HEAT_NOT_OFF_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_HEAT_NOT_ON_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_HEAT_NOT_ON_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_HEAT_NOT_ON_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_HEAT_NOT_ON_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_FAN_ON_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_FAN_ON_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_FAN_ON_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_FAN_ON_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_FAN_OFF_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_FAN_OFF_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_FAN_OFF_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_FAN_OFF_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_AIR_DET_T_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_AIR_DET_T_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_AIR_DET_T_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_AIR_DET_T_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_INLET_T_LOW_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_INLET_T_LOW_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_INLET_T_LOW_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_INLET_T_LOW_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_INLET_T_HIGH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_INLET_T_HIGH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_INLET_T_HIGH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_INLET_T_HIGH_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_HEAT_T_HIGH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_HEAT_T_HIGH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_HEAT_T_HIGH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_HEAT_T_HIGH_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_OUTLET_T_LOW_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_OUTLET_T_LOW_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_OUTLET_T_LOW_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_OUTLET_T_LOW_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_OUTLET_T_HIGH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_OUTLET_T_HIGH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_OUTLET_T_HIGH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_SYSTEM_FAULT_INFO_OUTLET_T_HIGH_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_CELL_V_LOW_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_CELL_V_LOW_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_CELL_V_LOW_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_CELL_V_LOW_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_CELL_V_HIGH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_CELL_V_HIGH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_CELL_V_HIGH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_CELL_V_HIGH_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_SUM_V_LOW_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_SUM_V_LOW_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_SUM_V_LOW_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_SUM_V_LOW_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_SUM_V_HIGH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_SUM_V_HIGH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_SUM_V_HIGH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_SUM_V_HIGH_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_DET_T_ALL_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_DET_T_ALL_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_DET_T_ALL_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_DET_T_ALL_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_DET_T_SNGL_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_DET_T_SNGL_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_DET_T_SNGL_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_DET_T_SNGL_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_DET_V_ALL_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_DET_V_ALL_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_DET_V_ALL_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_DET_V_ALL_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_DET_V_SNGL_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_DET_V_SNGL_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_DET_V_SNGL_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_DET_V_SNGL_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_DCH_CUR_HIGH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_DCH_CUR_HIGH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_DCH_CUR_HIGH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_DCH_CUR_HIGH_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_CHG_CUR_HIGH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_CHG_CUR_HIGH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_CHG_CUR_HIGH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_CHG_CUR_HIGH_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_T_LOW_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_T_LOW_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_T_LOW_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_T_LOW_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_T_HIGH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_T_HIGH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_T_HIGH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_T_HIGH_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_SOC_LOW_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_SOC_LOW_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_SOC_LOW_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_SOC_LOW_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_SOC_HIGH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_SOC_HIGH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_SOC_HIGH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_SOC_HIGH_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_FDBCK_CUR_HIGH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_FDBCK_CUR_HIGH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_FDBCK_CUR_HIGH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_FDBCK_CUR_HIGH_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_AVRG_V_DIFF_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_AVRG_V_DIFF_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_AVRG_V_DIFF_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_AVRG_V_DIFF_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_SOC_DIFF_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_SOC_DIFF_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_SOC_DIFF_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_SOC_DIFF_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_BAT_TYPE_DIFF_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_BAT_TYPE_DIFF_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_BAT_TYPE_DIFF_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_BAT_TYPE_DIFF_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_BAT_MANU_DIFF_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_BAT_MANU_DIFF_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_BAT_MANU_DIFF_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_BAT_MANU_DIFF_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_BAT_R_HIGH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_BAT_R_HIGH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_BAT_R_HIGH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_BAT_R_HIGH_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_CELL_BAT_R_DIFF_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_CELL_BAT_R_DIFF_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_CELL_BAT_R_DIFF_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_CELL_BAT_R_DIFF_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_CELL_BAT_R_HIGH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_CELL_BAT_R_HIGH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_CELL_BAT_R_HIGH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_CELL_BAT_R_HIGH_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE2_DCH_CUR_HIGH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE2_DCH_CUR_HIGH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE2_DCH_CUR_HIGH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE2_DCH_CUR_HIGH_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE2_CHG_CUR_HIGH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE2_CHG_CUR_HIGH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE2_CHG_CUR_HIGH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE2_CHG_CUR_HIGH_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE1_DCH_CUR_HIGH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE1_DCH_CUR_HIGH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE1_DCH_CUR_HIGH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE1_DCH_CUR_HIGH_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE1_CHG_CUR_HIGH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE1_CHG_CUR_HIGH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE1_CHG_CUR_HIGH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE1_CHG_CUR_HIGH_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE4_DCH_CUR_HIGH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE4_DCH_CUR_HIGH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE4_DCH_CUR_HIGH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE4_DCH_CUR_HIGH_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE4_CHG_CUR_HIGH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE4_CHG_CUR_HIGH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE4_CHG_CUR_HIGH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE4_CHG_CUR_HIGH_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE3_DCH_CUR_HIGH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE3_DCH_CUR_HIGH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE3_DCH_CUR_HIGH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE3_DCH_CUR_HIGH_TERTIARY_FAULT_CHOICE (3u)

#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE3_CHG_CUR_HIGH_NO__FAULT_CHOICE (0u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE3_CHG_CUR_HIGH_PRIMARY_FAULT_CHOICE (1u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE3_CHG_CUR_HIGH_SECONDARY_FAULT_CHOICE (2u)
#define TQSY_CAN_MATRIX_BMS_BATTERY_FAULT_INFORMATION_MODE3_CHG_CUR_HIGH_TERTIARY_FAULT_CHOICE (3u)

/**
 * Signals in message BMS_RelayFaultInfo.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bms_relay_fault_info_t {
    /**
     * 01_OLON
     * 02_OS
     * 04_SC
     *
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t relay_err_code_motor_pos;

    /**
     * 01_OLON
     * 02_OS
     * 04_SC
     *
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t relay_err_code_motor_neg;

    /**
     * 01_OLON
     * 02_OS
     * 04_SC
     *
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t relay_err_code_fan;

    /**
     * 01_OLON
     * 02_OS
     * 04_SC
     *
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t relay_err_code_heat;

    /**
     * 01_OLON
     * 02_OS
     * 04_SC
     *
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t relay_err_code_pre;

    /**
     * 01_OLON
     * 02_OS
     * 04_SC
     *
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t relay_err_code_chg;

    /**
     * 01_OLON
     * 02_OS
     * 04_SC
     *
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t relay_err_code_rdt;

    /**
     * 01_OLON
     * 02_OS
     * 04_SC
     *
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t relay_err_code_bmu;
};

/**
 * Signals in message BMS_HardwareFaultInfo.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bms_hardware_fault_info_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t detct_iso;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t detct_cur;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t detct_temper;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t detct_cellv;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t detect_cpu_ee;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t detct_extern_clck;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t detct_sumv_out;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t detct_sumv_in;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cpu_err;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t detect_cpu_flash;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t detct_45db041;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t detct_ee;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t detct_can2;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t detct_can1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t detct_can0;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t detct_can4;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rs485_err;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rs232_err;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t detct_ethernet;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t detct_can3;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t soft_err;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t detct_wh;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dch_detct_bal;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chg_detct_bal;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cur_mode4_fault;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cur_mode3_fault;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cur_mode2_fault;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cur_mode1_fault;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t config_cell_num_err;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t do_err;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t di_err;
};

/**
 * Signals in message BMS_BatterySystemFaultInfo.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bms_battery_system_fault_info_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cur_open_neg_relay;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cur_open_pos_relay;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pos_not_pickup;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pos_adjoin;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pre_not_pickup;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pre_adjoin;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t neg_not_pickup;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t neg_adjoin;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvil_abnrml;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hvil_fail;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_not_pickup;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_adjoin;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spot_high;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cur_open_chg_relay;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chg_not_pickup;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chg_adjoin;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pre_chg_err;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t heat_not_off;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t heat_not_on;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fan_on;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fan_off;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t air_det_t;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inlet_t_low;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inlet_t_high;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t heat_t_high;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t outlet_t_low;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t outlet_t_high;
};

/**
 * Signals in message BMS_BatteryFaultInformation.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bms_battery_fault_information_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cell_v_low;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cell_v_high;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sum_v_low;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sum_v_high;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t det_t_all;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t det_t_sngl;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t det_v_all;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t det_v_sngl;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dch_cur_high;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chg_cur_high;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t t_low;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t t_high;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t soc_low;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t soc_high;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bat_grup_diff;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fdbck_cur_high;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t avrg_v_diff;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t soc_diff;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bat_type_diff;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bat_manu_diff;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bat_r_high;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cell_bat_r_diff;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cell_bat_r_high;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mode2_dch_cur_high;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mode2_chg_cur_high;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mode1_dch_cur_high;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mode1_chg_cur_high;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mode4_dch_cur_high;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mode4_chg_cur_high;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mode3_dch_cur_high;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mode3_chg_cur_high;
};

/**
 * Signals in message BMS_TheLeakageLocation.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bms_the_leakage_location_t {
    /**
     * Range: 0..65535 (0..65535 Kohm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t leakage_res;

    /**
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t leakage_volt;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t display_fg;
};

/**
 * Signals in message BMS_InsulationInformation.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bms_insulation_information_t {
    /**
     * Range: 0..65535 (0..65535 Kohm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t iso_res_val;
};

/**
 * Signals in message MBMS_SUM_3.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_mbms_sum_3_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t max_cell_volt;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t min_cell_volt;
};

/**
 * Signals in message MBMS_Sum.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_mbms_sum_t {
    /**
     * Range: 10..10 (1..1 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t sum_v;

    /**
     * Range: 30010..30010 (1..1 A)
     * Scale: 0.1
     * Offset: -3000
     */
    uint16_t curr;

    /**
     * Range: 10..10 (1..1 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t sum_v_out;

    /**
     * Range: 10..10 (1..1 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t soc;
};

/**
 * Signals in message MBMS_Sum_2.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_mbms_sum_2_t {
    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t max_t;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t min_t;
};

/**
 * Signals in message BMU1_Vol_1.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_1_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_1;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_2;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_3;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_4;
};

/**
 * Signals in message BMU1_Vol_5.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_5_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_5;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_6;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_7;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_8;
};

/**
 * Signals in message BMU1_Vol_9.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_9_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_9;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_10;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_11;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_12;
};

/**
 * Signals in message BMU1_Vol_13.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_13_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_13;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_14;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_15;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_16;
};

/**
 * Signals in message BMU1_Vol_17.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_17_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_17;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_18;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_19;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_20;
};

/**
 * Signals in message BMU1_Vol_21.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_21_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_21;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_22;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_23;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_24;
};

/**
 * Signals in message BMU1_Vol_25.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_25_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_25;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_26;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_27;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_28;
};

/**
 * Signals in message BMU1_Vol_29.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_29_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_29;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_30;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_31;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_32;
};

/**
 * Signals in message BMU1_Vol_33.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_33_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_33;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_34;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_35;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_36;
};

/**
 * Signals in message BMU1_Vol_37.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_37_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_37;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_38;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_39;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_40;
};

/**
 * Signals in message BMU1_Vol_41.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_41_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_41;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_42;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_43;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_44;
};

/**
 * Signals in message BMU1_Vol_45.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_45_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_45;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_46;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_47;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_48;
};

/**
 * Signals in message BMU1_Vol_49.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_49_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_49;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_50;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_51;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_52;
};

/**
 * Signals in message BMU1_Vol_53.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_53_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_53;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_54;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_55;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_56;
};

/**
 * Signals in message BMU1_Vol_57.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_57_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_57;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_58;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_59;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_60;
};

/**
 * Signals in message BMU1_Vol_61.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_61_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_61;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_62;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_63;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_64;
};

/**
 * Signals in message BMU1_Vol_65.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_65_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_65;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_66;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_67;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_68;
};

/**
 * Signals in message BMU1_Vol_69.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_69_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_69;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_70;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_71;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_72;
};

/**
 * Signals in message BMU1_Vol_73.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_73_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_73;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_74;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_75;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_76;
};

/**
 * Signals in message BMU1_Vol_77.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_77_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_77;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_78;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_79;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_80;
};

/**
 * Signals in message BMU1_Vol_81.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_81_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_81;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_82;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_83;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_84;
};

/**
 * Signals in message BMU1_Vol_85.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_85_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_85;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_86;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_87;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_88;
};

/**
 * Signals in message BMU1_Vol_89.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_89_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_89;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_90;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_91;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_92;
};

/**
 * Signals in message BMU1_Vol_93.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_vol_93_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_93;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_94;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_95;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu1_vol_96;
};

/**
 * Signals in message BMU2_Vol_1.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_1_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_1;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_2;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_3;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_4;
};

/**
 * Signals in message BMU2_Vol_5.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_5_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_5;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_6;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_7;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_8;
};

/**
 * Signals in message BMU2_Vol_9.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_9_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_9;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_10;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_11;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_12;
};

/**
 * Signals in message BMU2_Vol_13.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_13_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_13;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_14;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_15;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_16;
};

/**
 * Signals in message BMU2_Vol_17.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_17_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_17;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_18;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_19;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_20;
};

/**
 * Signals in message BMU2_Vol_21.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_21_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_21;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_22;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_23;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_24;
};

/**
 * Signals in message BMU2_Vol_25.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_25_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_25;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_26;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_27;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_28;
};

/**
 * Signals in message BMU2_Vol_29.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_29_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_29;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_30;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_31;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_32;
};

/**
 * Signals in message BMU2_Vol_33.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_33_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_33;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_34;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_35;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_36;
};

/**
 * Signals in message BMU2_Vol_37.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_37_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_37;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_38;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_39;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_40;
};

/**
 * Signals in message BMU2_Vol_41.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_41_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_41;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_42;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_43;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_44;
};

/**
 * Signals in message BMU2_Vol_45.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_45_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_45;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_46;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_47;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_48;
};

/**
 * Signals in message BMU2_Vol_49.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_49_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_49;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_50;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_51;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_52;
};

/**
 * Signals in message BMU2_Vol_53.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_53_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_53;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_54;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_55;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_56;
};

/**
 * Signals in message BMU2_Vol_57.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_57_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_57;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_58;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_59;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_60;
};

/**
 * Signals in message BMU2_Vol_61.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_61_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_61;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_62;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_63;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_64;
};

/**
 * Signals in message BMU2_Vol_65.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_65_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_65;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_66;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_67;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_68;
};

/**
 * Signals in message BMU2_Vol_69.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_69_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_69;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_70;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_71;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_72;
};

/**
 * Signals in message BMU2_Vol_73.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_73_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_73;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_74;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_75;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_76;
};

/**
 * Signals in message BMU2_Vol_77.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_77_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_77;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_78;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_79;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_80;
};

/**
 * Signals in message BMU2_Vol_81.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_81_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_81;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_82;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_83;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_84;
};

/**
 * Signals in message BMU2_Vol_85.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_85_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_85;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_86;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_87;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_88;
};

/**
 * Signals in message BMU2_Vol_89.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_89_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_89;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_90;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_91;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_92;
};

/**
 * Signals in message BMU2_Vol_93.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_vol_93_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_93;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_94;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_95;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu2_vol_96;
};

/**
 * Signals in message BMU3_Vol_1.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_1_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_1;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_2;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_3;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_4;
};

/**
 * Signals in message BMU3_Vol_5.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_5_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_5;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_6;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_7;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_8;
};

/**
 * Signals in message BMU3_Vol_9.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_9_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_9;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_10;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_11;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_12;
};

/**
 * Signals in message BMU3_Vol_13.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_13_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_13;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_14;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_15;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_16;
};

/**
 * Signals in message BMU3_Vol_17.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_17_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_17;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_18;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_19;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_20;
};

/**
 * Signals in message BMU3_Vol_21.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_21_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_21;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_22;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_23;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_24;
};

/**
 * Signals in message BMU3_Vol_25.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_25_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_25;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_26;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_27;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_28;
};

/**
 * Signals in message BMU3_Vol_29.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_29_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_29;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_30;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_31;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_32;
};

/**
 * Signals in message BMU3_Vol_33.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_33_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_33;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_34;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_35;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_36;
};

/**
 * Signals in message BMU3_Vol_37.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_37_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_37;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_38;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_39;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_40;
};

/**
 * Signals in message BMU3_Vol_41.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_41_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_41;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_42;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_43;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_44;
};

/**
 * Signals in message BMU3_Vol_45.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_45_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_45;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_46;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_47;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_48;
};

/**
 * Signals in message BMU3_Vol_49.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_49_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_49;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_50;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_51;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_52;
};

/**
 * Signals in message BMU3_Vol_53.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_53_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_53;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_54;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_55;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_56;
};

/**
 * Signals in message BMU3_Vol_57.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_57_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_57;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_58;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_59;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_60;
};

/**
 * Signals in message BMU3_Vol_61.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_61_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_61;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_62;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_63;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_64;
};

/**
 * Signals in message BMU3_Vol_65.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_65_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_65;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_66;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_67;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_68;
};

/**
 * Signals in message BMU3_Vol_69.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_69_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_69;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_70;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_71;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_72;
};

/**
 * Signals in message BMU3_Vol_73.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_73_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_73;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_74;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_75;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_76;
};

/**
 * Signals in message BMU3_Vol_77.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_77_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_77;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_78;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_79;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_80;
};

/**
 * Signals in message BMU3_Vol_81.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_81_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_81;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_82;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_83;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_84;
};

/**
 * Signals in message BMU3_Vol_85.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_85_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_85;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_86;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_87;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_88;
};

/**
 * Signals in message BMU3_Vol_89.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_89_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_89;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_90;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_91;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_92;
};

/**
 * Signals in message BMU3_Vol_93.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_vol_93_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_93;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_94;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_95;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu3_vol_96;
};

/**
 * Signals in message BMU4_Vol_1.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_1_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_1;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_2;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_3;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_4;
};

/**
 * Signals in message BMU4_Vol_5.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_5_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_5;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_6;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_7;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_8;
};

/**
 * Signals in message BMU4_Vol_9.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_9_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_9;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_10;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_11;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_12;
};

/**
 * Signals in message BMU4_Vol_13.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_13_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_13;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_14;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_15;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_16;
};

/**
 * Signals in message BMU4_Vol_17.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_17_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_17;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_18;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_19;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_20;
};

/**
 * Signals in message BMU4_Vol_21.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_21_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_21;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_22;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_23;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_24;
};

/**
 * Signals in message BMU4_Vol_25.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_25_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_25;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_26;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_27;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_28;
};

/**
 * Signals in message BMU4_Vol_29.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_29_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_29;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_30;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_31;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_32;
};

/**
 * Signals in message BMU4_Vol_33.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_33_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_33;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_34;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_35;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_36;
};

/**
 * Signals in message BMU4_Vol_37.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_37_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_37;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_38;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_39;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_40;
};

/**
 * Signals in message BMU4_Vol_41.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_41_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_41;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_42;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_43;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_44;
};

/**
 * Signals in message BMU4_Vol_45.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_45_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_45;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_46;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_47;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_48;
};

/**
 * Signals in message BMU4_Vol_49.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_49_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_49;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_50;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_51;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_52;
};

/**
 * Signals in message BMU4_Vol_53.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_53_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_53;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_54;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_55;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_56;
};

/**
 * Signals in message BMU4_Vol_57.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_57_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_57;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_58;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_59;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_60;
};

/**
 * Signals in message BMU4_Vol_61.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_61_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_61;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_62;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_63;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_64;
};

/**
 * Signals in message BMU4_Vol_65.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_65_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_65;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_66;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_67;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_68;
};

/**
 * Signals in message BMU4_Vol_69.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_69_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_69;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_70;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_71;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_72;
};

/**
 * Signals in message BMU4_Vol_73.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_73_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_73;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_74;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_75;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_76;
};

/**
 * Signals in message BMU4_Vol_77.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_77_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_77;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_78;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_79;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_80;
};

/**
 * Signals in message BMU4_Vol_81.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_81_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_81;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_82;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_83;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_84;
};

/**
 * Signals in message BMU4_Vol_85.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_85_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_85;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_86;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_87;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_88;
};

/**
 * Signals in message BMU4_Vol_89.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_89_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_89;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_90;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_91;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_92;
};

/**
 * Signals in message BMU4_Vol_93.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_vol_93_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_93;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_94;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_95;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu4_vol_96;
};

/**
 * Signals in message BMU5_Vol_1.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_1_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_1;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_2;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_3;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_4;
};

/**
 * Signals in message BMU5_Vol_5.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_5_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_5;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_6;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_7;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_8;
};

/**
 * Signals in message BMU5_Vol_9.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_9_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_9;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_10;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_11;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_12;
};

/**
 * Signals in message BMU5_Vol_13.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_13_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_13;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_14;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_15;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_16;
};

/**
 * Signals in message BMU5_Vol_17.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_17_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_17;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_18;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_19;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_20;
};

/**
 * Signals in message BMU5_Vol_21.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_21_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_21;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_22;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_23;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_24;
};

/**
 * Signals in message BMU5_Vol_25.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_25_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_25;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_26;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_27;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_28;
};

/**
 * Signals in message BMU5_Vol_29.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_29_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_29;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_30;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_31;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_32;
};

/**
 * Signals in message BMU5_Vol_33.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_33_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_33;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_34;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_35;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_36;
};

/**
 * Signals in message BMU5_Vol_37.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_37_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_37;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_38;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_39;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_40;
};

/**
 * Signals in message BMU5_Vol_41.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_41_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_41;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_42;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_43;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_44;
};

/**
 * Signals in message BMU5_Vol_45.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_45_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_45;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_46;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_47;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_48;
};

/**
 * Signals in message BMU5_Vol_49.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_49_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_49;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_50;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_51;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_52;
};

/**
 * Signals in message BMU5_Vol_53.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_53_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_53;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_54;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_55;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_56;
};

/**
 * Signals in message BMU5_Vol_57.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_57_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_57;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_58;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_59;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_60;
};

/**
 * Signals in message BMU5_Vol_61.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_61_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_61;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_62;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_63;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_64;
};

/**
 * Signals in message BMU5_Vol_65.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_65_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_65;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_66;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_67;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_68;
};

/**
 * Signals in message BMU5_Vol_69.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_69_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_69;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_70;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_71;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_72;
};

/**
 * Signals in message BMU5_Vol_73.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_73_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_73;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_74;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_75;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_76;
};

/**
 * Signals in message BMU5_Vol_77.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_77_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_77;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_78;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_79;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_80;
};

/**
 * Signals in message BMU5_Vol_81.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_81_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_81;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_82;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_83;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_84;
};

/**
 * Signals in message BMU5_Vol_85.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_85_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_85;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_86;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_87;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_88;
};

/**
 * Signals in message BMU5_Vol_89.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_89_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_89;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_90;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_91;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_92;
};

/**
 * Signals in message BMU5_Vol_93.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_vol_93_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_93;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_94;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_95;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu5_vol_96;
};

/**
 * Signals in message BMU6_Vol_1.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_1_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_1;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_2;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_3;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_4;
};

/**
 * Signals in message BMU6_Vol_5.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_5_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_5;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_6;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_7;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_8;
};

/**
 * Signals in message BMU6_Vol_9.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_9_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_9;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_10;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_11;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_12;
};

/**
 * Signals in message BMU6_Vol_13.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_13_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_13;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_14;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_15;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_16;
};

/**
 * Signals in message BMU6_Vol_17.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_17_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_17;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_18;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_19;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_20;
};

/**
 * Signals in message BMU6_Vol_21.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_21_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_21;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_22;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_23;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_24;
};

/**
 * Signals in message BMU6_Vol_25.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_25_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_25;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_26;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_27;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_28;
};

/**
 * Signals in message BMU6_Vol_29.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_29_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_29;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_30;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_31;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_32;
};

/**
 * Signals in message BMU6_Vol_33.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_33_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_33;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_34;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_35;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_36;
};

/**
 * Signals in message BMU6_Vol_37.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_37_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_37;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_38;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_39;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_40;
};

/**
 * Signals in message BMU6_Vol_41.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_41_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_41;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_42;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_43;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_44;
};

/**
 * Signals in message BMU6_Vol_45.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_45_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_45;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_46;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_47;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_48;
};

/**
 * Signals in message BMU6_Vol_49.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_49_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_49;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_50;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_51;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_52;
};

/**
 * Signals in message BMU6_Vol_53.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_53_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_53;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_54;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_55;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_56;
};

/**
 * Signals in message BMU6_Vol_57.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_57_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_57;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_58;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_59;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_60;
};

/**
 * Signals in message BMU6_Vol_61.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_61_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_61;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_62;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_63;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_64;
};

/**
 * Signals in message BMU6_Vol_65.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_65_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_65;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_66;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_67;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_68;
};

/**
 * Signals in message BMU6_Vol_69.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_69_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_69;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_70;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_71;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_72;
};

/**
 * Signals in message BMU6_Vol_73.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_73_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_73;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_74;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_75;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_76;
};

/**
 * Signals in message BMU6_Vol_77.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_77_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_77;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_78;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_79;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_80;
};

/**
 * Signals in message BMU6_Vol_81.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_81_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_81;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_82;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_83;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_84;
};

/**
 * Signals in message BMU6_Vol_85.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_85_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_85;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_86;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_87;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_88;
};

/**
 * Signals in message BMU6_Vol_89.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_89_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_89;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_90;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_91;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_92;
};

/**
 * Signals in message BMU6_Vol_93.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_vol_93_t {
    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_93;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_94;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_95;

    /**
     * Range: 1000..1000 (1..1 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bmu6_vol_96;
};

/**
 * Signals in message BMU1_Temp_1.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_temp_1_t {
    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_1;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_2;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_3;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_4;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_5;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_6;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_7;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_8;
};

/**
 * Signals in message BMU1_Temp_9.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_temp_9_t {
    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_9;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_10;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_11;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_12;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_13;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_14;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_15;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_16;
};

/**
 * Signals in message BMU1_Temp_17.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu1_temp_17_t {
    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_17;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_18;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_19;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_20;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_21;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_22;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_23;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu1_temp_24;
};

/**
 * Signals in message BMU2_Temp_1.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_temp_1_t {
    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_1;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_2;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_3;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_4;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_5;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_6;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_7;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_8;
};

/**
 * Signals in message BMU2_Temp_9.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_temp_9_t {
    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_9;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_10;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_11;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_12;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_13;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_14;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_15;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_16;
};

/**
 * Signals in message BMU2_Temp_17.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu2_temp_17_t {
    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_17;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_18;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_19;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_20;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_21;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_22;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_23;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu2_temp_24;
};

/**
 * Signals in message BMU3_Temp_1.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_temp_1_t {
    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_1;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_2;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_3;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_4;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_5;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_6;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_7;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_8;
};

/**
 * Signals in message BMU3_Temp_9.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_temp_9_t {
    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_9;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_10;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_11;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_12;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_13;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_14;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_15;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_16;
};

/**
 * Signals in message BMU3_Temp_17.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu3_temp_17_t {
    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_17;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_18;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_19;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_20;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_21;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_22;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_23;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu3_temp_24;
};

/**
 * Signals in message BMU4_Temp_1.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_temp_1_t {
    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_1;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_2;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_3;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_4;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_5;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_6;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_7;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_8;
};

/**
 * Signals in message BMU4_Temp_9.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_temp_9_t {
    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_9;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_10;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_11;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_12;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_13;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_14;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_15;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_16;
};

/**
 * Signals in message BMU4_Temp_17.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu4_temp_17_t {
    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_17;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_18;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_19;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_20;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_21;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_22;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_23;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu4_temp_24;
};

/**
 * Signals in message BMU5_Temp_1.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_temp_1_t {
    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_1;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_2;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_3;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_4;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_5;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_6;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_7;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_8;
};

/**
 * Signals in message BMU5_Temp_9.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_temp_9_t {
    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_9;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_10;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_11;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_12;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_13;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_14;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_15;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_16;
};

/**
 * Signals in message BMU5_Temp_17.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu5_temp_17_t {
    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_17;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_18;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_19;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_20;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_21;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_22;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_23;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu5_temp_24;
};

/**
 * Signals in message BMU6_Temp_1.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_temp_1_t {
    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_1;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_2;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_3;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_4;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_5;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_6;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_7;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_8;
};

/**
 * Signals in message BMU6_Temp_9.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_temp_9_t {
    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_9;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_10;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_11;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_12;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_13;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_14;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_15;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_16;
};

/**
 * Signals in message BMU6_Temp_17.
 *
 * All signal values are as on the CAN bus.
 */
struct tqsy_can_matrix_bmu6_temp_17_t {
    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_17;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_18;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_19;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_20;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_21;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_22;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_23;

    /**
     * Range: 41..41 (1..1 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bmu6_temp_24;
};

/**
 * Pack message BMS_RelayFaultInfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bms_relay_fault_info_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bms_relay_fault_info_t *src_p,
    size_t size);

/**
 * Unpack message BMS_RelayFaultInfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bms_relay_fault_info_unpack(
    struct tqsy_can_matrix_bms_relay_fault_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t tqsy_can_matrix_bms_relay_fault_info_relay_err_code_motor_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_relay_fault_info_relay_err_code_motor_pos_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_relay_fault_info_relay_err_code_motor_pos_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t tqsy_can_matrix_bms_relay_fault_info_relay_err_code_motor_neg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_relay_fault_info_relay_err_code_motor_neg_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_relay_fault_info_relay_err_code_motor_neg_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t tqsy_can_matrix_bms_relay_fault_info_relay_err_code_fan_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_relay_fault_info_relay_err_code_fan_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_relay_fault_info_relay_err_code_fan_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t tqsy_can_matrix_bms_relay_fault_info_relay_err_code_heat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_relay_fault_info_relay_err_code_heat_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_relay_fault_info_relay_err_code_heat_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t tqsy_can_matrix_bms_relay_fault_info_relay_err_code_pre_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_relay_fault_info_relay_err_code_pre_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_relay_fault_info_relay_err_code_pre_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t tqsy_can_matrix_bms_relay_fault_info_relay_err_code_chg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_relay_fault_info_relay_err_code_chg_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_relay_fault_info_relay_err_code_chg_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t tqsy_can_matrix_bms_relay_fault_info_relay_err_code_rdt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_relay_fault_info_relay_err_code_rdt_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_relay_fault_info_relay_err_code_rdt_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t tqsy_can_matrix_bms_relay_fault_info_relay_err_code_bmu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_relay_fault_info_relay_err_code_bmu_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_relay_fault_info_relay_err_code_bmu_is_in_range(int8_t value);

/**
 * Pack message BMS_HardwareFaultInfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bms_hardware_fault_info_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bms_hardware_fault_info_t *src_p,
    size_t size);

/**
 * Unpack message BMS_HardwareFaultInfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bms_hardware_fault_info_unpack(
    struct tqsy_can_matrix_bms_hardware_fault_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_detct_iso_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_detct_iso_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_detct_iso_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_detct_cur_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_detct_cur_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_detct_cur_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_detct_temper_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_detct_temper_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_detct_temper_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_detct_cellv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_detct_cellv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_detct_cellv_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_detect_cpu_ee_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_detect_cpu_ee_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_detect_cpu_ee_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_detct_extern_clck_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_detct_extern_clck_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_detct_extern_clck_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_detct_sumv_out_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_detct_sumv_out_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_detct_sumv_out_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_detct_sumv_in_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_detct_sumv_in_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_detct_sumv_in_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_cpu_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_cpu_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_cpu_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_detect_cpu_flash_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_detect_cpu_flash_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_detect_cpu_flash_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_detct_45db041_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_detct_45db041_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_detct_45db041_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_detct_ee_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_detct_ee_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_detct_ee_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_detct_can2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_detct_can2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_detct_can2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_detct_can1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_detct_can1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_detct_can1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_detct_can0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_detct_can0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_detct_can0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_detct_can4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_detct_can4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_detct_can4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_rs485_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_rs485_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_rs485_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_rs232_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_rs232_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_rs232_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_detct_ethernet_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_detct_ethernet_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_detct_ethernet_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_detct_can3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_detct_can3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_detct_can3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_soft_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_soft_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_soft_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_detct_wh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_detct_wh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_detct_wh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_dch_detct_bal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_dch_detct_bal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_dch_detct_bal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_chg_detct_bal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_chg_detct_bal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_chg_detct_bal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_cur_mode4_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_cur_mode4_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_cur_mode4_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_cur_mode3_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_cur_mode3_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_cur_mode3_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_cur_mode2_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_cur_mode2_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_cur_mode2_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_cur_mode1_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_cur_mode1_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_cur_mode1_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_config_cell_num_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_config_cell_num_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_config_cell_num_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_do_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_do_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_do_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_hardware_fault_info_di_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_hardware_fault_info_di_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_hardware_fault_info_di_err_is_in_range(uint8_t value);

/**
 * Pack message BMS_BatterySystemFaultInfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bms_battery_system_fault_info_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bms_battery_system_fault_info_t *src_p,
    size_t size);

/**
 * Unpack message BMS_BatterySystemFaultInfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bms_battery_system_fault_info_unpack(
    struct tqsy_can_matrix_bms_battery_system_fault_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_cur_open_neg_relay_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_cur_open_neg_relay_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_cur_open_neg_relay_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_cur_open_pos_relay_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_cur_open_pos_relay_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_cur_open_pos_relay_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_pos_not_pickup_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_pos_not_pickup_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_pos_not_pickup_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_pos_adjoin_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_pos_adjoin_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_pos_adjoin_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_pre_not_pickup_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_pre_not_pickup_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_pre_not_pickup_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_pre_adjoin_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_pre_adjoin_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_pre_adjoin_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_neg_not_pickup_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_neg_not_pickup_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_neg_not_pickup_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_neg_adjoin_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_neg_adjoin_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_neg_adjoin_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_hvil_abnrml_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_hvil_abnrml_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_hvil_abnrml_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_hvil_fail_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_hvil_fail_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_hvil_fail_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_dcdc_not_pickup_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_dcdc_not_pickup_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_dcdc_not_pickup_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_dcdc_adjoin_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_dcdc_adjoin_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_dcdc_adjoin_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_spot_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_spot_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_spot_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_cur_open_chg_relay_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_cur_open_chg_relay_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_cur_open_chg_relay_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_chg_not_pickup_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_chg_not_pickup_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_chg_not_pickup_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_chg_adjoin_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_chg_adjoin_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_chg_adjoin_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_pre_chg_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_pre_chg_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_pre_chg_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_heat_not_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_heat_not_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_heat_not_off_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_heat_not_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_heat_not_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_heat_not_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_fan_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_fan_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_fan_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_fan_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_fan_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_fan_off_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_air_det_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_air_det_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_air_det_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_inlet_t_low_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_inlet_t_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_inlet_t_low_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_inlet_t_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_inlet_t_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_inlet_t_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_heat_t_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_heat_t_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_heat_t_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_outlet_t_low_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_outlet_t_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_outlet_t_low_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_system_fault_info_outlet_t_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_system_fault_info_outlet_t_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_system_fault_info_outlet_t_high_is_in_range(uint8_t value);

/**
 * Pack message BMS_BatteryFaultInformation.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bms_battery_fault_information_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bms_battery_fault_information_t *src_p,
    size_t size);

/**
 * Unpack message BMS_BatteryFaultInformation.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bms_battery_fault_information_unpack(
    struct tqsy_can_matrix_bms_battery_fault_information_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_cell_v_low_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_cell_v_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_cell_v_low_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_cell_v_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_cell_v_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_cell_v_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_sum_v_low_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_sum_v_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_sum_v_low_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_sum_v_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_sum_v_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_sum_v_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_det_t_all_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_det_t_all_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_det_t_all_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_det_t_sngl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_det_t_sngl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_det_t_sngl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_det_v_all_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_det_v_all_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_det_v_all_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_det_v_sngl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_det_v_sngl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_det_v_sngl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_dch_cur_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_dch_cur_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_dch_cur_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_chg_cur_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_chg_cur_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_chg_cur_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_t_low_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_t_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_t_low_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_t_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_t_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_t_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_soc_low_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_soc_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_soc_low_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_soc_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_soc_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_soc_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_bat_grup_diff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_bat_grup_diff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_bat_grup_diff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_fdbck_cur_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_fdbck_cur_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_fdbck_cur_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_avrg_v_diff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_avrg_v_diff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_avrg_v_diff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_soc_diff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_soc_diff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_soc_diff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_bat_type_diff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_bat_type_diff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_bat_type_diff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_bat_manu_diff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_bat_manu_diff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_bat_manu_diff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_bat_r_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_bat_r_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_bat_r_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_cell_bat_r_diff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_cell_bat_r_diff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_cell_bat_r_diff_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_cell_bat_r_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_cell_bat_r_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_cell_bat_r_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_mode2_dch_cur_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_mode2_dch_cur_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_mode2_dch_cur_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_mode2_chg_cur_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_mode2_chg_cur_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_mode2_chg_cur_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_mode1_dch_cur_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_mode1_dch_cur_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_mode1_dch_cur_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_mode1_chg_cur_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_mode1_chg_cur_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_mode1_chg_cur_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_mode4_dch_cur_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_mode4_dch_cur_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_mode4_dch_cur_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_mode4_chg_cur_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_mode4_chg_cur_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_mode4_chg_cur_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_mode3_dch_cur_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_mode3_dch_cur_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_mode3_dch_cur_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bms_battery_fault_information_mode3_chg_cur_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_battery_fault_information_mode3_chg_cur_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_battery_fault_information_mode3_chg_cur_high_is_in_range(uint8_t value);

/**
 * Pack message BMS_TheLeakageLocation.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bms_the_leakage_location_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bms_the_leakage_location_t *src_p,
    size_t size);

/**
 * Unpack message BMS_TheLeakageLocation.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bms_the_leakage_location_unpack(
    struct tqsy_can_matrix_bms_the_leakage_location_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bms_the_leakage_location_leakage_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_the_leakage_location_leakage_res_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_the_leakage_location_leakage_res_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bms_the_leakage_location_leakage_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_the_leakage_location_leakage_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_the_leakage_location_leakage_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bms_the_leakage_location_display_fg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_the_leakage_location_display_fg_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_the_leakage_location_display_fg_is_in_range(uint16_t value);

/**
 * Pack message BMS_InsulationInformation.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bms_insulation_information_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bms_insulation_information_t *src_p,
    size_t size);

/**
 * Unpack message BMS_InsulationInformation.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bms_insulation_information_unpack(
    struct tqsy_can_matrix_bms_insulation_information_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bms_insulation_information_iso_res_val_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bms_insulation_information_iso_res_val_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bms_insulation_information_iso_res_val_is_in_range(uint16_t value);

/**
 * Pack message MBMS_SUM_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_mbms_sum_3_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_mbms_sum_3_t *src_p,
    size_t size);

/**
 * Unpack message MBMS_SUM_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_mbms_sum_3_unpack(
    struct tqsy_can_matrix_mbms_sum_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_mbms_sum_3_max_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_mbms_sum_3_max_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_mbms_sum_3_max_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_mbms_sum_3_min_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_mbms_sum_3_min_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_mbms_sum_3_min_cell_volt_is_in_range(uint16_t value);

/**
 * Pack message MBMS_Sum.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_mbms_sum_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_mbms_sum_t *src_p,
    size_t size);

/**
 * Unpack message MBMS_Sum.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_mbms_sum_unpack(
    struct tqsy_can_matrix_mbms_sum_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_mbms_sum_sum_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_mbms_sum_sum_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_mbms_sum_sum_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_mbms_sum_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_mbms_sum_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_mbms_sum_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_mbms_sum_sum_v_out_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_mbms_sum_sum_v_out_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_mbms_sum_sum_v_out_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_mbms_sum_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_mbms_sum_soc_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_mbms_sum_soc_is_in_range(uint16_t value);

/**
 * Pack message MBMS_Sum_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_mbms_sum_2_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_mbms_sum_2_t *src_p,
    size_t size);

/**
 * Unpack message MBMS_Sum_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_mbms_sum_2_unpack(
    struct tqsy_can_matrix_mbms_sum_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_mbms_sum_2_max_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_mbms_sum_2_max_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_mbms_sum_2_max_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_mbms_sum_2_min_t_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_mbms_sum_2_min_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_mbms_sum_2_min_t_is_in_range(uint8_t value);

/**
 * Pack message BMU1_Vol_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_1_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_1_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_1_unpack(
    struct tqsy_can_matrix_bmu1_vol_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_1_bmu1_vol_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_1_bmu1_vol_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_1_bmu1_vol_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_1_bmu1_vol_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_1_bmu1_vol_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_1_bmu1_vol_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_1_bmu1_vol_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_1_bmu1_vol_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_1_bmu1_vol_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_1_bmu1_vol_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_1_bmu1_vol_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_1_bmu1_vol_4_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_5_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_5_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_5_unpack(
    struct tqsy_can_matrix_bmu1_vol_5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_5_bmu1_vol_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_5_bmu1_vol_5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_5_bmu1_vol_5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_5_bmu1_vol_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_5_bmu1_vol_6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_5_bmu1_vol_6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_5_bmu1_vol_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_5_bmu1_vol_7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_5_bmu1_vol_7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_5_bmu1_vol_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_5_bmu1_vol_8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_5_bmu1_vol_8_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_9_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_9_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_9_unpack(
    struct tqsy_can_matrix_bmu1_vol_9_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_9_bmu1_vol_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_9_bmu1_vol_9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_9_bmu1_vol_9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_9_bmu1_vol_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_9_bmu1_vol_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_9_bmu1_vol_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_9_bmu1_vol_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_9_bmu1_vol_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_9_bmu1_vol_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_9_bmu1_vol_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_9_bmu1_vol_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_9_bmu1_vol_12_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_13.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_13_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_13_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_13.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_13_unpack(
    struct tqsy_can_matrix_bmu1_vol_13_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_13_bmu1_vol_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_13_bmu1_vol_13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_13_bmu1_vol_13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_13_bmu1_vol_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_13_bmu1_vol_14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_13_bmu1_vol_14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_13_bmu1_vol_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_13_bmu1_vol_15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_13_bmu1_vol_15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_13_bmu1_vol_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_13_bmu1_vol_16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_13_bmu1_vol_16_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_17.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_17_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_17_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_17.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_17_unpack(
    struct tqsy_can_matrix_bmu1_vol_17_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_17_bmu1_vol_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_17_bmu1_vol_17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_17_bmu1_vol_17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_17_bmu1_vol_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_17_bmu1_vol_18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_17_bmu1_vol_18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_17_bmu1_vol_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_17_bmu1_vol_19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_17_bmu1_vol_19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_17_bmu1_vol_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_17_bmu1_vol_20_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_17_bmu1_vol_20_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_21.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_21_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_21_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_21.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_21_unpack(
    struct tqsy_can_matrix_bmu1_vol_21_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_21_bmu1_vol_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_21_bmu1_vol_21_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_21_bmu1_vol_21_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_21_bmu1_vol_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_21_bmu1_vol_22_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_21_bmu1_vol_22_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_21_bmu1_vol_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_21_bmu1_vol_23_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_21_bmu1_vol_23_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_21_bmu1_vol_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_21_bmu1_vol_24_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_21_bmu1_vol_24_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_25.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_25_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_25_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_25.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_25_unpack(
    struct tqsy_can_matrix_bmu1_vol_25_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_25_bmu1_vol_25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_25_bmu1_vol_25_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_25_bmu1_vol_25_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_25_bmu1_vol_26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_25_bmu1_vol_26_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_25_bmu1_vol_26_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_25_bmu1_vol_27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_25_bmu1_vol_27_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_25_bmu1_vol_27_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_25_bmu1_vol_28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_25_bmu1_vol_28_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_25_bmu1_vol_28_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_29.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_29_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_29_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_29.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_29_unpack(
    struct tqsy_can_matrix_bmu1_vol_29_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_29_bmu1_vol_29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_29_bmu1_vol_29_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_29_bmu1_vol_29_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_29_bmu1_vol_30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_29_bmu1_vol_30_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_29_bmu1_vol_30_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_29_bmu1_vol_31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_29_bmu1_vol_31_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_29_bmu1_vol_31_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_29_bmu1_vol_32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_29_bmu1_vol_32_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_29_bmu1_vol_32_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_33.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_33_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_33_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_33.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_33_unpack(
    struct tqsy_can_matrix_bmu1_vol_33_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_33_bmu1_vol_33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_33_bmu1_vol_33_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_33_bmu1_vol_33_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_33_bmu1_vol_34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_33_bmu1_vol_34_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_33_bmu1_vol_34_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_33_bmu1_vol_35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_33_bmu1_vol_35_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_33_bmu1_vol_35_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_33_bmu1_vol_36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_33_bmu1_vol_36_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_33_bmu1_vol_36_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_37.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_37_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_37_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_37.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_37_unpack(
    struct tqsy_can_matrix_bmu1_vol_37_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_37_bmu1_vol_37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_37_bmu1_vol_37_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_37_bmu1_vol_37_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_37_bmu1_vol_38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_37_bmu1_vol_38_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_37_bmu1_vol_38_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_37_bmu1_vol_39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_37_bmu1_vol_39_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_37_bmu1_vol_39_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_37_bmu1_vol_40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_37_bmu1_vol_40_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_37_bmu1_vol_40_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_41.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_41_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_41_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_41.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_41_unpack(
    struct tqsy_can_matrix_bmu1_vol_41_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_41_bmu1_vol_41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_41_bmu1_vol_41_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_41_bmu1_vol_41_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_41_bmu1_vol_42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_41_bmu1_vol_42_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_41_bmu1_vol_42_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_41_bmu1_vol_43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_41_bmu1_vol_43_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_41_bmu1_vol_43_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_41_bmu1_vol_44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_41_bmu1_vol_44_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_41_bmu1_vol_44_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_45.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_45_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_45_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_45.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_45_unpack(
    struct tqsy_can_matrix_bmu1_vol_45_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_45_bmu1_vol_45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_45_bmu1_vol_45_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_45_bmu1_vol_45_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_45_bmu1_vol_46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_45_bmu1_vol_46_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_45_bmu1_vol_46_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_45_bmu1_vol_47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_45_bmu1_vol_47_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_45_bmu1_vol_47_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_45_bmu1_vol_48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_45_bmu1_vol_48_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_45_bmu1_vol_48_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_49.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_49_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_49_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_49.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_49_unpack(
    struct tqsy_can_matrix_bmu1_vol_49_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_49_bmu1_vol_49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_49_bmu1_vol_49_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_49_bmu1_vol_49_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_49_bmu1_vol_50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_49_bmu1_vol_50_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_49_bmu1_vol_50_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_49_bmu1_vol_51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_49_bmu1_vol_51_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_49_bmu1_vol_51_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_49_bmu1_vol_52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_49_bmu1_vol_52_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_49_bmu1_vol_52_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_53.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_53_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_53_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_53.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_53_unpack(
    struct tqsy_can_matrix_bmu1_vol_53_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_53_bmu1_vol_53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_53_bmu1_vol_53_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_53_bmu1_vol_53_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_53_bmu1_vol_54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_53_bmu1_vol_54_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_53_bmu1_vol_54_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_53_bmu1_vol_55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_53_bmu1_vol_55_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_53_bmu1_vol_55_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_53_bmu1_vol_56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_53_bmu1_vol_56_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_53_bmu1_vol_56_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_57.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_57_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_57_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_57.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_57_unpack(
    struct tqsy_can_matrix_bmu1_vol_57_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_57_bmu1_vol_57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_57_bmu1_vol_57_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_57_bmu1_vol_57_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_57_bmu1_vol_58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_57_bmu1_vol_58_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_57_bmu1_vol_58_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_57_bmu1_vol_59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_57_bmu1_vol_59_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_57_bmu1_vol_59_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_57_bmu1_vol_60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_57_bmu1_vol_60_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_57_bmu1_vol_60_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_61.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_61_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_61_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_61.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_61_unpack(
    struct tqsy_can_matrix_bmu1_vol_61_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_61_bmu1_vol_61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_61_bmu1_vol_61_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_61_bmu1_vol_61_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_61_bmu1_vol_62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_61_bmu1_vol_62_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_61_bmu1_vol_62_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_61_bmu1_vol_63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_61_bmu1_vol_63_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_61_bmu1_vol_63_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_61_bmu1_vol_64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_61_bmu1_vol_64_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_61_bmu1_vol_64_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_65.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_65_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_65_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_65.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_65_unpack(
    struct tqsy_can_matrix_bmu1_vol_65_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_65_bmu1_vol_65_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_65_bmu1_vol_65_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_65_bmu1_vol_65_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_65_bmu1_vol_66_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_65_bmu1_vol_66_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_65_bmu1_vol_66_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_65_bmu1_vol_67_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_65_bmu1_vol_67_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_65_bmu1_vol_67_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_65_bmu1_vol_68_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_65_bmu1_vol_68_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_65_bmu1_vol_68_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_69.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_69_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_69_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_69.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_69_unpack(
    struct tqsy_can_matrix_bmu1_vol_69_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_69_bmu1_vol_69_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_69_bmu1_vol_69_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_69_bmu1_vol_69_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_69_bmu1_vol_70_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_69_bmu1_vol_70_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_69_bmu1_vol_70_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_69_bmu1_vol_71_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_69_bmu1_vol_71_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_69_bmu1_vol_71_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_69_bmu1_vol_72_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_69_bmu1_vol_72_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_69_bmu1_vol_72_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_73.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_73_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_73_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_73.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_73_unpack(
    struct tqsy_can_matrix_bmu1_vol_73_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_73_bmu1_vol_73_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_73_bmu1_vol_73_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_73_bmu1_vol_73_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_73_bmu1_vol_74_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_73_bmu1_vol_74_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_73_bmu1_vol_74_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_73_bmu1_vol_75_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_73_bmu1_vol_75_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_73_bmu1_vol_75_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_73_bmu1_vol_76_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_73_bmu1_vol_76_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_73_bmu1_vol_76_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_77.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_77_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_77_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_77.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_77_unpack(
    struct tqsy_can_matrix_bmu1_vol_77_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_77_bmu1_vol_77_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_77_bmu1_vol_77_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_77_bmu1_vol_77_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_77_bmu1_vol_78_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_77_bmu1_vol_78_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_77_bmu1_vol_78_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_77_bmu1_vol_79_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_77_bmu1_vol_79_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_77_bmu1_vol_79_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_77_bmu1_vol_80_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_77_bmu1_vol_80_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_77_bmu1_vol_80_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_81.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_81_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_81_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_81.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_81_unpack(
    struct tqsy_can_matrix_bmu1_vol_81_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_81_bmu1_vol_81_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_81_bmu1_vol_81_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_81_bmu1_vol_81_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_81_bmu1_vol_82_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_81_bmu1_vol_82_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_81_bmu1_vol_82_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_81_bmu1_vol_83_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_81_bmu1_vol_83_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_81_bmu1_vol_83_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_81_bmu1_vol_84_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_81_bmu1_vol_84_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_81_bmu1_vol_84_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_85.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_85_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_85_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_85.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_85_unpack(
    struct tqsy_can_matrix_bmu1_vol_85_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_85_bmu1_vol_85_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_85_bmu1_vol_85_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_85_bmu1_vol_85_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_85_bmu1_vol_86_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_85_bmu1_vol_86_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_85_bmu1_vol_86_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_85_bmu1_vol_87_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_85_bmu1_vol_87_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_85_bmu1_vol_87_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_85_bmu1_vol_88_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_85_bmu1_vol_88_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_85_bmu1_vol_88_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_89.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_89_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_89_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_89.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_89_unpack(
    struct tqsy_can_matrix_bmu1_vol_89_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_89_bmu1_vol_89_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_89_bmu1_vol_89_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_89_bmu1_vol_89_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_89_bmu1_vol_90_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_89_bmu1_vol_90_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_89_bmu1_vol_90_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_89_bmu1_vol_91_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_89_bmu1_vol_91_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_89_bmu1_vol_91_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_89_bmu1_vol_92_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_89_bmu1_vol_92_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_89_bmu1_vol_92_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Vol_93.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_93_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_vol_93_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Vol_93.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_vol_93_unpack(
    struct tqsy_can_matrix_bmu1_vol_93_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_93_bmu1_vol_93_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_93_bmu1_vol_93_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_93_bmu1_vol_93_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_93_bmu1_vol_94_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_93_bmu1_vol_94_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_93_bmu1_vol_94_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_93_bmu1_vol_95_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_93_bmu1_vol_95_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_93_bmu1_vol_95_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu1_vol_93_bmu1_vol_96_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_vol_93_bmu1_vol_96_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_vol_93_bmu1_vol_96_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_1_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_1_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_1_unpack(
    struct tqsy_can_matrix_bmu2_vol_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_1_bmu2_vol_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_1_bmu2_vol_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_1_bmu2_vol_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_1_bmu2_vol_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_1_bmu2_vol_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_1_bmu2_vol_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_1_bmu2_vol_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_1_bmu2_vol_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_1_bmu2_vol_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_1_bmu2_vol_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_1_bmu2_vol_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_1_bmu2_vol_4_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_5_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_5_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_5_unpack(
    struct tqsy_can_matrix_bmu2_vol_5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_5_bmu2_vol_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_5_bmu2_vol_5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_5_bmu2_vol_5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_5_bmu2_vol_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_5_bmu2_vol_6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_5_bmu2_vol_6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_5_bmu2_vol_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_5_bmu2_vol_7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_5_bmu2_vol_7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_5_bmu2_vol_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_5_bmu2_vol_8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_5_bmu2_vol_8_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_9_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_9_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_9_unpack(
    struct tqsy_can_matrix_bmu2_vol_9_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_9_bmu2_vol_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_9_bmu2_vol_9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_9_bmu2_vol_9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_9_bmu2_vol_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_9_bmu2_vol_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_9_bmu2_vol_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_9_bmu2_vol_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_9_bmu2_vol_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_9_bmu2_vol_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_9_bmu2_vol_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_9_bmu2_vol_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_9_bmu2_vol_12_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_13.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_13_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_13_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_13.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_13_unpack(
    struct tqsy_can_matrix_bmu2_vol_13_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_13_bmu2_vol_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_13_bmu2_vol_13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_13_bmu2_vol_13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_13_bmu2_vol_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_13_bmu2_vol_14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_13_bmu2_vol_14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_13_bmu2_vol_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_13_bmu2_vol_15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_13_bmu2_vol_15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_13_bmu2_vol_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_13_bmu2_vol_16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_13_bmu2_vol_16_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_17.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_17_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_17_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_17.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_17_unpack(
    struct tqsy_can_matrix_bmu2_vol_17_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_17_bmu2_vol_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_17_bmu2_vol_17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_17_bmu2_vol_17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_17_bmu2_vol_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_17_bmu2_vol_18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_17_bmu2_vol_18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_17_bmu2_vol_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_17_bmu2_vol_19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_17_bmu2_vol_19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_17_bmu2_vol_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_17_bmu2_vol_20_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_17_bmu2_vol_20_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_21.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_21_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_21_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_21.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_21_unpack(
    struct tqsy_can_matrix_bmu2_vol_21_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_21_bmu2_vol_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_21_bmu2_vol_21_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_21_bmu2_vol_21_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_21_bmu2_vol_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_21_bmu2_vol_22_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_21_bmu2_vol_22_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_21_bmu2_vol_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_21_bmu2_vol_23_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_21_bmu2_vol_23_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_21_bmu2_vol_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_21_bmu2_vol_24_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_21_bmu2_vol_24_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_25.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_25_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_25_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_25.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_25_unpack(
    struct tqsy_can_matrix_bmu2_vol_25_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_25_bmu2_vol_25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_25_bmu2_vol_25_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_25_bmu2_vol_25_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_25_bmu2_vol_26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_25_bmu2_vol_26_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_25_bmu2_vol_26_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_25_bmu2_vol_27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_25_bmu2_vol_27_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_25_bmu2_vol_27_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_25_bmu2_vol_28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_25_bmu2_vol_28_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_25_bmu2_vol_28_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_29.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_29_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_29_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_29.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_29_unpack(
    struct tqsy_can_matrix_bmu2_vol_29_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_29_bmu2_vol_29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_29_bmu2_vol_29_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_29_bmu2_vol_29_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_29_bmu2_vol_30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_29_bmu2_vol_30_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_29_bmu2_vol_30_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_29_bmu2_vol_31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_29_bmu2_vol_31_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_29_bmu2_vol_31_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_29_bmu2_vol_32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_29_bmu2_vol_32_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_29_bmu2_vol_32_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_33.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_33_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_33_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_33.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_33_unpack(
    struct tqsy_can_matrix_bmu2_vol_33_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_33_bmu2_vol_33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_33_bmu2_vol_33_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_33_bmu2_vol_33_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_33_bmu2_vol_34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_33_bmu2_vol_34_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_33_bmu2_vol_34_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_33_bmu2_vol_35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_33_bmu2_vol_35_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_33_bmu2_vol_35_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_33_bmu2_vol_36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_33_bmu2_vol_36_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_33_bmu2_vol_36_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_37.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_37_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_37_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_37.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_37_unpack(
    struct tqsy_can_matrix_bmu2_vol_37_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_37_bmu2_vol_37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_37_bmu2_vol_37_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_37_bmu2_vol_37_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_37_bmu2_vol_38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_37_bmu2_vol_38_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_37_bmu2_vol_38_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_37_bmu2_vol_39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_37_bmu2_vol_39_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_37_bmu2_vol_39_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_37_bmu2_vol_40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_37_bmu2_vol_40_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_37_bmu2_vol_40_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_41.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_41_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_41_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_41.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_41_unpack(
    struct tqsy_can_matrix_bmu2_vol_41_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_41_bmu2_vol_41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_41_bmu2_vol_41_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_41_bmu2_vol_41_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_41_bmu2_vol_42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_41_bmu2_vol_42_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_41_bmu2_vol_42_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_41_bmu2_vol_43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_41_bmu2_vol_43_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_41_bmu2_vol_43_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_41_bmu2_vol_44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_41_bmu2_vol_44_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_41_bmu2_vol_44_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_45.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_45_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_45_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_45.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_45_unpack(
    struct tqsy_can_matrix_bmu2_vol_45_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_45_bmu2_vol_45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_45_bmu2_vol_45_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_45_bmu2_vol_45_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_45_bmu2_vol_46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_45_bmu2_vol_46_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_45_bmu2_vol_46_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_45_bmu2_vol_47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_45_bmu2_vol_47_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_45_bmu2_vol_47_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_45_bmu2_vol_48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_45_bmu2_vol_48_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_45_bmu2_vol_48_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_49.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_49_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_49_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_49.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_49_unpack(
    struct tqsy_can_matrix_bmu2_vol_49_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_49_bmu2_vol_49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_49_bmu2_vol_49_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_49_bmu2_vol_49_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_49_bmu2_vol_50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_49_bmu2_vol_50_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_49_bmu2_vol_50_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_49_bmu2_vol_51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_49_bmu2_vol_51_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_49_bmu2_vol_51_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_49_bmu2_vol_52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_49_bmu2_vol_52_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_49_bmu2_vol_52_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_53.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_53_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_53_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_53.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_53_unpack(
    struct tqsy_can_matrix_bmu2_vol_53_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_53_bmu2_vol_53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_53_bmu2_vol_53_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_53_bmu2_vol_53_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_53_bmu2_vol_54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_53_bmu2_vol_54_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_53_bmu2_vol_54_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_53_bmu2_vol_55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_53_bmu2_vol_55_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_53_bmu2_vol_55_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_53_bmu2_vol_56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_53_bmu2_vol_56_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_53_bmu2_vol_56_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_57.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_57_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_57_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_57.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_57_unpack(
    struct tqsy_can_matrix_bmu2_vol_57_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_57_bmu2_vol_57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_57_bmu2_vol_57_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_57_bmu2_vol_57_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_57_bmu2_vol_58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_57_bmu2_vol_58_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_57_bmu2_vol_58_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_57_bmu2_vol_59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_57_bmu2_vol_59_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_57_bmu2_vol_59_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_57_bmu2_vol_60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_57_bmu2_vol_60_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_57_bmu2_vol_60_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_61.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_61_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_61_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_61.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_61_unpack(
    struct tqsy_can_matrix_bmu2_vol_61_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_61_bmu2_vol_61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_61_bmu2_vol_61_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_61_bmu2_vol_61_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_61_bmu2_vol_62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_61_bmu2_vol_62_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_61_bmu2_vol_62_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_61_bmu2_vol_63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_61_bmu2_vol_63_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_61_bmu2_vol_63_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_61_bmu2_vol_64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_61_bmu2_vol_64_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_61_bmu2_vol_64_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_65.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_65_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_65_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_65.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_65_unpack(
    struct tqsy_can_matrix_bmu2_vol_65_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_65_bmu2_vol_65_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_65_bmu2_vol_65_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_65_bmu2_vol_65_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_65_bmu2_vol_66_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_65_bmu2_vol_66_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_65_bmu2_vol_66_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_65_bmu2_vol_67_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_65_bmu2_vol_67_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_65_bmu2_vol_67_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_65_bmu2_vol_68_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_65_bmu2_vol_68_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_65_bmu2_vol_68_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_69.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_69_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_69_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_69.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_69_unpack(
    struct tqsy_can_matrix_bmu2_vol_69_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_69_bmu2_vol_69_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_69_bmu2_vol_69_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_69_bmu2_vol_69_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_69_bmu2_vol_70_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_69_bmu2_vol_70_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_69_bmu2_vol_70_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_69_bmu2_vol_71_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_69_bmu2_vol_71_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_69_bmu2_vol_71_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_69_bmu2_vol_72_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_69_bmu2_vol_72_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_69_bmu2_vol_72_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_73.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_73_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_73_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_73.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_73_unpack(
    struct tqsy_can_matrix_bmu2_vol_73_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_73_bmu2_vol_73_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_73_bmu2_vol_73_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_73_bmu2_vol_73_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_73_bmu2_vol_74_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_73_bmu2_vol_74_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_73_bmu2_vol_74_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_73_bmu2_vol_75_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_73_bmu2_vol_75_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_73_bmu2_vol_75_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_73_bmu2_vol_76_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_73_bmu2_vol_76_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_73_bmu2_vol_76_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_77.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_77_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_77_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_77.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_77_unpack(
    struct tqsy_can_matrix_bmu2_vol_77_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_77_bmu2_vol_77_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_77_bmu2_vol_77_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_77_bmu2_vol_77_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_77_bmu2_vol_78_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_77_bmu2_vol_78_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_77_bmu2_vol_78_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_77_bmu2_vol_79_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_77_bmu2_vol_79_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_77_bmu2_vol_79_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_77_bmu2_vol_80_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_77_bmu2_vol_80_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_77_bmu2_vol_80_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_81.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_81_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_81_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_81.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_81_unpack(
    struct tqsy_can_matrix_bmu2_vol_81_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_81_bmu2_vol_81_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_81_bmu2_vol_81_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_81_bmu2_vol_81_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_81_bmu2_vol_82_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_81_bmu2_vol_82_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_81_bmu2_vol_82_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_81_bmu2_vol_83_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_81_bmu2_vol_83_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_81_bmu2_vol_83_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_81_bmu2_vol_84_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_81_bmu2_vol_84_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_81_bmu2_vol_84_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_85.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_85_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_85_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_85.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_85_unpack(
    struct tqsy_can_matrix_bmu2_vol_85_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_85_bmu2_vol_85_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_85_bmu2_vol_85_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_85_bmu2_vol_85_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_85_bmu2_vol_86_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_85_bmu2_vol_86_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_85_bmu2_vol_86_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_85_bmu2_vol_87_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_85_bmu2_vol_87_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_85_bmu2_vol_87_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_85_bmu2_vol_88_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_85_bmu2_vol_88_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_85_bmu2_vol_88_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_89.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_89_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_89_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_89.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_89_unpack(
    struct tqsy_can_matrix_bmu2_vol_89_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_89_bmu2_vol_89_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_89_bmu2_vol_89_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_89_bmu2_vol_89_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_89_bmu2_vol_90_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_89_bmu2_vol_90_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_89_bmu2_vol_90_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_89_bmu2_vol_91_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_89_bmu2_vol_91_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_89_bmu2_vol_91_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_89_bmu2_vol_92_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_89_bmu2_vol_92_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_89_bmu2_vol_92_is_in_range(uint16_t value);

/**
 * Pack message BMU2_Vol_93.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_93_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_vol_93_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Vol_93.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_vol_93_unpack(
    struct tqsy_can_matrix_bmu2_vol_93_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_93_bmu2_vol_93_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_93_bmu2_vol_93_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_93_bmu2_vol_93_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_93_bmu2_vol_94_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_93_bmu2_vol_94_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_93_bmu2_vol_94_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_93_bmu2_vol_95_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_93_bmu2_vol_95_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_93_bmu2_vol_95_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu2_vol_93_bmu2_vol_96_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_vol_93_bmu2_vol_96_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_vol_93_bmu2_vol_96_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_1_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_1_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_1_unpack(
    struct tqsy_can_matrix_bmu3_vol_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_1_bmu3_vol_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_1_bmu3_vol_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_1_bmu3_vol_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_1_bmu3_vol_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_1_bmu3_vol_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_1_bmu3_vol_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_1_bmu3_vol_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_1_bmu3_vol_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_1_bmu3_vol_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_1_bmu3_vol_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_1_bmu3_vol_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_1_bmu3_vol_4_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_5_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_5_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_5_unpack(
    struct tqsy_can_matrix_bmu3_vol_5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_5_bmu3_vol_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_5_bmu3_vol_5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_5_bmu3_vol_5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_5_bmu3_vol_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_5_bmu3_vol_6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_5_bmu3_vol_6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_5_bmu3_vol_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_5_bmu3_vol_7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_5_bmu3_vol_7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_5_bmu3_vol_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_5_bmu3_vol_8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_5_bmu3_vol_8_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_9_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_9_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_9_unpack(
    struct tqsy_can_matrix_bmu3_vol_9_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_9_bmu3_vol_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_9_bmu3_vol_9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_9_bmu3_vol_9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_9_bmu3_vol_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_9_bmu3_vol_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_9_bmu3_vol_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_9_bmu3_vol_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_9_bmu3_vol_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_9_bmu3_vol_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_9_bmu3_vol_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_9_bmu3_vol_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_9_bmu3_vol_12_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_13.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_13_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_13_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_13.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_13_unpack(
    struct tqsy_can_matrix_bmu3_vol_13_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_13_bmu3_vol_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_13_bmu3_vol_13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_13_bmu3_vol_13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_13_bmu3_vol_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_13_bmu3_vol_14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_13_bmu3_vol_14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_13_bmu3_vol_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_13_bmu3_vol_15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_13_bmu3_vol_15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_13_bmu3_vol_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_13_bmu3_vol_16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_13_bmu3_vol_16_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_17.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_17_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_17_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_17.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_17_unpack(
    struct tqsy_can_matrix_bmu3_vol_17_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_17_bmu3_vol_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_17_bmu3_vol_17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_17_bmu3_vol_17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_17_bmu3_vol_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_17_bmu3_vol_18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_17_bmu3_vol_18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_17_bmu3_vol_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_17_bmu3_vol_19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_17_bmu3_vol_19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_17_bmu3_vol_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_17_bmu3_vol_20_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_17_bmu3_vol_20_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_21.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_21_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_21_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_21.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_21_unpack(
    struct tqsy_can_matrix_bmu3_vol_21_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_21_bmu3_vol_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_21_bmu3_vol_21_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_21_bmu3_vol_21_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_21_bmu3_vol_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_21_bmu3_vol_22_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_21_bmu3_vol_22_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_21_bmu3_vol_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_21_bmu3_vol_23_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_21_bmu3_vol_23_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_21_bmu3_vol_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_21_bmu3_vol_24_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_21_bmu3_vol_24_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_25.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_25_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_25_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_25.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_25_unpack(
    struct tqsy_can_matrix_bmu3_vol_25_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_25_bmu3_vol_25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_25_bmu3_vol_25_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_25_bmu3_vol_25_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_25_bmu3_vol_26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_25_bmu3_vol_26_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_25_bmu3_vol_26_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_25_bmu3_vol_27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_25_bmu3_vol_27_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_25_bmu3_vol_27_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_25_bmu3_vol_28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_25_bmu3_vol_28_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_25_bmu3_vol_28_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_29.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_29_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_29_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_29.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_29_unpack(
    struct tqsy_can_matrix_bmu3_vol_29_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_29_bmu3_vol_29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_29_bmu3_vol_29_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_29_bmu3_vol_29_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_29_bmu3_vol_30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_29_bmu3_vol_30_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_29_bmu3_vol_30_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_29_bmu3_vol_31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_29_bmu3_vol_31_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_29_bmu3_vol_31_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_29_bmu3_vol_32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_29_bmu3_vol_32_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_29_bmu3_vol_32_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_33.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_33_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_33_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_33.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_33_unpack(
    struct tqsy_can_matrix_bmu3_vol_33_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_33_bmu3_vol_33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_33_bmu3_vol_33_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_33_bmu3_vol_33_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_33_bmu3_vol_34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_33_bmu3_vol_34_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_33_bmu3_vol_34_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_33_bmu3_vol_35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_33_bmu3_vol_35_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_33_bmu3_vol_35_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_33_bmu3_vol_36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_33_bmu3_vol_36_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_33_bmu3_vol_36_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_37.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_37_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_37_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_37.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_37_unpack(
    struct tqsy_can_matrix_bmu3_vol_37_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_37_bmu3_vol_37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_37_bmu3_vol_37_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_37_bmu3_vol_37_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_37_bmu3_vol_38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_37_bmu3_vol_38_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_37_bmu3_vol_38_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_37_bmu3_vol_39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_37_bmu3_vol_39_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_37_bmu3_vol_39_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_37_bmu3_vol_40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_37_bmu3_vol_40_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_37_bmu3_vol_40_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_41.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_41_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_41_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_41.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_41_unpack(
    struct tqsy_can_matrix_bmu3_vol_41_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_41_bmu3_vol_41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_41_bmu3_vol_41_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_41_bmu3_vol_41_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_41_bmu3_vol_42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_41_bmu3_vol_42_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_41_bmu3_vol_42_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_41_bmu3_vol_43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_41_bmu3_vol_43_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_41_bmu3_vol_43_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_41_bmu3_vol_44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_41_bmu3_vol_44_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_41_bmu3_vol_44_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_45.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_45_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_45_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_45.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_45_unpack(
    struct tqsy_can_matrix_bmu3_vol_45_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_45_bmu3_vol_45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_45_bmu3_vol_45_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_45_bmu3_vol_45_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_45_bmu3_vol_46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_45_bmu3_vol_46_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_45_bmu3_vol_46_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_45_bmu3_vol_47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_45_bmu3_vol_47_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_45_bmu3_vol_47_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_45_bmu3_vol_48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_45_bmu3_vol_48_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_45_bmu3_vol_48_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_49.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_49_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_49_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_49.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_49_unpack(
    struct tqsy_can_matrix_bmu3_vol_49_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_49_bmu3_vol_49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_49_bmu3_vol_49_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_49_bmu3_vol_49_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_49_bmu3_vol_50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_49_bmu3_vol_50_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_49_bmu3_vol_50_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_49_bmu3_vol_51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_49_bmu3_vol_51_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_49_bmu3_vol_51_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_49_bmu3_vol_52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_49_bmu3_vol_52_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_49_bmu3_vol_52_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_53.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_53_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_53_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_53.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_53_unpack(
    struct tqsy_can_matrix_bmu3_vol_53_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_53_bmu3_vol_53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_53_bmu3_vol_53_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_53_bmu3_vol_53_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_53_bmu3_vol_54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_53_bmu3_vol_54_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_53_bmu3_vol_54_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_53_bmu3_vol_55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_53_bmu3_vol_55_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_53_bmu3_vol_55_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_53_bmu3_vol_56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_53_bmu3_vol_56_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_53_bmu3_vol_56_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_57.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_57_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_57_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_57.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_57_unpack(
    struct tqsy_can_matrix_bmu3_vol_57_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_57_bmu3_vol_57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_57_bmu3_vol_57_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_57_bmu3_vol_57_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_57_bmu3_vol_58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_57_bmu3_vol_58_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_57_bmu3_vol_58_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_57_bmu3_vol_59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_57_bmu3_vol_59_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_57_bmu3_vol_59_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_57_bmu3_vol_60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_57_bmu3_vol_60_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_57_bmu3_vol_60_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_61.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_61_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_61_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_61.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_61_unpack(
    struct tqsy_can_matrix_bmu3_vol_61_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_61_bmu3_vol_61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_61_bmu3_vol_61_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_61_bmu3_vol_61_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_61_bmu3_vol_62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_61_bmu3_vol_62_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_61_bmu3_vol_62_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_61_bmu3_vol_63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_61_bmu3_vol_63_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_61_bmu3_vol_63_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_61_bmu3_vol_64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_61_bmu3_vol_64_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_61_bmu3_vol_64_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_65.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_65_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_65_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_65.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_65_unpack(
    struct tqsy_can_matrix_bmu3_vol_65_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_65_bmu3_vol_65_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_65_bmu3_vol_65_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_65_bmu3_vol_65_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_65_bmu3_vol_66_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_65_bmu3_vol_66_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_65_bmu3_vol_66_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_65_bmu3_vol_67_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_65_bmu3_vol_67_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_65_bmu3_vol_67_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_65_bmu3_vol_68_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_65_bmu3_vol_68_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_65_bmu3_vol_68_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_69.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_69_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_69_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_69.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_69_unpack(
    struct tqsy_can_matrix_bmu3_vol_69_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_69_bmu3_vol_69_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_69_bmu3_vol_69_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_69_bmu3_vol_69_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_69_bmu3_vol_70_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_69_bmu3_vol_70_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_69_bmu3_vol_70_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_69_bmu3_vol_71_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_69_bmu3_vol_71_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_69_bmu3_vol_71_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_69_bmu3_vol_72_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_69_bmu3_vol_72_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_69_bmu3_vol_72_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_73.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_73_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_73_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_73.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_73_unpack(
    struct tqsy_can_matrix_bmu3_vol_73_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_73_bmu3_vol_73_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_73_bmu3_vol_73_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_73_bmu3_vol_73_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_73_bmu3_vol_74_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_73_bmu3_vol_74_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_73_bmu3_vol_74_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_73_bmu3_vol_75_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_73_bmu3_vol_75_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_73_bmu3_vol_75_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_73_bmu3_vol_76_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_73_bmu3_vol_76_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_73_bmu3_vol_76_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_77.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_77_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_77_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_77.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_77_unpack(
    struct tqsy_can_matrix_bmu3_vol_77_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_77_bmu3_vol_77_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_77_bmu3_vol_77_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_77_bmu3_vol_77_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_77_bmu3_vol_78_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_77_bmu3_vol_78_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_77_bmu3_vol_78_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_77_bmu3_vol_79_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_77_bmu3_vol_79_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_77_bmu3_vol_79_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_77_bmu3_vol_80_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_77_bmu3_vol_80_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_77_bmu3_vol_80_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_81.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_81_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_81_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_81.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_81_unpack(
    struct tqsy_can_matrix_bmu3_vol_81_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_81_bmu3_vol_81_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_81_bmu3_vol_81_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_81_bmu3_vol_81_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_81_bmu3_vol_82_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_81_bmu3_vol_82_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_81_bmu3_vol_82_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_81_bmu3_vol_83_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_81_bmu3_vol_83_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_81_bmu3_vol_83_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_81_bmu3_vol_84_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_81_bmu3_vol_84_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_81_bmu3_vol_84_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_85.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_85_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_85_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_85.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_85_unpack(
    struct tqsy_can_matrix_bmu3_vol_85_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_85_bmu3_vol_85_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_85_bmu3_vol_85_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_85_bmu3_vol_85_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_85_bmu3_vol_86_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_85_bmu3_vol_86_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_85_bmu3_vol_86_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_85_bmu3_vol_87_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_85_bmu3_vol_87_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_85_bmu3_vol_87_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_85_bmu3_vol_88_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_85_bmu3_vol_88_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_85_bmu3_vol_88_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_89.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_89_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_89_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_89.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_89_unpack(
    struct tqsy_can_matrix_bmu3_vol_89_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_89_bmu3_vol_89_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_89_bmu3_vol_89_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_89_bmu3_vol_89_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_89_bmu3_vol_90_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_89_bmu3_vol_90_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_89_bmu3_vol_90_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_89_bmu3_vol_91_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_89_bmu3_vol_91_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_89_bmu3_vol_91_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_89_bmu3_vol_92_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_89_bmu3_vol_92_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_89_bmu3_vol_92_is_in_range(uint16_t value);

/**
 * Pack message BMU3_Vol_93.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_93_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_vol_93_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Vol_93.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_vol_93_unpack(
    struct tqsy_can_matrix_bmu3_vol_93_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_93_bmu3_vol_93_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_93_bmu3_vol_93_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_93_bmu3_vol_93_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_93_bmu3_vol_94_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_93_bmu3_vol_94_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_93_bmu3_vol_94_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_93_bmu3_vol_95_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_93_bmu3_vol_95_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_93_bmu3_vol_95_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu3_vol_93_bmu3_vol_96_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_vol_93_bmu3_vol_96_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_vol_93_bmu3_vol_96_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_1_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_1_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_1_unpack(
    struct tqsy_can_matrix_bmu4_vol_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_1_bmu4_vol_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_1_bmu4_vol_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_1_bmu4_vol_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_1_bmu4_vol_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_1_bmu4_vol_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_1_bmu4_vol_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_1_bmu4_vol_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_1_bmu4_vol_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_1_bmu4_vol_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_1_bmu4_vol_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_1_bmu4_vol_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_1_bmu4_vol_4_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_5_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_5_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_5_unpack(
    struct tqsy_can_matrix_bmu4_vol_5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_5_bmu4_vol_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_5_bmu4_vol_5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_5_bmu4_vol_5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_5_bmu4_vol_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_5_bmu4_vol_6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_5_bmu4_vol_6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_5_bmu4_vol_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_5_bmu4_vol_7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_5_bmu4_vol_7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_5_bmu4_vol_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_5_bmu4_vol_8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_5_bmu4_vol_8_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_9_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_9_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_9_unpack(
    struct tqsy_can_matrix_bmu4_vol_9_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_9_bmu4_vol_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_9_bmu4_vol_9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_9_bmu4_vol_9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_9_bmu4_vol_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_9_bmu4_vol_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_9_bmu4_vol_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_9_bmu4_vol_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_9_bmu4_vol_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_9_bmu4_vol_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_9_bmu4_vol_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_9_bmu4_vol_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_9_bmu4_vol_12_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_13.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_13_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_13_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_13.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_13_unpack(
    struct tqsy_can_matrix_bmu4_vol_13_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_13_bmu4_vol_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_13_bmu4_vol_13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_13_bmu4_vol_13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_13_bmu4_vol_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_13_bmu4_vol_14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_13_bmu4_vol_14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_13_bmu4_vol_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_13_bmu4_vol_15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_13_bmu4_vol_15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_13_bmu4_vol_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_13_bmu4_vol_16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_13_bmu4_vol_16_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_17.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_17_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_17_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_17.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_17_unpack(
    struct tqsy_can_matrix_bmu4_vol_17_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_17_bmu4_vol_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_17_bmu4_vol_17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_17_bmu4_vol_17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_17_bmu4_vol_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_17_bmu4_vol_18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_17_bmu4_vol_18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_17_bmu4_vol_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_17_bmu4_vol_19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_17_bmu4_vol_19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_17_bmu4_vol_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_17_bmu4_vol_20_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_17_bmu4_vol_20_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_21.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_21_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_21_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_21.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_21_unpack(
    struct tqsy_can_matrix_bmu4_vol_21_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_21_bmu4_vol_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_21_bmu4_vol_21_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_21_bmu4_vol_21_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_21_bmu4_vol_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_21_bmu4_vol_22_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_21_bmu4_vol_22_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_21_bmu4_vol_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_21_bmu4_vol_23_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_21_bmu4_vol_23_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_21_bmu4_vol_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_21_bmu4_vol_24_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_21_bmu4_vol_24_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_25.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_25_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_25_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_25.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_25_unpack(
    struct tqsy_can_matrix_bmu4_vol_25_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_25_bmu4_vol_25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_25_bmu4_vol_25_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_25_bmu4_vol_25_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_25_bmu4_vol_26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_25_bmu4_vol_26_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_25_bmu4_vol_26_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_25_bmu4_vol_27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_25_bmu4_vol_27_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_25_bmu4_vol_27_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_25_bmu4_vol_28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_25_bmu4_vol_28_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_25_bmu4_vol_28_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_29.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_29_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_29_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_29.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_29_unpack(
    struct tqsy_can_matrix_bmu4_vol_29_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_29_bmu4_vol_29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_29_bmu4_vol_29_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_29_bmu4_vol_29_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_29_bmu4_vol_30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_29_bmu4_vol_30_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_29_bmu4_vol_30_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_29_bmu4_vol_31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_29_bmu4_vol_31_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_29_bmu4_vol_31_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_29_bmu4_vol_32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_29_bmu4_vol_32_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_29_bmu4_vol_32_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_33.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_33_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_33_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_33.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_33_unpack(
    struct tqsy_can_matrix_bmu4_vol_33_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_33_bmu4_vol_33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_33_bmu4_vol_33_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_33_bmu4_vol_33_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_33_bmu4_vol_34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_33_bmu4_vol_34_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_33_bmu4_vol_34_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_33_bmu4_vol_35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_33_bmu4_vol_35_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_33_bmu4_vol_35_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_33_bmu4_vol_36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_33_bmu4_vol_36_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_33_bmu4_vol_36_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_37.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_37_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_37_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_37.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_37_unpack(
    struct tqsy_can_matrix_bmu4_vol_37_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_37_bmu4_vol_37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_37_bmu4_vol_37_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_37_bmu4_vol_37_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_37_bmu4_vol_38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_37_bmu4_vol_38_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_37_bmu4_vol_38_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_37_bmu4_vol_39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_37_bmu4_vol_39_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_37_bmu4_vol_39_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_37_bmu4_vol_40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_37_bmu4_vol_40_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_37_bmu4_vol_40_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_41.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_41_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_41_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_41.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_41_unpack(
    struct tqsy_can_matrix_bmu4_vol_41_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_41_bmu4_vol_41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_41_bmu4_vol_41_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_41_bmu4_vol_41_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_41_bmu4_vol_42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_41_bmu4_vol_42_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_41_bmu4_vol_42_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_41_bmu4_vol_43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_41_bmu4_vol_43_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_41_bmu4_vol_43_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_41_bmu4_vol_44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_41_bmu4_vol_44_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_41_bmu4_vol_44_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_45.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_45_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_45_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_45.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_45_unpack(
    struct tqsy_can_matrix_bmu4_vol_45_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_45_bmu4_vol_45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_45_bmu4_vol_45_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_45_bmu4_vol_45_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_45_bmu4_vol_46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_45_bmu4_vol_46_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_45_bmu4_vol_46_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_45_bmu4_vol_47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_45_bmu4_vol_47_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_45_bmu4_vol_47_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_45_bmu4_vol_48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_45_bmu4_vol_48_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_45_bmu4_vol_48_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_49.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_49_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_49_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_49.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_49_unpack(
    struct tqsy_can_matrix_bmu4_vol_49_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_49_bmu4_vol_49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_49_bmu4_vol_49_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_49_bmu4_vol_49_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_49_bmu4_vol_50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_49_bmu4_vol_50_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_49_bmu4_vol_50_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_49_bmu4_vol_51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_49_bmu4_vol_51_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_49_bmu4_vol_51_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_49_bmu4_vol_52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_49_bmu4_vol_52_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_49_bmu4_vol_52_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_53.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_53_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_53_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_53.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_53_unpack(
    struct tqsy_can_matrix_bmu4_vol_53_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_53_bmu4_vol_53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_53_bmu4_vol_53_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_53_bmu4_vol_53_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_53_bmu4_vol_54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_53_bmu4_vol_54_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_53_bmu4_vol_54_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_53_bmu4_vol_55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_53_bmu4_vol_55_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_53_bmu4_vol_55_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_53_bmu4_vol_56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_53_bmu4_vol_56_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_53_bmu4_vol_56_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_57.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_57_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_57_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_57.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_57_unpack(
    struct tqsy_can_matrix_bmu4_vol_57_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_57_bmu4_vol_57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_57_bmu4_vol_57_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_57_bmu4_vol_57_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_57_bmu4_vol_58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_57_bmu4_vol_58_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_57_bmu4_vol_58_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_57_bmu4_vol_59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_57_bmu4_vol_59_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_57_bmu4_vol_59_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_57_bmu4_vol_60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_57_bmu4_vol_60_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_57_bmu4_vol_60_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_61.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_61_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_61_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_61.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_61_unpack(
    struct tqsy_can_matrix_bmu4_vol_61_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_61_bmu4_vol_61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_61_bmu4_vol_61_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_61_bmu4_vol_61_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_61_bmu4_vol_62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_61_bmu4_vol_62_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_61_bmu4_vol_62_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_61_bmu4_vol_63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_61_bmu4_vol_63_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_61_bmu4_vol_63_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_61_bmu4_vol_64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_61_bmu4_vol_64_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_61_bmu4_vol_64_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_65.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_65_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_65_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_65.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_65_unpack(
    struct tqsy_can_matrix_bmu4_vol_65_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_65_bmu4_vol_65_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_65_bmu4_vol_65_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_65_bmu4_vol_65_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_65_bmu4_vol_66_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_65_bmu4_vol_66_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_65_bmu4_vol_66_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_65_bmu4_vol_67_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_65_bmu4_vol_67_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_65_bmu4_vol_67_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_65_bmu4_vol_68_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_65_bmu4_vol_68_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_65_bmu4_vol_68_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_69.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_69_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_69_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_69.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_69_unpack(
    struct tqsy_can_matrix_bmu4_vol_69_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_69_bmu4_vol_69_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_69_bmu4_vol_69_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_69_bmu4_vol_69_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_69_bmu4_vol_70_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_69_bmu4_vol_70_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_69_bmu4_vol_70_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_69_bmu4_vol_71_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_69_bmu4_vol_71_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_69_bmu4_vol_71_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_69_bmu4_vol_72_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_69_bmu4_vol_72_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_69_bmu4_vol_72_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_73.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_73_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_73_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_73.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_73_unpack(
    struct tqsy_can_matrix_bmu4_vol_73_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_73_bmu4_vol_73_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_73_bmu4_vol_73_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_73_bmu4_vol_73_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_73_bmu4_vol_74_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_73_bmu4_vol_74_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_73_bmu4_vol_74_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_73_bmu4_vol_75_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_73_bmu4_vol_75_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_73_bmu4_vol_75_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_73_bmu4_vol_76_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_73_bmu4_vol_76_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_73_bmu4_vol_76_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_77.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_77_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_77_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_77.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_77_unpack(
    struct tqsy_can_matrix_bmu4_vol_77_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_77_bmu4_vol_77_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_77_bmu4_vol_77_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_77_bmu4_vol_77_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_77_bmu4_vol_78_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_77_bmu4_vol_78_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_77_bmu4_vol_78_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_77_bmu4_vol_79_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_77_bmu4_vol_79_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_77_bmu4_vol_79_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_77_bmu4_vol_80_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_77_bmu4_vol_80_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_77_bmu4_vol_80_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_81.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_81_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_81_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_81.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_81_unpack(
    struct tqsy_can_matrix_bmu4_vol_81_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_81_bmu4_vol_81_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_81_bmu4_vol_81_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_81_bmu4_vol_81_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_81_bmu4_vol_82_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_81_bmu4_vol_82_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_81_bmu4_vol_82_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_81_bmu4_vol_83_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_81_bmu4_vol_83_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_81_bmu4_vol_83_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_81_bmu4_vol_84_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_81_bmu4_vol_84_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_81_bmu4_vol_84_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_85.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_85_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_85_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_85.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_85_unpack(
    struct tqsy_can_matrix_bmu4_vol_85_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_85_bmu4_vol_85_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_85_bmu4_vol_85_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_85_bmu4_vol_85_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_85_bmu4_vol_86_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_85_bmu4_vol_86_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_85_bmu4_vol_86_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_85_bmu4_vol_87_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_85_bmu4_vol_87_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_85_bmu4_vol_87_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_85_bmu4_vol_88_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_85_bmu4_vol_88_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_85_bmu4_vol_88_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_89.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_89_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_89_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_89.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_89_unpack(
    struct tqsy_can_matrix_bmu4_vol_89_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_89_bmu4_vol_89_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_89_bmu4_vol_89_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_89_bmu4_vol_89_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_89_bmu4_vol_90_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_89_bmu4_vol_90_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_89_bmu4_vol_90_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_89_bmu4_vol_91_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_89_bmu4_vol_91_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_89_bmu4_vol_91_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_89_bmu4_vol_92_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_89_bmu4_vol_92_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_89_bmu4_vol_92_is_in_range(uint16_t value);

/**
 * Pack message BMU4_Vol_93.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_93_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_vol_93_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Vol_93.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_vol_93_unpack(
    struct tqsy_can_matrix_bmu4_vol_93_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_93_bmu4_vol_93_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_93_bmu4_vol_93_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_93_bmu4_vol_93_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_93_bmu4_vol_94_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_93_bmu4_vol_94_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_93_bmu4_vol_94_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_93_bmu4_vol_95_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_93_bmu4_vol_95_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_93_bmu4_vol_95_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu4_vol_93_bmu4_vol_96_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_vol_93_bmu4_vol_96_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_vol_93_bmu4_vol_96_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_1_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_1_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_1_unpack(
    struct tqsy_can_matrix_bmu5_vol_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_1_bmu5_vol_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_1_bmu5_vol_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_1_bmu5_vol_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_1_bmu5_vol_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_1_bmu5_vol_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_1_bmu5_vol_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_1_bmu5_vol_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_1_bmu5_vol_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_1_bmu5_vol_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_1_bmu5_vol_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_1_bmu5_vol_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_1_bmu5_vol_4_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_5_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_5_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_5_unpack(
    struct tqsy_can_matrix_bmu5_vol_5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_5_bmu5_vol_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_5_bmu5_vol_5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_5_bmu5_vol_5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_5_bmu5_vol_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_5_bmu5_vol_6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_5_bmu5_vol_6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_5_bmu5_vol_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_5_bmu5_vol_7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_5_bmu5_vol_7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_5_bmu5_vol_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_5_bmu5_vol_8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_5_bmu5_vol_8_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_9_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_9_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_9_unpack(
    struct tqsy_can_matrix_bmu5_vol_9_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_9_bmu5_vol_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_9_bmu5_vol_9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_9_bmu5_vol_9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_9_bmu5_vol_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_9_bmu5_vol_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_9_bmu5_vol_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_9_bmu5_vol_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_9_bmu5_vol_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_9_bmu5_vol_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_9_bmu5_vol_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_9_bmu5_vol_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_9_bmu5_vol_12_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_13.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_13_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_13_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_13.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_13_unpack(
    struct tqsy_can_matrix_bmu5_vol_13_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_13_bmu5_vol_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_13_bmu5_vol_13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_13_bmu5_vol_13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_13_bmu5_vol_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_13_bmu5_vol_14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_13_bmu5_vol_14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_13_bmu5_vol_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_13_bmu5_vol_15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_13_bmu5_vol_15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_13_bmu5_vol_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_13_bmu5_vol_16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_13_bmu5_vol_16_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_17.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_17_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_17_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_17.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_17_unpack(
    struct tqsy_can_matrix_bmu5_vol_17_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_17_bmu5_vol_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_17_bmu5_vol_17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_17_bmu5_vol_17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_17_bmu5_vol_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_17_bmu5_vol_18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_17_bmu5_vol_18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_17_bmu5_vol_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_17_bmu5_vol_19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_17_bmu5_vol_19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_17_bmu5_vol_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_17_bmu5_vol_20_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_17_bmu5_vol_20_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_21.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_21_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_21_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_21.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_21_unpack(
    struct tqsy_can_matrix_bmu5_vol_21_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_21_bmu5_vol_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_21_bmu5_vol_21_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_21_bmu5_vol_21_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_21_bmu5_vol_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_21_bmu5_vol_22_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_21_bmu5_vol_22_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_21_bmu5_vol_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_21_bmu5_vol_23_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_21_bmu5_vol_23_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_21_bmu5_vol_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_21_bmu5_vol_24_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_21_bmu5_vol_24_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_25.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_25_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_25_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_25.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_25_unpack(
    struct tqsy_can_matrix_bmu5_vol_25_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_25_bmu5_vol_25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_25_bmu5_vol_25_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_25_bmu5_vol_25_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_25_bmu5_vol_26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_25_bmu5_vol_26_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_25_bmu5_vol_26_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_25_bmu5_vol_27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_25_bmu5_vol_27_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_25_bmu5_vol_27_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_25_bmu5_vol_28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_25_bmu5_vol_28_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_25_bmu5_vol_28_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_29.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_29_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_29_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_29.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_29_unpack(
    struct tqsy_can_matrix_bmu5_vol_29_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_29_bmu5_vol_29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_29_bmu5_vol_29_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_29_bmu5_vol_29_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_29_bmu5_vol_30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_29_bmu5_vol_30_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_29_bmu5_vol_30_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_29_bmu5_vol_31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_29_bmu5_vol_31_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_29_bmu5_vol_31_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_29_bmu5_vol_32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_29_bmu5_vol_32_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_29_bmu5_vol_32_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_33.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_33_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_33_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_33.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_33_unpack(
    struct tqsy_can_matrix_bmu5_vol_33_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_33_bmu5_vol_33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_33_bmu5_vol_33_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_33_bmu5_vol_33_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_33_bmu5_vol_34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_33_bmu5_vol_34_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_33_bmu5_vol_34_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_33_bmu5_vol_35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_33_bmu5_vol_35_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_33_bmu5_vol_35_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_33_bmu5_vol_36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_33_bmu5_vol_36_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_33_bmu5_vol_36_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_37.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_37_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_37_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_37.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_37_unpack(
    struct tqsy_can_matrix_bmu5_vol_37_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_37_bmu5_vol_37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_37_bmu5_vol_37_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_37_bmu5_vol_37_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_37_bmu5_vol_38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_37_bmu5_vol_38_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_37_bmu5_vol_38_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_37_bmu5_vol_39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_37_bmu5_vol_39_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_37_bmu5_vol_39_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_37_bmu5_vol_40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_37_bmu5_vol_40_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_37_bmu5_vol_40_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_41.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_41_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_41_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_41.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_41_unpack(
    struct tqsy_can_matrix_bmu5_vol_41_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_41_bmu5_vol_41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_41_bmu5_vol_41_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_41_bmu5_vol_41_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_41_bmu5_vol_42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_41_bmu5_vol_42_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_41_bmu5_vol_42_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_41_bmu5_vol_43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_41_bmu5_vol_43_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_41_bmu5_vol_43_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_41_bmu5_vol_44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_41_bmu5_vol_44_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_41_bmu5_vol_44_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_45.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_45_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_45_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_45.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_45_unpack(
    struct tqsy_can_matrix_bmu5_vol_45_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_45_bmu5_vol_45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_45_bmu5_vol_45_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_45_bmu5_vol_45_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_45_bmu5_vol_46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_45_bmu5_vol_46_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_45_bmu5_vol_46_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_45_bmu5_vol_47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_45_bmu5_vol_47_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_45_bmu5_vol_47_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_45_bmu5_vol_48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_45_bmu5_vol_48_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_45_bmu5_vol_48_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_49.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_49_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_49_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_49.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_49_unpack(
    struct tqsy_can_matrix_bmu5_vol_49_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_49_bmu5_vol_49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_49_bmu5_vol_49_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_49_bmu5_vol_49_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_49_bmu5_vol_50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_49_bmu5_vol_50_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_49_bmu5_vol_50_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_49_bmu5_vol_51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_49_bmu5_vol_51_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_49_bmu5_vol_51_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_49_bmu5_vol_52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_49_bmu5_vol_52_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_49_bmu5_vol_52_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_53.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_53_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_53_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_53.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_53_unpack(
    struct tqsy_can_matrix_bmu5_vol_53_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_53_bmu5_vol_53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_53_bmu5_vol_53_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_53_bmu5_vol_53_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_53_bmu5_vol_54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_53_bmu5_vol_54_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_53_bmu5_vol_54_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_53_bmu5_vol_55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_53_bmu5_vol_55_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_53_bmu5_vol_55_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_53_bmu5_vol_56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_53_bmu5_vol_56_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_53_bmu5_vol_56_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_57.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_57_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_57_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_57.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_57_unpack(
    struct tqsy_can_matrix_bmu5_vol_57_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_57_bmu5_vol_57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_57_bmu5_vol_57_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_57_bmu5_vol_57_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_57_bmu5_vol_58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_57_bmu5_vol_58_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_57_bmu5_vol_58_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_57_bmu5_vol_59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_57_bmu5_vol_59_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_57_bmu5_vol_59_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_57_bmu5_vol_60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_57_bmu5_vol_60_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_57_bmu5_vol_60_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_61.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_61_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_61_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_61.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_61_unpack(
    struct tqsy_can_matrix_bmu5_vol_61_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_61_bmu5_vol_61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_61_bmu5_vol_61_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_61_bmu5_vol_61_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_61_bmu5_vol_62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_61_bmu5_vol_62_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_61_bmu5_vol_62_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_61_bmu5_vol_63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_61_bmu5_vol_63_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_61_bmu5_vol_63_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_61_bmu5_vol_64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_61_bmu5_vol_64_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_61_bmu5_vol_64_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_65.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_65_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_65_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_65.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_65_unpack(
    struct tqsy_can_matrix_bmu5_vol_65_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_65_bmu5_vol_65_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_65_bmu5_vol_65_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_65_bmu5_vol_65_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_65_bmu5_vol_66_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_65_bmu5_vol_66_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_65_bmu5_vol_66_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_65_bmu5_vol_67_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_65_bmu5_vol_67_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_65_bmu5_vol_67_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_65_bmu5_vol_68_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_65_bmu5_vol_68_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_65_bmu5_vol_68_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_69.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_69_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_69_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_69.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_69_unpack(
    struct tqsy_can_matrix_bmu5_vol_69_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_69_bmu5_vol_69_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_69_bmu5_vol_69_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_69_bmu5_vol_69_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_69_bmu5_vol_70_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_69_bmu5_vol_70_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_69_bmu5_vol_70_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_69_bmu5_vol_71_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_69_bmu5_vol_71_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_69_bmu5_vol_71_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_69_bmu5_vol_72_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_69_bmu5_vol_72_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_69_bmu5_vol_72_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_73.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_73_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_73_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_73.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_73_unpack(
    struct tqsy_can_matrix_bmu5_vol_73_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_73_bmu5_vol_73_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_73_bmu5_vol_73_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_73_bmu5_vol_73_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_73_bmu5_vol_74_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_73_bmu5_vol_74_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_73_bmu5_vol_74_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_73_bmu5_vol_75_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_73_bmu5_vol_75_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_73_bmu5_vol_75_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_73_bmu5_vol_76_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_73_bmu5_vol_76_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_73_bmu5_vol_76_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_77.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_77_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_77_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_77.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_77_unpack(
    struct tqsy_can_matrix_bmu5_vol_77_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_77_bmu5_vol_77_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_77_bmu5_vol_77_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_77_bmu5_vol_77_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_77_bmu5_vol_78_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_77_bmu5_vol_78_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_77_bmu5_vol_78_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_77_bmu5_vol_79_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_77_bmu5_vol_79_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_77_bmu5_vol_79_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_77_bmu5_vol_80_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_77_bmu5_vol_80_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_77_bmu5_vol_80_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_81.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_81_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_81_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_81.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_81_unpack(
    struct tqsy_can_matrix_bmu5_vol_81_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_81_bmu5_vol_81_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_81_bmu5_vol_81_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_81_bmu5_vol_81_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_81_bmu5_vol_82_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_81_bmu5_vol_82_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_81_bmu5_vol_82_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_81_bmu5_vol_83_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_81_bmu5_vol_83_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_81_bmu5_vol_83_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_81_bmu5_vol_84_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_81_bmu5_vol_84_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_81_bmu5_vol_84_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_85.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_85_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_85_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_85.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_85_unpack(
    struct tqsy_can_matrix_bmu5_vol_85_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_85_bmu5_vol_85_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_85_bmu5_vol_85_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_85_bmu5_vol_85_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_85_bmu5_vol_86_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_85_bmu5_vol_86_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_85_bmu5_vol_86_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_85_bmu5_vol_87_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_85_bmu5_vol_87_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_85_bmu5_vol_87_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_85_bmu5_vol_88_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_85_bmu5_vol_88_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_85_bmu5_vol_88_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_89.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_89_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_89_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_89.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_89_unpack(
    struct tqsy_can_matrix_bmu5_vol_89_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_89_bmu5_vol_89_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_89_bmu5_vol_89_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_89_bmu5_vol_89_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_89_bmu5_vol_90_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_89_bmu5_vol_90_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_89_bmu5_vol_90_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_89_bmu5_vol_91_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_89_bmu5_vol_91_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_89_bmu5_vol_91_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_89_bmu5_vol_92_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_89_bmu5_vol_92_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_89_bmu5_vol_92_is_in_range(uint16_t value);

/**
 * Pack message BMU5_Vol_93.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_93_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_vol_93_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Vol_93.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_vol_93_unpack(
    struct tqsy_can_matrix_bmu5_vol_93_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_93_bmu5_vol_93_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_93_bmu5_vol_93_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_93_bmu5_vol_93_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_93_bmu5_vol_94_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_93_bmu5_vol_94_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_93_bmu5_vol_94_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_93_bmu5_vol_95_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_93_bmu5_vol_95_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_93_bmu5_vol_95_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu5_vol_93_bmu5_vol_96_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_vol_93_bmu5_vol_96_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_vol_93_bmu5_vol_96_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_1_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_1_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_1_unpack(
    struct tqsy_can_matrix_bmu6_vol_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_1_bmu6_vol_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_1_bmu6_vol_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_1_bmu6_vol_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_1_bmu6_vol_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_1_bmu6_vol_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_1_bmu6_vol_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_1_bmu6_vol_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_1_bmu6_vol_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_1_bmu6_vol_3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_1_bmu6_vol_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_1_bmu6_vol_4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_1_bmu6_vol_4_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_5_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_5_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_5_unpack(
    struct tqsy_can_matrix_bmu6_vol_5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_5_bmu6_vol_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_5_bmu6_vol_5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_5_bmu6_vol_5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_5_bmu6_vol_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_5_bmu6_vol_6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_5_bmu6_vol_6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_5_bmu6_vol_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_5_bmu6_vol_7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_5_bmu6_vol_7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_5_bmu6_vol_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_5_bmu6_vol_8_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_5_bmu6_vol_8_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_9_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_9_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_9_unpack(
    struct tqsy_can_matrix_bmu6_vol_9_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_9_bmu6_vol_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_9_bmu6_vol_9_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_9_bmu6_vol_9_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_9_bmu6_vol_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_9_bmu6_vol_10_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_9_bmu6_vol_10_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_9_bmu6_vol_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_9_bmu6_vol_11_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_9_bmu6_vol_11_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_9_bmu6_vol_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_9_bmu6_vol_12_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_9_bmu6_vol_12_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_13.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_13_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_13_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_13.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_13_unpack(
    struct tqsy_can_matrix_bmu6_vol_13_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_13_bmu6_vol_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_13_bmu6_vol_13_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_13_bmu6_vol_13_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_13_bmu6_vol_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_13_bmu6_vol_14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_13_bmu6_vol_14_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_13_bmu6_vol_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_13_bmu6_vol_15_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_13_bmu6_vol_15_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_13_bmu6_vol_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_13_bmu6_vol_16_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_13_bmu6_vol_16_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_17.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_17_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_17_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_17.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_17_unpack(
    struct tqsy_can_matrix_bmu6_vol_17_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_17_bmu6_vol_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_17_bmu6_vol_17_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_17_bmu6_vol_17_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_17_bmu6_vol_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_17_bmu6_vol_18_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_17_bmu6_vol_18_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_17_bmu6_vol_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_17_bmu6_vol_19_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_17_bmu6_vol_19_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_17_bmu6_vol_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_17_bmu6_vol_20_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_17_bmu6_vol_20_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_21.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_21_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_21_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_21.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_21_unpack(
    struct tqsy_can_matrix_bmu6_vol_21_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_21_bmu6_vol_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_21_bmu6_vol_21_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_21_bmu6_vol_21_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_21_bmu6_vol_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_21_bmu6_vol_22_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_21_bmu6_vol_22_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_21_bmu6_vol_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_21_bmu6_vol_23_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_21_bmu6_vol_23_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_21_bmu6_vol_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_21_bmu6_vol_24_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_21_bmu6_vol_24_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_25.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_25_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_25_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_25.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_25_unpack(
    struct tqsy_can_matrix_bmu6_vol_25_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_25_bmu6_vol_25_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_25_bmu6_vol_25_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_25_bmu6_vol_25_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_25_bmu6_vol_26_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_25_bmu6_vol_26_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_25_bmu6_vol_26_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_25_bmu6_vol_27_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_25_bmu6_vol_27_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_25_bmu6_vol_27_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_25_bmu6_vol_28_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_25_bmu6_vol_28_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_25_bmu6_vol_28_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_29.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_29_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_29_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_29.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_29_unpack(
    struct tqsy_can_matrix_bmu6_vol_29_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_29_bmu6_vol_29_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_29_bmu6_vol_29_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_29_bmu6_vol_29_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_29_bmu6_vol_30_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_29_bmu6_vol_30_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_29_bmu6_vol_30_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_29_bmu6_vol_31_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_29_bmu6_vol_31_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_29_bmu6_vol_31_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_29_bmu6_vol_32_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_29_bmu6_vol_32_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_29_bmu6_vol_32_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_33.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_33_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_33_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_33.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_33_unpack(
    struct tqsy_can_matrix_bmu6_vol_33_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_33_bmu6_vol_33_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_33_bmu6_vol_33_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_33_bmu6_vol_33_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_33_bmu6_vol_34_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_33_bmu6_vol_34_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_33_bmu6_vol_34_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_33_bmu6_vol_35_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_33_bmu6_vol_35_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_33_bmu6_vol_35_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_33_bmu6_vol_36_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_33_bmu6_vol_36_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_33_bmu6_vol_36_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_37.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_37_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_37_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_37.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_37_unpack(
    struct tqsy_can_matrix_bmu6_vol_37_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_37_bmu6_vol_37_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_37_bmu6_vol_37_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_37_bmu6_vol_37_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_37_bmu6_vol_38_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_37_bmu6_vol_38_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_37_bmu6_vol_38_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_37_bmu6_vol_39_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_37_bmu6_vol_39_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_37_bmu6_vol_39_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_37_bmu6_vol_40_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_37_bmu6_vol_40_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_37_bmu6_vol_40_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_41.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_41_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_41_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_41.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_41_unpack(
    struct tqsy_can_matrix_bmu6_vol_41_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_41_bmu6_vol_41_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_41_bmu6_vol_41_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_41_bmu6_vol_41_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_41_bmu6_vol_42_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_41_bmu6_vol_42_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_41_bmu6_vol_42_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_41_bmu6_vol_43_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_41_bmu6_vol_43_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_41_bmu6_vol_43_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_41_bmu6_vol_44_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_41_bmu6_vol_44_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_41_bmu6_vol_44_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_45.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_45_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_45_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_45.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_45_unpack(
    struct tqsy_can_matrix_bmu6_vol_45_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_45_bmu6_vol_45_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_45_bmu6_vol_45_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_45_bmu6_vol_45_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_45_bmu6_vol_46_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_45_bmu6_vol_46_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_45_bmu6_vol_46_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_45_bmu6_vol_47_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_45_bmu6_vol_47_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_45_bmu6_vol_47_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_45_bmu6_vol_48_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_45_bmu6_vol_48_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_45_bmu6_vol_48_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_49.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_49_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_49_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_49.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_49_unpack(
    struct tqsy_can_matrix_bmu6_vol_49_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_49_bmu6_vol_49_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_49_bmu6_vol_49_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_49_bmu6_vol_49_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_49_bmu6_vol_50_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_49_bmu6_vol_50_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_49_bmu6_vol_50_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_49_bmu6_vol_51_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_49_bmu6_vol_51_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_49_bmu6_vol_51_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_49_bmu6_vol_52_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_49_bmu6_vol_52_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_49_bmu6_vol_52_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_53.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_53_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_53_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_53.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_53_unpack(
    struct tqsy_can_matrix_bmu6_vol_53_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_53_bmu6_vol_53_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_53_bmu6_vol_53_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_53_bmu6_vol_53_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_53_bmu6_vol_54_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_53_bmu6_vol_54_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_53_bmu6_vol_54_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_53_bmu6_vol_55_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_53_bmu6_vol_55_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_53_bmu6_vol_55_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_53_bmu6_vol_56_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_53_bmu6_vol_56_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_53_bmu6_vol_56_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_57.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_57_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_57_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_57.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_57_unpack(
    struct tqsy_can_matrix_bmu6_vol_57_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_57_bmu6_vol_57_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_57_bmu6_vol_57_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_57_bmu6_vol_57_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_57_bmu6_vol_58_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_57_bmu6_vol_58_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_57_bmu6_vol_58_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_57_bmu6_vol_59_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_57_bmu6_vol_59_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_57_bmu6_vol_59_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_57_bmu6_vol_60_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_57_bmu6_vol_60_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_57_bmu6_vol_60_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_61.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_61_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_61_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_61.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_61_unpack(
    struct tqsy_can_matrix_bmu6_vol_61_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_61_bmu6_vol_61_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_61_bmu6_vol_61_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_61_bmu6_vol_61_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_61_bmu6_vol_62_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_61_bmu6_vol_62_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_61_bmu6_vol_62_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_61_bmu6_vol_63_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_61_bmu6_vol_63_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_61_bmu6_vol_63_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_61_bmu6_vol_64_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_61_bmu6_vol_64_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_61_bmu6_vol_64_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_65.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_65_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_65_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_65.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_65_unpack(
    struct tqsy_can_matrix_bmu6_vol_65_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_65_bmu6_vol_65_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_65_bmu6_vol_65_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_65_bmu6_vol_65_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_65_bmu6_vol_66_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_65_bmu6_vol_66_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_65_bmu6_vol_66_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_65_bmu6_vol_67_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_65_bmu6_vol_67_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_65_bmu6_vol_67_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_65_bmu6_vol_68_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_65_bmu6_vol_68_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_65_bmu6_vol_68_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_69.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_69_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_69_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_69.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_69_unpack(
    struct tqsy_can_matrix_bmu6_vol_69_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_69_bmu6_vol_69_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_69_bmu6_vol_69_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_69_bmu6_vol_69_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_69_bmu6_vol_70_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_69_bmu6_vol_70_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_69_bmu6_vol_70_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_69_bmu6_vol_71_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_69_bmu6_vol_71_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_69_bmu6_vol_71_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_69_bmu6_vol_72_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_69_bmu6_vol_72_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_69_bmu6_vol_72_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_73.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_73_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_73_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_73.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_73_unpack(
    struct tqsy_can_matrix_bmu6_vol_73_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_73_bmu6_vol_73_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_73_bmu6_vol_73_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_73_bmu6_vol_73_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_73_bmu6_vol_74_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_73_bmu6_vol_74_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_73_bmu6_vol_74_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_73_bmu6_vol_75_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_73_bmu6_vol_75_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_73_bmu6_vol_75_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_73_bmu6_vol_76_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_73_bmu6_vol_76_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_73_bmu6_vol_76_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_77.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_77_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_77_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_77.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_77_unpack(
    struct tqsy_can_matrix_bmu6_vol_77_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_77_bmu6_vol_77_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_77_bmu6_vol_77_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_77_bmu6_vol_77_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_77_bmu6_vol_78_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_77_bmu6_vol_78_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_77_bmu6_vol_78_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_77_bmu6_vol_79_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_77_bmu6_vol_79_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_77_bmu6_vol_79_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_77_bmu6_vol_80_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_77_bmu6_vol_80_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_77_bmu6_vol_80_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_81.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_81_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_81_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_81.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_81_unpack(
    struct tqsy_can_matrix_bmu6_vol_81_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_81_bmu6_vol_81_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_81_bmu6_vol_81_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_81_bmu6_vol_81_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_81_bmu6_vol_82_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_81_bmu6_vol_82_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_81_bmu6_vol_82_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_81_bmu6_vol_83_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_81_bmu6_vol_83_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_81_bmu6_vol_83_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_81_bmu6_vol_84_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_81_bmu6_vol_84_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_81_bmu6_vol_84_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_85.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_85_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_85_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_85.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_85_unpack(
    struct tqsy_can_matrix_bmu6_vol_85_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_85_bmu6_vol_85_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_85_bmu6_vol_85_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_85_bmu6_vol_85_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_85_bmu6_vol_86_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_85_bmu6_vol_86_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_85_bmu6_vol_86_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_85_bmu6_vol_87_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_85_bmu6_vol_87_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_85_bmu6_vol_87_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_85_bmu6_vol_88_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_85_bmu6_vol_88_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_85_bmu6_vol_88_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_89.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_89_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_89_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_89.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_89_unpack(
    struct tqsy_can_matrix_bmu6_vol_89_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_89_bmu6_vol_89_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_89_bmu6_vol_89_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_89_bmu6_vol_89_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_89_bmu6_vol_90_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_89_bmu6_vol_90_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_89_bmu6_vol_90_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_89_bmu6_vol_91_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_89_bmu6_vol_91_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_89_bmu6_vol_91_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_89_bmu6_vol_92_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_89_bmu6_vol_92_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_89_bmu6_vol_92_is_in_range(uint16_t value);

/**
 * Pack message BMU6_Vol_93.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_93_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_vol_93_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Vol_93.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_vol_93_unpack(
    struct tqsy_can_matrix_bmu6_vol_93_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_93_bmu6_vol_93_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_93_bmu6_vol_93_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_93_bmu6_vol_93_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_93_bmu6_vol_94_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_93_bmu6_vol_94_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_93_bmu6_vol_94_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_93_bmu6_vol_95_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_93_bmu6_vol_95_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_93_bmu6_vol_95_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t tqsy_can_matrix_bmu6_vol_93_bmu6_vol_96_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_vol_93_bmu6_vol_96_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_vol_93_bmu6_vol_96_is_in_range(uint16_t value);

/**
 * Pack message BMU1_Temp_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_temp_1_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_temp_1_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Temp_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_temp_1_unpack(
    struct tqsy_can_matrix_bmu1_temp_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_1_bmu1_temp_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_1_bmu1_temp_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_1_bmu1_temp_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_1_bmu1_temp_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_1_bmu1_temp_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_1_bmu1_temp_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_1_bmu1_temp_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_1_bmu1_temp_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_1_bmu1_temp_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_1_bmu1_temp_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_1_bmu1_temp_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_1_bmu1_temp_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_1_bmu1_temp_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_1_bmu1_temp_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_1_bmu1_temp_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_1_bmu1_temp_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_1_bmu1_temp_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_1_bmu1_temp_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_1_bmu1_temp_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_1_bmu1_temp_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_1_bmu1_temp_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_1_bmu1_temp_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_1_bmu1_temp_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_1_bmu1_temp_8_is_in_range(uint8_t value);

/**
 * Pack message BMU1_Temp_9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_temp_9_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_temp_9_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Temp_9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_temp_9_unpack(
    struct tqsy_can_matrix_bmu1_temp_9_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_9_bmu1_temp_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_9_bmu1_temp_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_9_bmu1_temp_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_9_bmu1_temp_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_9_bmu1_temp_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_9_bmu1_temp_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_9_bmu1_temp_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_9_bmu1_temp_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_9_bmu1_temp_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_9_bmu1_temp_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_9_bmu1_temp_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_9_bmu1_temp_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_9_bmu1_temp_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_9_bmu1_temp_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_9_bmu1_temp_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_9_bmu1_temp_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_9_bmu1_temp_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_9_bmu1_temp_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_9_bmu1_temp_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_9_bmu1_temp_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_9_bmu1_temp_15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_9_bmu1_temp_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_9_bmu1_temp_16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_9_bmu1_temp_16_is_in_range(uint8_t value);

/**
 * Pack message BMU1_Temp_17.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu1_temp_17_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu1_temp_17_t *src_p,
    size_t size);

/**
 * Unpack message BMU1_Temp_17.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu1_temp_17_unpack(
    struct tqsy_can_matrix_bmu1_temp_17_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_17_bmu1_temp_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_17_bmu1_temp_17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_17_bmu1_temp_17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_17_bmu1_temp_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_17_bmu1_temp_18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_17_bmu1_temp_18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_17_bmu1_temp_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_17_bmu1_temp_19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_17_bmu1_temp_19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_17_bmu1_temp_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_17_bmu1_temp_20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_17_bmu1_temp_20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_17_bmu1_temp_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_17_bmu1_temp_21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_17_bmu1_temp_21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_17_bmu1_temp_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_17_bmu1_temp_22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_17_bmu1_temp_22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_17_bmu1_temp_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_17_bmu1_temp_23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_17_bmu1_temp_23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu1_temp_17_bmu1_temp_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu1_temp_17_bmu1_temp_24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu1_temp_17_bmu1_temp_24_is_in_range(uint8_t value);

/**
 * Pack message BMU2_Temp_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_temp_1_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_temp_1_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Temp_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_temp_1_unpack(
    struct tqsy_can_matrix_bmu2_temp_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_1_bmu2_temp_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_1_bmu2_temp_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_1_bmu2_temp_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_1_bmu2_temp_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_1_bmu2_temp_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_1_bmu2_temp_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_1_bmu2_temp_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_1_bmu2_temp_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_1_bmu2_temp_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_1_bmu2_temp_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_1_bmu2_temp_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_1_bmu2_temp_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_1_bmu2_temp_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_1_bmu2_temp_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_1_bmu2_temp_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_1_bmu2_temp_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_1_bmu2_temp_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_1_bmu2_temp_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_1_bmu2_temp_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_1_bmu2_temp_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_1_bmu2_temp_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_1_bmu2_temp_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_1_bmu2_temp_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_1_bmu2_temp_8_is_in_range(uint8_t value);

/**
 * Pack message BMU2_Temp_9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_temp_9_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_temp_9_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Temp_9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_temp_9_unpack(
    struct tqsy_can_matrix_bmu2_temp_9_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_9_bmu2_temp_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_9_bmu2_temp_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_9_bmu2_temp_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_9_bmu2_temp_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_9_bmu2_temp_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_9_bmu2_temp_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_9_bmu2_temp_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_9_bmu2_temp_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_9_bmu2_temp_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_9_bmu2_temp_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_9_bmu2_temp_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_9_bmu2_temp_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_9_bmu2_temp_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_9_bmu2_temp_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_9_bmu2_temp_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_9_bmu2_temp_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_9_bmu2_temp_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_9_bmu2_temp_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_9_bmu2_temp_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_9_bmu2_temp_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_9_bmu2_temp_15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_9_bmu2_temp_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_9_bmu2_temp_16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_9_bmu2_temp_16_is_in_range(uint8_t value);

/**
 * Pack message BMU2_Temp_17.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu2_temp_17_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu2_temp_17_t *src_p,
    size_t size);

/**
 * Unpack message BMU2_Temp_17.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu2_temp_17_unpack(
    struct tqsy_can_matrix_bmu2_temp_17_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_17_bmu2_temp_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_17_bmu2_temp_17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_17_bmu2_temp_17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_17_bmu2_temp_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_17_bmu2_temp_18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_17_bmu2_temp_18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_17_bmu2_temp_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_17_bmu2_temp_19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_17_bmu2_temp_19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_17_bmu2_temp_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_17_bmu2_temp_20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_17_bmu2_temp_20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_17_bmu2_temp_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_17_bmu2_temp_21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_17_bmu2_temp_21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_17_bmu2_temp_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_17_bmu2_temp_22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_17_bmu2_temp_22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_17_bmu2_temp_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_17_bmu2_temp_23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_17_bmu2_temp_23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu2_temp_17_bmu2_temp_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu2_temp_17_bmu2_temp_24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu2_temp_17_bmu2_temp_24_is_in_range(uint8_t value);

/**
 * Pack message BMU3_Temp_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_temp_1_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_temp_1_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Temp_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_temp_1_unpack(
    struct tqsy_can_matrix_bmu3_temp_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_1_bmu3_temp_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_1_bmu3_temp_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_1_bmu3_temp_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_1_bmu3_temp_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_1_bmu3_temp_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_1_bmu3_temp_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_1_bmu3_temp_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_1_bmu3_temp_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_1_bmu3_temp_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_1_bmu3_temp_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_1_bmu3_temp_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_1_bmu3_temp_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_1_bmu3_temp_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_1_bmu3_temp_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_1_bmu3_temp_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_1_bmu3_temp_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_1_bmu3_temp_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_1_bmu3_temp_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_1_bmu3_temp_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_1_bmu3_temp_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_1_bmu3_temp_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_1_bmu3_temp_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_1_bmu3_temp_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_1_bmu3_temp_8_is_in_range(uint8_t value);

/**
 * Pack message BMU3_Temp_9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_temp_9_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_temp_9_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Temp_9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_temp_9_unpack(
    struct tqsy_can_matrix_bmu3_temp_9_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_9_bmu3_temp_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_9_bmu3_temp_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_9_bmu3_temp_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_9_bmu3_temp_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_9_bmu3_temp_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_9_bmu3_temp_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_9_bmu3_temp_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_9_bmu3_temp_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_9_bmu3_temp_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_9_bmu3_temp_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_9_bmu3_temp_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_9_bmu3_temp_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_9_bmu3_temp_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_9_bmu3_temp_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_9_bmu3_temp_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_9_bmu3_temp_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_9_bmu3_temp_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_9_bmu3_temp_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_9_bmu3_temp_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_9_bmu3_temp_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_9_bmu3_temp_15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_9_bmu3_temp_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_9_bmu3_temp_16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_9_bmu3_temp_16_is_in_range(uint8_t value);

/**
 * Pack message BMU3_Temp_17.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu3_temp_17_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu3_temp_17_t *src_p,
    size_t size);

/**
 * Unpack message BMU3_Temp_17.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu3_temp_17_unpack(
    struct tqsy_can_matrix_bmu3_temp_17_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_17_bmu3_temp_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_17_bmu3_temp_17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_17_bmu3_temp_17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_17_bmu3_temp_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_17_bmu3_temp_18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_17_bmu3_temp_18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_17_bmu3_temp_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_17_bmu3_temp_19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_17_bmu3_temp_19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_17_bmu3_temp_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_17_bmu3_temp_20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_17_bmu3_temp_20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_17_bmu3_temp_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_17_bmu3_temp_21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_17_bmu3_temp_21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_17_bmu3_temp_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_17_bmu3_temp_22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_17_bmu3_temp_22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_17_bmu3_temp_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_17_bmu3_temp_23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_17_bmu3_temp_23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu3_temp_17_bmu3_temp_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu3_temp_17_bmu3_temp_24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu3_temp_17_bmu3_temp_24_is_in_range(uint8_t value);

/**
 * Pack message BMU4_Temp_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_temp_1_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_temp_1_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Temp_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_temp_1_unpack(
    struct tqsy_can_matrix_bmu4_temp_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_1_bmu4_temp_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_1_bmu4_temp_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_1_bmu4_temp_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_1_bmu4_temp_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_1_bmu4_temp_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_1_bmu4_temp_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_1_bmu4_temp_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_1_bmu4_temp_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_1_bmu4_temp_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_1_bmu4_temp_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_1_bmu4_temp_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_1_bmu4_temp_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_1_bmu4_temp_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_1_bmu4_temp_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_1_bmu4_temp_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_1_bmu4_temp_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_1_bmu4_temp_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_1_bmu4_temp_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_1_bmu4_temp_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_1_bmu4_temp_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_1_bmu4_temp_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_1_bmu4_temp_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_1_bmu4_temp_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_1_bmu4_temp_8_is_in_range(uint8_t value);

/**
 * Pack message BMU4_Temp_9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_temp_9_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_temp_9_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Temp_9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_temp_9_unpack(
    struct tqsy_can_matrix_bmu4_temp_9_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_9_bmu4_temp_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_9_bmu4_temp_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_9_bmu4_temp_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_9_bmu4_temp_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_9_bmu4_temp_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_9_bmu4_temp_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_9_bmu4_temp_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_9_bmu4_temp_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_9_bmu4_temp_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_9_bmu4_temp_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_9_bmu4_temp_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_9_bmu4_temp_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_9_bmu4_temp_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_9_bmu4_temp_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_9_bmu4_temp_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_9_bmu4_temp_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_9_bmu4_temp_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_9_bmu4_temp_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_9_bmu4_temp_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_9_bmu4_temp_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_9_bmu4_temp_15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_9_bmu4_temp_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_9_bmu4_temp_16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_9_bmu4_temp_16_is_in_range(uint8_t value);

/**
 * Pack message BMU4_Temp_17.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu4_temp_17_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu4_temp_17_t *src_p,
    size_t size);

/**
 * Unpack message BMU4_Temp_17.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu4_temp_17_unpack(
    struct tqsy_can_matrix_bmu4_temp_17_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_17_bmu4_temp_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_17_bmu4_temp_17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_17_bmu4_temp_17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_17_bmu4_temp_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_17_bmu4_temp_18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_17_bmu4_temp_18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_17_bmu4_temp_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_17_bmu4_temp_19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_17_bmu4_temp_19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_17_bmu4_temp_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_17_bmu4_temp_20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_17_bmu4_temp_20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_17_bmu4_temp_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_17_bmu4_temp_21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_17_bmu4_temp_21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_17_bmu4_temp_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_17_bmu4_temp_22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_17_bmu4_temp_22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_17_bmu4_temp_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_17_bmu4_temp_23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_17_bmu4_temp_23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu4_temp_17_bmu4_temp_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu4_temp_17_bmu4_temp_24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu4_temp_17_bmu4_temp_24_is_in_range(uint8_t value);

/**
 * Pack message BMU5_Temp_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_temp_1_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_temp_1_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Temp_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_temp_1_unpack(
    struct tqsy_can_matrix_bmu5_temp_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_1_bmu5_temp_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_1_bmu5_temp_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_1_bmu5_temp_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_1_bmu5_temp_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_1_bmu5_temp_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_1_bmu5_temp_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_1_bmu5_temp_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_1_bmu5_temp_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_1_bmu5_temp_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_1_bmu5_temp_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_1_bmu5_temp_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_1_bmu5_temp_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_1_bmu5_temp_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_1_bmu5_temp_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_1_bmu5_temp_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_1_bmu5_temp_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_1_bmu5_temp_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_1_bmu5_temp_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_1_bmu5_temp_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_1_bmu5_temp_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_1_bmu5_temp_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_1_bmu5_temp_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_1_bmu5_temp_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_1_bmu5_temp_8_is_in_range(uint8_t value);

/**
 * Pack message BMU5_Temp_9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_temp_9_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_temp_9_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Temp_9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_temp_9_unpack(
    struct tqsy_can_matrix_bmu5_temp_9_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_9_bmu5_temp_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_9_bmu5_temp_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_9_bmu5_temp_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_9_bmu5_temp_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_9_bmu5_temp_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_9_bmu5_temp_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_9_bmu5_temp_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_9_bmu5_temp_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_9_bmu5_temp_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_9_bmu5_temp_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_9_bmu5_temp_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_9_bmu5_temp_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_9_bmu5_temp_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_9_bmu5_temp_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_9_bmu5_temp_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_9_bmu5_temp_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_9_bmu5_temp_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_9_bmu5_temp_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_9_bmu5_temp_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_9_bmu5_temp_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_9_bmu5_temp_15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_9_bmu5_temp_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_9_bmu5_temp_16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_9_bmu5_temp_16_is_in_range(uint8_t value);

/**
 * Pack message BMU5_Temp_17.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu5_temp_17_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu5_temp_17_t *src_p,
    size_t size);

/**
 * Unpack message BMU5_Temp_17.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu5_temp_17_unpack(
    struct tqsy_can_matrix_bmu5_temp_17_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_17_bmu5_temp_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_17_bmu5_temp_17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_17_bmu5_temp_17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_17_bmu5_temp_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_17_bmu5_temp_18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_17_bmu5_temp_18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_17_bmu5_temp_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_17_bmu5_temp_19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_17_bmu5_temp_19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_17_bmu5_temp_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_17_bmu5_temp_20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_17_bmu5_temp_20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_17_bmu5_temp_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_17_bmu5_temp_21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_17_bmu5_temp_21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_17_bmu5_temp_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_17_bmu5_temp_22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_17_bmu5_temp_22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_17_bmu5_temp_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_17_bmu5_temp_23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_17_bmu5_temp_23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu5_temp_17_bmu5_temp_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu5_temp_17_bmu5_temp_24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu5_temp_17_bmu5_temp_24_is_in_range(uint8_t value);

/**
 * Pack message BMU6_Temp_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_temp_1_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_temp_1_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Temp_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_temp_1_unpack(
    struct tqsy_can_matrix_bmu6_temp_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_1_bmu6_temp_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_1_bmu6_temp_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_1_bmu6_temp_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_1_bmu6_temp_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_1_bmu6_temp_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_1_bmu6_temp_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_1_bmu6_temp_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_1_bmu6_temp_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_1_bmu6_temp_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_1_bmu6_temp_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_1_bmu6_temp_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_1_bmu6_temp_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_1_bmu6_temp_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_1_bmu6_temp_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_1_bmu6_temp_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_1_bmu6_temp_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_1_bmu6_temp_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_1_bmu6_temp_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_1_bmu6_temp_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_1_bmu6_temp_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_1_bmu6_temp_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_1_bmu6_temp_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_1_bmu6_temp_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_1_bmu6_temp_8_is_in_range(uint8_t value);

/**
 * Pack message BMU6_Temp_9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_temp_9_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_temp_9_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Temp_9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_temp_9_unpack(
    struct tqsy_can_matrix_bmu6_temp_9_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_9_bmu6_temp_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_9_bmu6_temp_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_9_bmu6_temp_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_9_bmu6_temp_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_9_bmu6_temp_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_9_bmu6_temp_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_9_bmu6_temp_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_9_bmu6_temp_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_9_bmu6_temp_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_9_bmu6_temp_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_9_bmu6_temp_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_9_bmu6_temp_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_9_bmu6_temp_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_9_bmu6_temp_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_9_bmu6_temp_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_9_bmu6_temp_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_9_bmu6_temp_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_9_bmu6_temp_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_9_bmu6_temp_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_9_bmu6_temp_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_9_bmu6_temp_15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_9_bmu6_temp_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_9_bmu6_temp_16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_9_bmu6_temp_16_is_in_range(uint8_t value);

/**
 * Pack message BMU6_Temp_17.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int tqsy_can_matrix_bmu6_temp_17_pack(
    uint8_t *dst_p,
    const struct tqsy_can_matrix_bmu6_temp_17_t *src_p,
    size_t size);

/**
 * Unpack message BMU6_Temp_17.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int tqsy_can_matrix_bmu6_temp_17_unpack(
    struct tqsy_can_matrix_bmu6_temp_17_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_17_bmu6_temp_17_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_17_bmu6_temp_17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_17_bmu6_temp_17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_17_bmu6_temp_18_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_17_bmu6_temp_18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_17_bmu6_temp_18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_17_bmu6_temp_19_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_17_bmu6_temp_19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_17_bmu6_temp_19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_17_bmu6_temp_20_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_17_bmu6_temp_20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_17_bmu6_temp_20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_17_bmu6_temp_21_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_17_bmu6_temp_21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_17_bmu6_temp_21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_17_bmu6_temp_22_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_17_bmu6_temp_22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_17_bmu6_temp_22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_17_bmu6_temp_23_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_17_bmu6_temp_23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_17_bmu6_temp_23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t tqsy_can_matrix_bmu6_temp_17_bmu6_temp_24_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double tqsy_can_matrix_bmu6_temp_17_bmu6_temp_24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool tqsy_can_matrix_bmu6_temp_17_bmu6_temp_24_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
