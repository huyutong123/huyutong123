/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.0.0 Mon Jul 17 19:43:27 2023.
 */

#ifndef V2_H
#define V2_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define V2_MSG_RESPONSE_FRAME_ID (0x511u)
#define V2_MSG_COMMAND_FRAME_ID (0x411u)
#define V2_MSG_RESULT_TEMPERATURE_FRAME_ID (0x525u)
#define V2_MSG_RESULT_CURRENT_SHUNT_FRAME_ID (0x101u)
#define V2_MAX_MIN_VOLT_TEMP_FRAME_ID (0x64u)
#define V2_BATTERY_INFO_9_FRAME_ID (0x1772u)
#define V2_BATTERY_INFO_4_FRAME_ID (0x17bau)
#define V2_BATTERY_INFO_8_FRAME_ID (0x18efu)
#define V2_BATTERY_INFO_6_FRAME_ID (0x181du)
#define V2_BATTERY_INFO_7_FRAME_ID (0x1935u)
#define V2_BATTERY_INFO_3_FRAME_ID (0x17f8u)
#define V2_BATTERY_INFO_12_FRAME_ID (0x18ffu)
#define V2_BATTERY_INFO_5_FRAME_ID (0x18bdu)
#define V2_BATTERY_INFO_2_FRAME_ID (0x1875u)
#define V2_BATTERY_INFO_11_FRAME_ID (0x17cdu)
#define V2_BATTERY_INFO_10_FRAME_ID (0x188du)
#define V2_BATTERY_INFO_1_FRAME_ID (0x1771u)
#define V2_BATTERY_INFO_13_FRAME_ID (0x179du)

/* Frame lengths in bytes. */
#define V2_MSG_RESPONSE_LENGTH (8u)
#define V2_MSG_COMMAND_LENGTH (8u)
#define V2_MSG_RESULT_TEMPERATURE_LENGTH (6u)
#define V2_MSG_RESULT_CURRENT_SHUNT_LENGTH (6u)
#define V2_MAX_MIN_VOLT_TEMP_LENGTH (8u)
#define V2_BATTERY_INFO_9_LENGTH (8u)
#define V2_BATTERY_INFO_4_LENGTH (8u)
#define V2_BATTERY_INFO_8_LENGTH (8u)
#define V2_BATTERY_INFO_6_LENGTH (8u)
#define V2_BATTERY_INFO_7_LENGTH (8u)
#define V2_BATTERY_INFO_3_LENGTH (8u)
#define V2_BATTERY_INFO_12_LENGTH (8u)
#define V2_BATTERY_INFO_5_LENGTH (8u)
#define V2_BATTERY_INFO_2_LENGTH (8u)
#define V2_BATTERY_INFO_11_LENGTH (8u)
#define V2_BATTERY_INFO_10_LENGTH (8u)
#define V2_BATTERY_INFO_1_LENGTH (8u)
#define V2_BATTERY_INFO_13_LENGTH (8u)

/* Extended or standard frame types. */
#define V2_MSG_RESPONSE_IS_EXTENDED (0)
#define V2_MSG_COMMAND_IS_EXTENDED (0)
#define V2_MSG_RESULT_TEMPERATURE_IS_EXTENDED (0)
#define V2_MSG_RESULT_CURRENT_SHUNT_IS_EXTENDED (0)
#define V2_MAX_MIN_VOLT_TEMP_IS_EXTENDED (0)
#define V2_BATTERY_INFO_9_IS_EXTENDED (1)
#define V2_BATTERY_INFO_4_IS_EXTENDED (1)
#define V2_BATTERY_INFO_8_IS_EXTENDED (1)
#define V2_BATTERY_INFO_6_IS_EXTENDED (1)
#define V2_BATTERY_INFO_7_IS_EXTENDED (1)
#define V2_BATTERY_INFO_3_IS_EXTENDED (1)
#define V2_BATTERY_INFO_12_IS_EXTENDED (1)
#define V2_BATTERY_INFO_5_IS_EXTENDED (1)
#define V2_BATTERY_INFO_2_IS_EXTENDED (1)
#define V2_BATTERY_INFO_11_IS_EXTENDED (1)
#define V2_BATTERY_INFO_10_IS_EXTENDED (1)
#define V2_BATTERY_INFO_1_IS_EXTENDED (1)
#define V2_BATTERY_INFO_13_IS_EXTENDED (1)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define V2_MSG_RESULT_TEMPERATURE_RESULT_STATE_OCS_IS_TRUE_CHOICE (1)
#define V2_MSG_RESULT_TEMPERATURE_RESULT_STATE_RESULT_HAS_REDUCED_PRECISION_CHOICE (2)
#define V2_MSG_RESULT_TEMPERATURE_RESULT_STATE_RESULT_HAS_A_MEASUREMENT_ERROR_CHOICE (4)
#define V2_MSG_RESULT_TEMPERATURE_RESULT_STATE_SYSTEM_ERROR_CHOICE (8)

/* Frame Names. */
#define V2_MSG_RESPONSE_NAME "Msg_Response"
#define V2_MSG_COMMAND_NAME "Msg_Command"
#define V2_MSG_RESULT_TEMPERATURE_NAME "Msg_Result_Temperature"
#define V2_MSG_RESULT_CURRENT_SHUNT_NAME "Msg_Result_Current_Shunt"
#define V2_MAX_MIN_VOLT_TEMP_NAME "Max_Min_Volt_Temp"
#define V2_BATTERY_INFO_9_NAME "Battery_Info_9"
#define V2_BATTERY_INFO_4_NAME "Battery_Info_4"
#define V2_BATTERY_INFO_8_NAME "Battery_Info_8"
#define V2_BATTERY_INFO_6_NAME "Battery_Info_6"
#define V2_BATTERY_INFO_7_NAME "Battery_Info_7"
#define V2_BATTERY_INFO_3_NAME "Battery_Info_3"
#define V2_BATTERY_INFO_12_NAME "Battery_Info_12"
#define V2_BATTERY_INFO_5_NAME "Battery_Info_5"
#define V2_BATTERY_INFO_2_NAME "Battery_Info_2"
#define V2_BATTERY_INFO_11_NAME "Battery_Info_11"
#define V2_BATTERY_INFO_10_NAME "Battery_Info_10"
#define V2_BATTERY_INFO_1_NAME "Battery_Info_1"
#define V2_BATTERY_INFO_13_NAME "Battery_Info_13"

/* Signal Names. */
#define V2_MSG_RESPONSE_RESPONSE_ID_NAME "Response_ID"
#define V2_MSG_RESPONSE_BITMASK_OCCURRED_MEA_ERR_NAME "Bitmask_occurred_mea_err"
#define V2_MSG_RESPONSE_OCCURRED_MEASUREMENT_ERROR_1_NAME "Occurred_Measurement_Error_1"
#define V2_MSG_RESPONSE_OCCURRED_MEASUREMENT_ERROR_2_NAME "Occurred_Measurement_Error_2"
#define V2_MSG_RESULT_TEMPERATURE_RESULT_ID_NAME "Result_ID"
#define V2_MSG_RESULT_TEMPERATURE_RESULT_STATE_NAME "Result_state"
#define V2_MSG_RESULT_TEMPERATURE_MESSAGE_COUNT_NAME "Message_count"
#define V2_MSG_RESULT_TEMPERATURE_TEMPERATURE_RESULT_NAME "Temperature_result"
#define V2_MSG_RESULT_CURRENT_SHUNT_MUX_ID_NAME "Mux_ID"
#define V2_MSG_RESULT_CURRENT_SHUNT_MESSAGE_COUNT_NAME "Message_count"
#define V2_MSG_RESULT_CURRENT_SHUNT_RESULT_STATE_NAME "Result_state"
#define V2_MSG_RESULT_CURRENT_SHUNT_CURRENT_RESULT_NAME "Current_result"
#define V2_MAX_MIN_VOLT_TEMP_MAX_VOLT_NAME "MaxVolt"
#define V2_MAX_MIN_VOLT_TEMP_MIN_VOLT_NAME "MinVolt"
#define V2_MAX_MIN_VOLT_TEMP_MAX_TEMP_NAME "MaxTemp"
#define V2_MAX_MIN_VOLT_TEMP_MIN_TEMP_NAME "MinTemp"
#define V2_BATTERY_INFO_9_VOLTAGE_NAME "Voltage"
#define V2_BATTERY_INFO_9_TEMP_NAME "Temp"
#define V2_BATTERY_INFO_9_ID_NAME "ID"
#define V2_BATTERY_INFO_9_SFID_NAME "Sfid"
#define V2_BATTERY_INFO_9_BALANCE_NAME "Balance"
#define V2_BATTERY_INFO_9_RSSI_NAME "Rssi"
#define V2_BATTERY_INFO_4_VOLTAGE_NAME "Voltage"
#define V2_BATTERY_INFO_4_TEMP_NAME "Temp"
#define V2_BATTERY_INFO_4_ID_NAME "ID"
#define V2_BATTERY_INFO_4_SFID_NAME "Sfid"
#define V2_BATTERY_INFO_4_BALANCE_NAME "Balance"
#define V2_BATTERY_INFO_4_RSSI_NAME "Rssi"
#define V2_BATTERY_INFO_8_VOLTAGE_NAME "Voltage"
#define V2_BATTERY_INFO_8_TEMP_NAME "Temp"
#define V2_BATTERY_INFO_8_ID_NAME "ID"
#define V2_BATTERY_INFO_8_SFID_NAME "Sfid"
#define V2_BATTERY_INFO_8_BALANCE_NAME "Balance"
#define V2_BATTERY_INFO_8_RSSI_NAME "Rssi"
#define V2_BATTERY_INFO_6_VOLTAGE_NAME "Voltage"
#define V2_BATTERY_INFO_6_TEMP_NAME "Temp"
#define V2_BATTERY_INFO_6_ID_NAME "ID"
#define V2_BATTERY_INFO_6_SFID_NAME "Sfid"
#define V2_BATTERY_INFO_6_BALANCE_NAME "Balance"
#define V2_BATTERY_INFO_6_RSSI_NAME "Rssi"
#define V2_BATTERY_INFO_7_VOLTAGE_NAME "Voltage"
#define V2_BATTERY_INFO_7_TEMP_NAME "Temp"
#define V2_BATTERY_INFO_7_ID_NAME "ID"
#define V2_BATTERY_INFO_7_SFID_NAME "Sfid"
#define V2_BATTERY_INFO_7_BALANCE_NAME "Balance"
#define V2_BATTERY_INFO_7_RSSI_NAME "Rssi"
#define V2_BATTERY_INFO_3_VOLTAGE_NAME "Voltage"
#define V2_BATTERY_INFO_3_TEMP_NAME "Temp"
#define V2_BATTERY_INFO_3_ID_NAME "ID"
#define V2_BATTERY_INFO_3_SFID_NAME "Sfid"
#define V2_BATTERY_INFO_3_BALANCE_NAME "Balance"
#define V2_BATTERY_INFO_3_RSSI_NAME "Rssi"
#define V2_BATTERY_INFO_12_VOLTAGE_NAME "Voltage"
#define V2_BATTERY_INFO_12_TEMP_NAME "Temp"
#define V2_BATTERY_INFO_12_ID_NAME "ID"
#define V2_BATTERY_INFO_12_SFID_NAME "Sfid"
#define V2_BATTERY_INFO_12_BALANCE_NAME "Balance"
#define V2_BATTERY_INFO_12_RSSI_NAME "Rssi"
#define V2_BATTERY_INFO_5_VOLTAGE_NAME "Voltage"
#define V2_BATTERY_INFO_5_TEMP_NAME "Temp"
#define V2_BATTERY_INFO_5_ID_NAME "ID"
#define V2_BATTERY_INFO_5_SFID_NAME "Sfid"
#define V2_BATTERY_INFO_5_BALANCE_NAME "Balance"
#define V2_BATTERY_INFO_5_RSSI_NAME "Rssi"
#define V2_BATTERY_INFO_2_VOLTAGE_NAME "Voltage"
#define V2_BATTERY_INFO_2_TEMP_NAME "Temp"
#define V2_BATTERY_INFO_2_ID_NAME "ID"
#define V2_BATTERY_INFO_2_SFID_NAME "Sfid"
#define V2_BATTERY_INFO_2_BALANCE_NAME "Balance"
#define V2_BATTERY_INFO_2_RSSI_NAME "Rssi"
#define V2_BATTERY_INFO_11_VOLTAGE_NAME "Voltage"
#define V2_BATTERY_INFO_11_TEMP_NAME "Temp"
#define V2_BATTERY_INFO_11_ID_NAME "ID"
#define V2_BATTERY_INFO_11_SFID_NAME "Sfid"
#define V2_BATTERY_INFO_11_BALANCE_NAME "Balance"
#define V2_BATTERY_INFO_11_RSSI_NAME "Rssi"
#define V2_BATTERY_INFO_10_VOLTAGE_NAME "Voltage"
#define V2_BATTERY_INFO_10_TEMP_NAME "Temp"
#define V2_BATTERY_INFO_10_ID_NAME "ID"
#define V2_BATTERY_INFO_10_SFID_NAME "Sfid"
#define V2_BATTERY_INFO_10_BALANCE_NAME "Balance"
#define V2_BATTERY_INFO_10_RSSI_NAME "Rssi"
#define V2_BATTERY_INFO_1_VOLTAGE_NAME "Voltage"
#define V2_BATTERY_INFO_1_TEMP_NAME "Temp"
#define V2_BATTERY_INFO_1_ID_NAME "ID"
#define V2_BATTERY_INFO_1_SFID_NAME "Sfid"
#define V2_BATTERY_INFO_1_BALANCE_NAME "Balance"
#define V2_BATTERY_INFO_1_RSSI_NAME "Rssi"
#define V2_BATTERY_INFO_13_VOLTAGE_NAME "Voltage"
#define V2_BATTERY_INFO_13_TEMP_NAME "Temp"
#define V2_BATTERY_INFO_13_ID_NAME "ID"
#define V2_BATTERY_INFO_13_SFID_NAME "Sfid"
#define V2_BATTERY_INFO_13_BALANCE_NAME "Balance"
#define V2_BATTERY_INFO_13_RSSI_NAME "Rssi"

/**
 * Signals in message Msg_Response.
 *
 * Response of Set and Get command messages.
 *
 * All signal values are as on the CAN bus.
 */
struct v2_msg_response_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t response_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t bitmask_occurred_mea_err;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t occurred_measurement_error_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t occurred_measurement_error_2;
};

/**
 * Signals in message Msg_Command.
 *
 * Set and Get commands from Host
 *
 * All signal values are as on the CAN bus.
 */
struct v2_msg_command_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Msg_Result_Temperature.
 *
 * Temperature
 *
 * All signal values are as on the CAN bus.
 */
struct v2_msg_result_temperature_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t result_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t result_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t message_count;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int32_t temperature_result;
};

/**
 * Signals in message Msg_Result_Current_Shunt.
 *
 * Current
 *
 * All signal values are as on the CAN bus.
 */
struct v2_msg_result_current_shunt_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mux_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t message_count;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t result_state;

    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 mA)
     * Scale: 1
     * Offset: 0
     */
    int32_t current_result;
};

/**
 * Signals in message Max_Min_Volt_Temp.
 *
 * All signal values are as on the CAN bus.
 */
struct v2_max_min_volt_temp_t {
    /**
     * Range: 0..5000 (0..5 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t max_volt;

    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t min_volt;

    /**
     * Range: 0..100 (0..100 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t max_temp;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t min_temp;
};

/**
 * Signals in message Battery_Info_9.
 *
 * All signal values are as on the CAN bus.
 */
struct v2_battery_info_9_t {
    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t voltage;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t temp;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t id;

    /**
     * Range: -128..127 (-128..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sfid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t balance;

    /**
     * Range: -
     * Scale: 1
     * Offset: -93
     */
    uint8_t rssi;
};

/**
 * Signals in message Battery_Info_4.
 *
 * All signal values are as on the CAN bus.
 */
struct v2_battery_info_4_t {
    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t voltage;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t temp;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t id;

    /**
     * Range: -128..127 (-128..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sfid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t balance;

    /**
     * Range: -
     * Scale: 1
     * Offset: -93
     */
    uint8_t rssi;
};

/**
 * Signals in message Battery_Info_8.
 *
 * All signal values are as on the CAN bus.
 */
struct v2_battery_info_8_t {
    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t voltage;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t temp;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t id;

    /**
     * Range: -128..127 (-128..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sfid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t balance;

    /**
     * Range: -
     * Scale: 1
     * Offset: -93
     */
    uint8_t rssi;
};

/**
 * Signals in message Battery_Info_6.
 *
 * All signal values are as on the CAN bus.
 */
struct v2_battery_info_6_t {
    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t voltage;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t temp;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t id;

    /**
     * Range: -128..127 (-128..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sfid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t balance;

    /**
     * Range: -
     * Scale: 1
     * Offset: -93
     */
    uint8_t rssi;
};

/**
 * Signals in message Battery_Info_7.
 *
 * All signal values are as on the CAN bus.
 */
struct v2_battery_info_7_t {
    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t voltage;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t temp;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t id;

    /**
     * Range: -128..127 (-128..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sfid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t balance;

    /**
     * Range: -
     * Scale: 1
     * Offset: -93
     */
    uint8_t rssi;
};

/**
 * Signals in message Battery_Info_3.
 *
 * All signal values are as on the CAN bus.
 */
struct v2_battery_info_3_t {
    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t voltage;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t temp;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t id;

    /**
     * Range: -128..127 (-128..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sfid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t balance;

    /**
     * Range: -
     * Scale: 1
     * Offset: -93
     */
    uint8_t rssi;
};

/**
 * Signals in message Battery_Info_12.
 *
 * All signal values are as on the CAN bus.
 */
struct v2_battery_info_12_t {
    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t voltage;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t temp;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t id;

    /**
     * Range: -128..127 (-128..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sfid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t balance;

    /**
     * Range: -
     * Scale: 1
     * Offset: -93
     */
    uint8_t rssi;
};

/**
 * Signals in message Battery_Info_5.
 *
 * All signal values are as on the CAN bus.
 */
struct v2_battery_info_5_t {
    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t voltage;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t temp;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t id;

    /**
     * Range: -128..127 (-128..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sfid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t balance;

    /**
     * Range: -
     * Scale: 1
     * Offset: -93
     */
    uint8_t rssi;
};

/**
 * Signals in message Battery_Info_2.
 *
 * All signal values are as on the CAN bus.
 */
struct v2_battery_info_2_t {
    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t voltage;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t temp;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t id;

    /**
     * Range: -128..127 (-128..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sfid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t balance;

    /**
     * Range: -
     * Scale: 1
     * Offset: -93
     */
    uint8_t rssi;
};

/**
 * Signals in message Battery_Info_11.
 *
 * All signal values are as on the CAN bus.
 */
struct v2_battery_info_11_t {
    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t voltage;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t temp;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t id;

    /**
     * Range: -128..127 (-128..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sfid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t balance;

    /**
     * Range: -
     * Scale: 1
     * Offset: -93
     */
    uint8_t rssi;
};

/**
 * Signals in message Battery_Info_10.
 *
 * All signal values are as on the CAN bus.
 */
struct v2_battery_info_10_t {
    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t voltage;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t temp;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t id;

    /**
     * Range: -128..127 (-128..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sfid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t balance;

    /**
     * Range: -
     * Scale: 1
     * Offset: -93
     */
    uint8_t rssi;
};

/**
 * Signals in message Battery_Info_1.
 *
 * All signal values are as on the CAN bus.
 */
struct v2_battery_info_1_t {
    /**
     * Range: 0..65535000 (0..65535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t voltage;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t temp;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t id;

    /**
     * Range: -128..127 (-128..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sfid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t balance;

    /**
     * Range: -
     * Scale: 1
     * Offset: -93
     */
    uint8_t rssi;
};

/**
 * Signals in message Battery_Info_13.
 *
 * All signal values are as on the CAN bus.
 */
struct v2_battery_info_13_t {
    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t voltage;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t temp;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t id;

    /**
     * Range: -128..127 (-128..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sfid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t balance;

    /**
     * Range: -
     * Scale: 1
     * Offset: -93
     */
    uint8_t rssi;
};

/**
 * Pack message Msg_Response.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int v2_msg_response_pack(
    uint8_t *dst_p,
    const struct v2_msg_response_t *src_p,
    size_t size);

/**
 * Unpack message Msg_Response.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int v2_msg_response_unpack(
    struct v2_msg_response_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Msg_Response.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int v2_msg_response_init(struct v2_msg_response_t *msg_p);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_msg_response_response_id_is_in_range(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_msg_response_bitmask_occurred_mea_err_is_in_range(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_msg_response_occurred_measurement_error_1_is_in_range(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_msg_response_occurred_measurement_error_2_is_in_range(int8_t value);

/**
 * Pack message Msg_Command.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int v2_msg_command_pack(
    uint8_t *dst_p,
    const struct v2_msg_command_t *src_p,
    size_t size);

/**
 * Unpack message Msg_Command.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int v2_msg_command_unpack(
    struct v2_msg_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Msg_Command.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int v2_msg_command_init(struct v2_msg_command_t *msg_p);

/**
 * Pack message Msg_Result_Temperature.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int v2_msg_result_temperature_pack(
    uint8_t *dst_p,
    const struct v2_msg_result_temperature_t *src_p,
    size_t size);

/**
 * Unpack message Msg_Result_Temperature.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int v2_msg_result_temperature_unpack(
    struct v2_msg_result_temperature_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Msg_Result_Temperature.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int v2_msg_result_temperature_init(struct v2_msg_result_temperature_t *msg_p);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_msg_result_temperature_result_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_msg_result_temperature_result_state_is_in_range(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_msg_result_temperature_message_count_is_in_range(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_msg_result_temperature_temperature_result_is_in_range(int32_t value);

/**
 * Pack message Msg_Result_Current_Shunt.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int v2_msg_result_current_shunt_pack(
    uint8_t *dst_p,
    const struct v2_msg_result_current_shunt_t *src_p,
    size_t size);

/**
 * Unpack message Msg_Result_Current_Shunt.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int v2_msg_result_current_shunt_unpack(
    struct v2_msg_result_current_shunt_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Msg_Result_Current_Shunt.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int v2_msg_result_current_shunt_init(struct v2_msg_result_current_shunt_t *msg_p);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_msg_result_current_shunt_mux_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_msg_result_current_shunt_message_count_is_in_range(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_msg_result_current_shunt_result_state_is_in_range(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_msg_result_current_shunt_current_result_is_in_range(int32_t value);

/**
 * Pack message Max_Min_Volt_Temp.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int v2_max_min_volt_temp_pack(
    uint8_t *dst_p,
    const struct v2_max_min_volt_temp_t *src_p,
    size_t size);

/**
 * Unpack message Max_Min_Volt_Temp.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int v2_max_min_volt_temp_unpack(
    struct v2_max_min_volt_temp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Max_Min_Volt_Temp.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int v2_max_min_volt_temp_init(struct v2_max_min_volt_temp_t *msg_p);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_max_min_volt_temp_max_volt_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_max_min_volt_temp_min_volt_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_max_min_volt_temp_max_temp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_max_min_volt_temp_min_temp_is_in_range(uint16_t value);

/**
 * Pack message Battery_Info_9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int v2_battery_info_9_pack(
    uint8_t *dst_p,
    const struct v2_battery_info_9_t *src_p,
    size_t size);

/**
 * Unpack message Battery_Info_9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int v2_battery_info_9_unpack(
    struct v2_battery_info_9_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Battery_Info_9.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int v2_battery_info_9_init(struct v2_battery_info_9_t *msg_p);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_9_voltage_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_9_temp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_9_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_9_sfid_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_9_balance_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_9_rssi_is_in_range(uint8_t value);

/**
 * Pack message Battery_Info_4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int v2_battery_info_4_pack(
    uint8_t *dst_p,
    const struct v2_battery_info_4_t *src_p,
    size_t size);

/**
 * Unpack message Battery_Info_4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int v2_battery_info_4_unpack(
    struct v2_battery_info_4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Battery_Info_4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int v2_battery_info_4_init(struct v2_battery_info_4_t *msg_p);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_4_voltage_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_4_temp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_4_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_4_sfid_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_4_balance_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_4_rssi_is_in_range(uint8_t value);

/**
 * Pack message Battery_Info_8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int v2_battery_info_8_pack(
    uint8_t *dst_p,
    const struct v2_battery_info_8_t *src_p,
    size_t size);

/**
 * Unpack message Battery_Info_8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int v2_battery_info_8_unpack(
    struct v2_battery_info_8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Battery_Info_8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int v2_battery_info_8_init(struct v2_battery_info_8_t *msg_p);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_8_voltage_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_8_temp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_8_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_8_sfid_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_8_balance_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_8_rssi_is_in_range(uint8_t value);

/**
 * Pack message Battery_Info_6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int v2_battery_info_6_pack(
    uint8_t *dst_p,
    const struct v2_battery_info_6_t *src_p,
    size_t size);

/**
 * Unpack message Battery_Info_6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int v2_battery_info_6_unpack(
    struct v2_battery_info_6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Battery_Info_6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int v2_battery_info_6_init(struct v2_battery_info_6_t *msg_p);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_6_voltage_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_6_temp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_6_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_6_sfid_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_6_balance_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_6_rssi_is_in_range(uint8_t value);

/**
 * Pack message Battery_Info_7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int v2_battery_info_7_pack(
    uint8_t *dst_p,
    const struct v2_battery_info_7_t *src_p,
    size_t size);

/**
 * Unpack message Battery_Info_7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int v2_battery_info_7_unpack(
    struct v2_battery_info_7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Battery_Info_7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int v2_battery_info_7_init(struct v2_battery_info_7_t *msg_p);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_7_voltage_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_7_temp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_7_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_7_sfid_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_7_balance_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_7_rssi_is_in_range(uint8_t value);

/**
 * Pack message Battery_Info_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int v2_battery_info_3_pack(
    uint8_t *dst_p,
    const struct v2_battery_info_3_t *src_p,
    size_t size);

/**
 * Unpack message Battery_Info_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int v2_battery_info_3_unpack(
    struct v2_battery_info_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Battery_Info_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int v2_battery_info_3_init(struct v2_battery_info_3_t *msg_p);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_3_voltage_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_3_temp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_3_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_3_sfid_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_3_balance_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_3_rssi_is_in_range(uint8_t value);

/**
 * Pack message Battery_Info_12.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int v2_battery_info_12_pack(
    uint8_t *dst_p,
    const struct v2_battery_info_12_t *src_p,
    size_t size);

/**
 * Unpack message Battery_Info_12.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int v2_battery_info_12_unpack(
    struct v2_battery_info_12_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Battery_Info_12.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int v2_battery_info_12_init(struct v2_battery_info_12_t *msg_p);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_12_voltage_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_12_temp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_12_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_12_sfid_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_12_balance_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_12_rssi_is_in_range(uint8_t value);

/**
 * Pack message Battery_Info_5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int v2_battery_info_5_pack(
    uint8_t *dst_p,
    const struct v2_battery_info_5_t *src_p,
    size_t size);

/**
 * Unpack message Battery_Info_5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int v2_battery_info_5_unpack(
    struct v2_battery_info_5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Battery_Info_5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int v2_battery_info_5_init(struct v2_battery_info_5_t *msg_p);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_5_voltage_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_5_temp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_5_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_5_sfid_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_5_balance_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_5_rssi_is_in_range(uint8_t value);

/**
 * Pack message Battery_Info_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int v2_battery_info_2_pack(
    uint8_t *dst_p,
    const struct v2_battery_info_2_t *src_p,
    size_t size);

/**
 * Unpack message Battery_Info_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int v2_battery_info_2_unpack(
    struct v2_battery_info_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Battery_Info_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int v2_battery_info_2_init(struct v2_battery_info_2_t *msg_p);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_2_voltage_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_2_temp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_2_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_2_sfid_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_2_balance_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_2_rssi_is_in_range(uint8_t value);

/**
 * Pack message Battery_Info_11.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int v2_battery_info_11_pack(
    uint8_t *dst_p,
    const struct v2_battery_info_11_t *src_p,
    size_t size);

/**
 * Unpack message Battery_Info_11.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int v2_battery_info_11_unpack(
    struct v2_battery_info_11_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Battery_Info_11.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int v2_battery_info_11_init(struct v2_battery_info_11_t *msg_p);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_11_voltage_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_11_temp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_11_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_11_sfid_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_11_balance_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_11_rssi_is_in_range(uint8_t value);

/**
 * Pack message Battery_Info_10.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int v2_battery_info_10_pack(
    uint8_t *dst_p,
    const struct v2_battery_info_10_t *src_p,
    size_t size);

/**
 * Unpack message Battery_Info_10.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int v2_battery_info_10_unpack(
    struct v2_battery_info_10_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Battery_Info_10.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int v2_battery_info_10_init(struct v2_battery_info_10_t *msg_p);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_10_voltage_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_10_temp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_10_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_10_sfid_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_10_balance_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_10_rssi_is_in_range(uint8_t value);

/**
 * Pack message Battery_Info_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int v2_battery_info_1_pack(
    uint8_t *dst_p,
    const struct v2_battery_info_1_t *src_p,
    size_t size);

/**
 * Unpack message Battery_Info_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int v2_battery_info_1_unpack(
    struct v2_battery_info_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Battery_Info_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int v2_battery_info_1_init(struct v2_battery_info_1_t *msg_p);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_1_voltage_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_1_temp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_1_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_1_sfid_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_1_balance_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_1_rssi_is_in_range(uint8_t value);

/**
 * Pack message Battery_Info_13.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int v2_battery_info_13_pack(
    uint8_t *dst_p,
    const struct v2_battery_info_13_t *src_p,
    size_t size);

/**
 * Unpack message Battery_Info_13.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int v2_battery_info_13_unpack(
    struct v2_battery_info_13_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Battery_Info_13.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int v2_battery_info_13_init(struct v2_battery_info_13_t *msg_p);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_13_voltage_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_13_temp_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_13_id_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_13_sfid_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_13_balance_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool v2_battery_info_13_rssi_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
