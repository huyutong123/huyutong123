/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 37.0.0 Tue Nov  1 13:51:35 2022.
 */

#ifndef HALLSENSOR_H
#define HALLSENSOR_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define HALLSENSOR_CAB500_IP_FRAME_ID (0x3c2u)

/* Frame lengths in bytes. */
#define HALLSENSOR_CAB500_IP_LENGTH (8u)

/* Extended or standard frame types. */
#define HALLSENSOR_CAB500_IP_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define HALLSENSOR_CAB500_IP_CYCLE_TIME_MS (10u)

/* Signal choices. */
#define HALLSENSOR_CAB500_IP_IP_VALUE_0M_A_CHOICE (-2147483648u)
#define HALLSENSOR_CAB500_IP_IP_VALUE_1M_A_CHOICE (-2147483647u)
#define HALLSENSOR_CAB500_IP_IP_VALUE__1M_A_CHOICE (2147483647u)

#define HALLSENSOR_CAB500_IP_ERROR_INFO_NORMAL_CHOICE (0u)
#define HALLSENSOR_CAB500_IP_ERROR_INFO_FAILURE_CHOICE (1u)

#define HALLSENSOR_CAB500_IP_ERROR_INDICATION_NORMAL_CHOICE (0u)
#define HALLSENSOR_CAB500_IP_ERROR_INDICATION_FAILURE_CHOICE (1u)

/**
 * Signals in message cab500_ip.
 *
 * return current ip (mA)
 *
 * All signal values are as on the CAN bus.
 */
struct hallsensor_cab500_ip_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: -2147483648
     */
    uint32_t ip_value;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t error_info;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t error_indication;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t sensor_name;
};

/**
 * Pack message cab500_ip.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hallsensor_cab500_ip_pack(
    uint8_t *dst_p,
    const struct hallsensor_cab500_ip_t *src_p,
    size_t size);

/**
 * Unpack message cab500_ip.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hallsensor_cab500_ip_unpack(
    struct hallsensor_cab500_ip_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t hallsensor_cab500_ip_ip_value_encode(int value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
int hallsensor_cab500_ip_ip_value_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hallsensor_cab500_ip_ip_value_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hallsensor_cab500_ip_error_info_encode(int value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
int hallsensor_cab500_ip_error_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hallsensor_cab500_ip_error_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hallsensor_cab500_ip_error_indication_encode(int value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
int hallsensor_cab500_ip_error_indication_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hallsensor_cab500_ip_error_indication_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t hallsensor_cab500_ip_sensor_name_encode(int value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
int hallsensor_cab500_ip_sensor_name_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hallsensor_cab500_ip_sensor_name_is_in_range(uint32_t value);


#ifdef __cplusplus
}
#endif

#endif
