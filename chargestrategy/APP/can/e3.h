/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 38.0.2 Thu Jun 15 16:27:07 2023.
 */

#ifndef E3_H
#define E3_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define E3_BMS_675_FRAME_ID (0x675u)
#define E3_BMS_104_FRAME_ID (0x104u)
#define E3_BMS_355_FRAME_ID (0x355u)
#define E3_BMS_356_FRAME_ID (0x356u)
#define E3_BMS_109_FRAME_ID (0x109u)
#define E3_BMS_357_FRAME_ID (0x357u)
#define E3_BMS_358_FRAME_ID (0x358u)
#define E3_BMS_360_FRAME_ID (0x360u)
#define E3_BMS_35_A_FRAME_ID (0x35au)
#define E3_BMS_363_FRAME_ID (0x363u)
#define E3_BMS_35_F_FRAME_ID (0x35fu)
#define E3_BMS_59_B_FRAME_ID (0x59bu)
#define E3_BMS_VERSION_580_FRAME_ID (0x580u)
#define E3_BMS_VERSION_581_FRAME_ID (0x581u)
#define E3_BMS_VERSION_3_E1_FRAME_ID (0x3e1u)
#define E3_BMS_59_D_FRAME_ID (0x59du)
#define E3_BMS_GBT32960_59_A_FRAME_ID (0x59au)
#define E3_BMS_59_E_FRAME_ID (0x59eu)
#define E3_BMS_TEST_VERSION_69_C_FRAME_ID (0x69cu)
#define E3_BMS_VERSION_3_E4_FRAME_ID (0x3e4u)
#define E3_MCUF0_STATE_112_FRAME_ID (0x112u)
#define E3_VCU_253_FRAME_ID (0x253u)
#define E3_OBC_STATE1_387_FRAME_ID (0x387u)
#define E3_OBC_STATE2_388_FRAME_ID (0x388u)
#define E3_OBC_STATE3_389_FRAME_ID (0x389u)
#define E3_VCU_335_FRAME_ID (0x335u)
#define E3_CCU_369_FRAME_ID (0x369u)
#define E3_PTCH_379_FRAME_ID (0x379u)
#define E3_HMC_36_C_FRAME_ID (0x36cu)
#define E3_HMC_36_D_FRAME_ID (0x36du)
#define E3_ABM_385_FRAME_ID (0x385u)
#define E3_BCM_PEPS_365_FRAME_ID (0x365u)

/* Frame lengths in bytes. */
#define E3_BMS_675_LENGTH (8u)
#define E3_BMS_104_LENGTH (8u)
#define E3_BMS_355_LENGTH (8u)
#define E3_BMS_356_LENGTH (8u)
#define E3_BMS_109_LENGTH (8u)
#define E3_BMS_357_LENGTH (8u)
#define E3_BMS_358_LENGTH (8u)
#define E3_BMS_360_LENGTH (8u)
#define E3_BMS_35_A_LENGTH (8u)
#define E3_BMS_363_LENGTH (8u)
#define E3_BMS_35_F_LENGTH (8u)
#define E3_BMS_59_B_LENGTH (8u)
#define E3_BMS_VERSION_580_LENGTH (8u)
#define E3_BMS_VERSION_581_LENGTH (8u)
#define E3_BMS_VERSION_3_E1_LENGTH (8u)
#define E3_BMS_59_D_LENGTH (8u)
#define E3_BMS_GBT32960_59_A_LENGTH (8u)
#define E3_BMS_59_E_LENGTH (8u)
#define E3_BMS_TEST_VERSION_69_C_LENGTH (8u)
#define E3_BMS_VERSION_3_E4_LENGTH (8u)
#define E3_MCUF0_STATE_112_LENGTH (8u)
#define E3_VCU_253_LENGTH (8u)
#define E3_OBC_STATE1_387_LENGTH (8u)
#define E3_OBC_STATE2_388_LENGTH (8u)
#define E3_OBC_STATE3_389_LENGTH (8u)
#define E3_VCU_335_LENGTH (8u)
#define E3_CCU_369_LENGTH (8u)
#define E3_PTCH_379_LENGTH (8u)
#define E3_HMC_36_C_LENGTH (8u)
#define E3_HMC_36_D_LENGTH (8u)
#define E3_ABM_385_LENGTH (8u)
#define E3_BCM_PEPS_365_LENGTH (8u)

/* Extended or standard frame types. */
#define E3_BMS_675_IS_EXTENDED (0)
#define E3_BMS_104_IS_EXTENDED (0)
#define E3_BMS_355_IS_EXTENDED (0)
#define E3_BMS_356_IS_EXTENDED (0)
#define E3_BMS_109_IS_EXTENDED (0)
#define E3_BMS_357_IS_EXTENDED (0)
#define E3_BMS_358_IS_EXTENDED (0)
#define E3_BMS_360_IS_EXTENDED (0)
#define E3_BMS_35_A_IS_EXTENDED (0)
#define E3_BMS_363_IS_EXTENDED (0)
#define E3_BMS_35_F_IS_EXTENDED (0)
#define E3_BMS_59_B_IS_EXTENDED (0)
#define E3_BMS_VERSION_580_IS_EXTENDED (0)
#define E3_BMS_VERSION_581_IS_EXTENDED (0)
#define E3_BMS_VERSION_3_E1_IS_EXTENDED (0)
#define E3_BMS_59_D_IS_EXTENDED (0)
#define E3_BMS_GBT32960_59_A_IS_EXTENDED (0)
#define E3_BMS_59_E_IS_EXTENDED (0)
#define E3_BMS_TEST_VERSION_69_C_IS_EXTENDED (0)
#define E3_BMS_VERSION_3_E4_IS_EXTENDED (0)
#define E3_MCUF0_STATE_112_IS_EXTENDED (0)
#define E3_VCU_253_IS_EXTENDED (0)
#define E3_OBC_STATE1_387_IS_EXTENDED (0)
#define E3_OBC_STATE2_388_IS_EXTENDED (0)
#define E3_OBC_STATE3_389_IS_EXTENDED (0)
#define E3_VCU_335_IS_EXTENDED (0)
#define E3_CCU_369_IS_EXTENDED (0)
#define E3_PTCH_379_IS_EXTENDED (0)
#define E3_HMC_36_C_IS_EXTENDED (0)
#define E3_HMC_36_D_IS_EXTENDED (0)
#define E3_ABM_385_IS_EXTENDED (0)
#define E3_BCM_PEPS_365_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define E3_BMS_104_CYCLE_TIME_MS (10u)
#define E3_BMS_355_CYCLE_TIME_MS (100u)
#define E3_BMS_356_CYCLE_TIME_MS (100u)
#define E3_BMS_109_CYCLE_TIME_MS (10u)
#define E3_BMS_357_CYCLE_TIME_MS (100u)
#define E3_BMS_358_CYCLE_TIME_MS (100u)
#define E3_BMS_360_CYCLE_TIME_MS (100u)
#define E3_BMS_35_A_CYCLE_TIME_MS (100u)
#define E3_BMS_363_CYCLE_TIME_MS (100u)
#define E3_BMS_35_F_CYCLE_TIME_MS (50u)
#define E3_BMS_59_B_CYCLE_TIME_MS (1000u)
#define E3_BMS_VERSION_580_CYCLE_TIME_MS (1000u)
#define E3_BMS_VERSION_581_CYCLE_TIME_MS (1000u)
#define E3_BMS_VERSION_3_E1_CYCLE_TIME_MS (100u)
#define E3_BMS_59_D_CYCLE_TIME_MS (1000u)
#define E3_BMS_GBT32960_59_A_CYCLE_TIME_MS (1000u)
#define E3_BMS_59_E_CYCLE_TIME_MS (1000u)
#define E3_BMS_TEST_VERSION_69_C_CYCLE_TIME_MS (1000u)
#define E3_BMS_VERSION_3_E4_CYCLE_TIME_MS (100u)
#define E3_MCUF0_STATE_112_CYCLE_TIME_MS (10u)
#define E3_VCU_253_CYCLE_TIME_MS (10u)
#define E3_OBC_STATE1_387_CYCLE_TIME_MS (100u)
#define E3_OBC_STATE2_388_CYCLE_TIME_MS (100u)
#define E3_OBC_STATE3_389_CYCLE_TIME_MS (100u)
#define E3_VCU_335_CYCLE_TIME_MS (20u)
#define E3_CCU_369_CYCLE_TIME_MS (100u)
#define E3_PTCH_379_CYCLE_TIME_MS (400u)
#define E3_HMC_36_C_CYCLE_TIME_MS (100u)
#define E3_HMC_36_D_CYCLE_TIME_MS (100u)
#define E3_ABM_385_CYCLE_TIME_MS (100u)
#define E3_BCM_PEPS_365_CYCLE_TIME_MS (100u)

/* Signal choices. */
#define E3_BMS_355_BMS_PEAK_DIS_PWR_30S_INVALID_CHOICE (-1u)

#define E3_BMS_355_BMS_CTN_DIS_PWR_INVALID_CHOICE (-1u)

#define E3_BMS_355_BMS_PEAK_CHG_PWR_30S_INVALID_CHOICE (-1u)

#define E3_BMS_355_BMS_CTN_CHG_PWR_INVALID_CHOICE (-1u)

#define E3_BMS_356_BMS_PEAK_DIS_PWR_10S_INVALID_CHOICE (-1u)

#define E3_BMS_356_BMS_PEAK_CHG_PWR_10S_INVALID_CHOICE (-1u)

#define E3_BMS_356_BMS_POW_BAT_ALLOW_INT_CHAR_STA_NONE_CHOICE (0u)
#define E3_BMS_356_BMS_POW_BAT_ALLOW_INT_CHAR_STA_INHIBIT_CHOICE (1u)
#define E3_BMS_356_BMS_POW_BAT_ALLOW_INT_CHAR_STA_ALLOW_CHOICE (2u)
#define E3_BMS_356_BMS_POW_BAT_ALLOW_INT_CHAR_STA_RESERVED_CHOICE (3u)

#define E3_BMS_109_BMS_PRE_CHG_ST_NO_PRECHARGE_CHOICE (0u)
#define E3_BMS_109_BMS_PRE_CHG_ST_PRECHARGING_CHOICE (1u)
#define E3_BMS_109_BMS_PRE_CHG_ST_PRECHARGE_FINISHED_CHOICE (2u)
#define E3_BMS_109_BMS_PRE_CHG_ST_PRECHARGE_FAILED_CHOICE (3u)

#define E3_BMS_109_BMS_WORK_STATUS_INVALID_CHOICE (-1u)
#define E3_BMS_109_BMS_WORK_STATUS_INT_CHOICE (0u)
#define E3_BMS_109_BMS_WORK_STATUS_STANDBY_CHOICE (1u)
#define E3_BMS_109_BMS_WORK_STATUS_PRECHARGE_CHOICE (2u)
#define E3_BMS_109_BMS_WORK_STATUS_HV_FINISHED_CHOICE (3u)
#define E3_BMS_109_BMS_WORK_STATUS_HV_SHUT_DOWN_CHOICE (4u)
#define E3_BMS_109_BMS_WORK_STATUS_FAULT_CHOICE (5u)
#define E3_BMS_109_BMS_WORK_STATUS_RESERVED_6_CHOICE (6u)
#define E3_BMS_109_BMS_WORK_STATUS_RESERVED_7_CHOICE (7u)

#define E3_BMS_109_BMS_FAULT_LEVEL_INVALID_CHOICE (-1u)
#define E3_BMS_109_BMS_FAULT_LEVEL_NORMAL_CHOICE (0u)
#define E3_BMS_109_BMS_FAULT_LEVEL_FAULT_LEVEL1_CHOICE (1u)
#define E3_BMS_109_BMS_FAULT_LEVEL_FAULT_LEVEL2_CHOICE (2u)
#define E3_BMS_109_BMS_FAULT_LEVEL_FAULT_LEVEL3_CHOICE (3u)
#define E3_BMS_109_BMS_FAULT_LEVEL_FAULT_LEVEL4_CHOICE (4u)
#define E3_BMS_109_BMS_FAULT_LEVEL_FAULT_LEVEL5_CHOICE (5u)
#define E3_BMS_109_BMS_FAULT_LEVEL_FAULT_LEVEL6_CHOICE (6u)
#define E3_BMS_109_BMS_FAULT_LEVEL_RESERVED_CHOICE (7u)

#define E3_BMS_109_BMS_HV_CTRL_REQ_NO_REQUEST_CHOICE (0u)
#define E3_BMS_109_BMS_HV_CTRL_REQ_REQUEST_CHOICE (1u)

#define E3_BMS_109_BMS_NEG_RELAY_ST_OPEN_CHOICE (0u)
#define E3_BMS_109_BMS_NEG_RELAY_ST_CLOSE_CHOICE (1u)

#define E3_BMS_109_BMS_PRE_RELAY_ST_OPEN_CHOICE (0u)
#define E3_BMS_109_BMS_PRE_RELAY_ST_CLOSE_CHOICE (1u)

#define E3_BMS_109_BMS_POS_RELAY_ST_OPEN_CHOICE (0u)
#define E3_BMS_109_BMS_POS_RELAY_ST_CLOSE_CHOICE (1u)

#define E3_BMS_109_BMS_CHG_STATUS_T_BOX_STOPED_CHARGE_CHOICE (0u)
#define E3_BMS_109_BMS_CHG_STATUS_T_BOX_RUNNING_CHARGE_CHOICE (1u)
#define E3_BMS_109_BMS_CHG_STATUS_T_BOX_NO_CHARGE_CHOICE (2u)
#define E3_BMS_109_BMS_CHG_STATUS_T_BOX_CHARGE_FINISHED_CHOICE (3u)

#define E3_BMS_109_BMS_S2SWITCH_REQ__0_CHOICE (0u)
#define E3_BMS_109_BMS_S2SWITCH_REQ__1_CHOICE (1u)

#define E3_BMS_109_BMS_DIS_CHG_STATUS_NO_DISCHARGE_CHOICE (0u)
#define E3_BMS_109_BMS_DIS_CHG_STATUS_DISCHARGING_CHOICE (1u)
#define E3_BMS_109_BMS_DIS_CHG_STATUS_DISCHARGE_FINISHED_CHOICE (2u)
#define E3_BMS_109_BMS_DIS_CHG_STATUS_DISCHARGE_STOPED_CHOICE (3u)

#define E3_BMS_109_BMS_CRASH_SIG_ST_INVALID_CHOICE (0u)
#define E3_BMS_109_BMS_CRASH_SIG_ST_VALID_CHOICE (1u)

#define E3_BMS_109_BMS_MODE_INVALID_CHOICE (-1u)
#define E3_BMS_109_BMS_MODE_DEFAULT_MODE_CHOICE (0u)
#define E3_BMS_109_BMS_MODE_NORMAL_MODE_CHOICE (1u)
#define E3_BMS_109_BMS_MODE_AC_CHARGE_MODE_CHOICE (2u)
#define E3_BMS_109_BMS_MODE_AC_DISCHARGE_MODE_CHOICE (3u)
#define E3_BMS_109_BMS_MODE_DC_CHARGE_MODE_CHOICE (4u)
#define E3_BMS_109_BMS_MODE_DC_DISCHARGE_MODE_CHOICE (5u)
#define E3_BMS_109_BMS_MODE_RESERVATION_AC_CHARGE_MODE_CHOICE (6u)
#define E3_BMS_109_BMS_MODE_12_V_CHARGE__MODE_CHOICE (7u)
#define E3_BMS_109_BMS_MODE_REMOTE_CONTROL_MODE_CHOICE (8u)
#define E3_BMS_109_BMS_MODE_CHARGE_BATTERY_HEAT_MODE_CHOICE (9u)
#define E3_BMS_109_BMS_MODE_REMOTE_BATTERY_HEAT_MODE_CHOICE (10u)
#define E3_BMS_109_BMS_MODE_RESERVED_11_CHOICE (11u)
#define E3_BMS_109_BMS_MODE_RESERVED_12_CHOICE (12u)
#define E3_BMS_109_BMS_MODE_RESERVED_13_CHOICE (13u)
#define E3_BMS_109_BMS_MODE_RESERVED_14_CHOICE (14u)
#define E3_BMS_109_BMS_MODE_RESERVED_15_CHOICE (15u)

#define E3_BMS_109_BMS_CHG_STATUS_INVALID_CHOICE (-1u)
#define E3_BMS_109_BMS_CHG_STATUS_NO_CHARGE_CHOICE (0u)
#define E3_BMS_109_BMS_CHG_STATUS_THERMAL_BEFORE_CHARGE_CHOICE (1u)
#define E3_BMS_109_BMS_CHG_STATUS_CHARGING_CHOICE (2u)
#define E3_BMS_109_BMS_CHG_STATUS_CHARGE_FINISHED_CHOICE (3u)
#define E3_BMS_109_BMS_CHG_STATUS_CHARGE_PAUSE_CHOICE (4u)
#define E3_BMS_109_BMS_CHG_STATUS_CHARGE_STOPED_CHOICE (5u)
#define E3_BMS_109_BMS_CHG_STATUS_RESERVED_6_CHOICE (6u)
#define E3_BMS_109_BMS_CHG_STATUS_RESERVED_7_CHOICE (7u)

#define E3_BMS_109_BMS_CC2_STA_NO_CONNECT_CHOICE (0u)
#define E3_BMS_109_BMS_CC2_STA_DC_CHARGE_CONNECT_CHOICE (1u)
#define E3_BMS_109_BMS_CC2_STA_DC_DISCHARGE_CONNECT_CHOICE (2u)
#define E3_BMS_109_BMS_CC2_STA_CONNECT__FAULT_CHOICE (3u)

#define E3_BMS_109_BMS_VCU_WAKEUP_BMS_INVALID_CHOICE (0u)
#define E3_BMS_109_BMS_VCU_WAKEUP_BMS_VALID_CHOICE (1u)

#define E3_BMS_109_BMS_HV_INTERLOCK_STATUS_LOCK_CHOICE (0u)
#define E3_BMS_109_BMS_HV_INTERLOCK_STATUS_UNLOCK_CHOICE (1u)

#define E3_BMS_109_BMS_ONC_CON_ST_INVALID_CHOICE (-1u)
#define E3_BMS_109_BMS_ONC_CON_ST_NO_CONNECT_CHOICE (0u)
#define E3_BMS_109_BMS_ONC_CON_ST_HALF_CONNECT_CHOICE (1u)
#define E3_BMS_109_BMS_ONC_CON_ST_AC_CHARGE_CONNECT_CHOICE (2u)
#define E3_BMS_109_BMS_ONC_CON_ST_AC_DISCHARGE_CONNECT_CHOICE (3u)
#define E3_BMS_109_BMS_ONC_CON_ST_CONNECT__FAULT_CHOICE (4u)
#define E3_BMS_109_BMS_ONC_CON_ST_RESERVED_5_CHOICE (5u)
#define E3_BMS_109_BMS_ONC_CON_ST_RESERVED_6_CHOICE (6u)
#define E3_BMS_109_BMS_ONC_CON_ST_RESERVED_7_CHOICE (7u)

#define E3_BMS_109_BMS_VCU_SOC_INVALID_CHOICE (-1u)

#define E3_BMS_109_BMS_BOOL_BATTBALANCE_ACT__0_CHOICE (0u)
#define E3_BMS_109_BMS_BOOL_BATTBALANCE_ACT__1_CHOICE (1u)

#define E3_BMS_357_BMS_MAX_CELL_VOLT_INVALID_CHOICE (-1u)

#define E3_BMS_357_BMS_MIN_CELL_VOLT_INVALID_CHOICE (-1u)

#define E3_BMS_357_BMS_SOH_INVALID_CHOICE (-1u)

#define E3_BMS_357_BMS_MAX_CV_NO_INVALID_CHOICE (-1u)

#define E3_BMS_357_BMS_MIN_CV_NO_INVALID_CHOICE (-1u)

#define E3_BMS_358_BMS_MAX_CELL_TEMP_INVALID_CHOICE (-1u)

#define E3_BMS_358_BMS_MAX_CT_NO_INVALID_CHOICE (-1u)

#define E3_BMS_358_BMS_MIN_CELL_TEMP_INVALID_CHOICE (-1u)

#define E3_BMS_358_BMS_MIN_CT_NO_INVALID_CHOICE (-1u)

#define E3_BMS_358_BMS_TEMP_INPUT_ACT_BAT_INVALID_CHOICE (-1u)

#define E3_BMS_358_BMS_BAT_TEMP_IN_DESR_INVALID_CHOICE (-1u)

#define E3_BMS_360_BMS_CHG_REQ_CURR_INVALID_CHOICE (-1u)

#define E3_BMS_360_BMS_OB_CMOD_REQ_NO_MODE_CHOICE (0u)
#define E3_BMS_360_BMS_OB_CMOD_REQ_CHARGE_MODE_REQUEST_CHOICE (1u)
#define E3_BMS_360_BMS_OB_CMOD_REQ_RESERVED_CHOICE (2u)
#define E3_BMS_360_BMS_OB_CMOD_REQ_DISCHARGE_MODE_REQUEST_CHOICE (3u)

#define E3_BMS_360_BMS_OBC_OUT_ENB_INACTIVE_CHOICE (0u)
#define E3_BMS_360_BMS_OBC_OUT_ENB_ACTIVE_CHOICE (1u)

#define E3_BMS_360_BMS_DIS_CHG_LIMIT_CURR_INVALID_CHOICE (-1u)

#define E3_BMS_360_BMS_DIS_CHG_REQ_VOLT_INVALID_CHOICE (-1u)

#define E3_BMS_360_BMS_DIS_CHG_ALLOWED_OUT_PWR_INVALID_CHOICE (-1u)

#define E3_BMS_360_BMS_BAT_COOL_REQ_NO__REQUEST_CHOICE (0u)
#define E3_BMS_360_BMS_BAT_COOL_REQ_REQUEST_CHOICE (1u)

#define E3_BMS_360_BMS_BAT_HEAT_REQ_NO__REQUEST_CHOICE (0u)
#define E3_BMS_360_BMS_BAT_HEAT_REQ_REQUEST_CHOICE (1u)

#define E3_BMS_360_BMS_CHAG_LOCK_REQUEST_NO__REQUEST_CHOICE (0u)
#define E3_BMS_360_BMS_CHAG_LOCK_REQUEST_REQUEST_CHOICE (1u)

#define E3_BMS_35_A_BMS_POWER_INVALID_CHOICE (-1u)

#define E3_BMS_35_A_BMS_CHG_AMOUNT_INVALID_CHOICE (-1u)

#define E3_BMS_35_A_BMS_DIS_CHG_AMOUNT_INVALID_CHOICE (-1u)

#define E3_BMS_35_A_BMS_CHARGE_STATUS_LIGHT_CONTROL_OFF_CHOICE (0u)
#define E3_BMS_35_A_BMS_CHARGE_STATUS_LIGHT_CONTROL_ON_CHOICE (1u)

#define E3_BMS_35_A_BMS_CHARGE_CONNECT_LIGHT_CTR_OFF_CHOICE (0u)
#define E3_BMS_35_A_BMS_CHARGE_CONNECT_LIGHT_CTR_ON_CHOICE (1u)

#define E3_BMS_35_A_BMS_BATTER_FAULT_LIGHT_CONTROL_OFF_CHOICE (0u)
#define E3_BMS_35_A_BMS_BATTER_FAULT_LIGHT_CONTROL_ON_CHOICE (1u)

#define E3_BMS_35_A_BMS_SOC_LOW_LIGHT_CONTROL_OFF_CHOICE (0u)
#define E3_BMS_35_A_BMS_SOC_LOW_LIGHT_CONTROL_ON_CHOICE (1u)

#define E3_BMS_35_A_BMS_BATTER_HIGTEMP_LIGHT_CONTROL_OFF_CHOICE (0u)
#define E3_BMS_35_A_BMS_BATTER_HIGTEMP_LIGHT_CONTROL_ON_CHOICE (1u)

#define E3_BMS_35_A_BMS_INSULATION_FAULT_LIGHT_CONTROL_OFF_CHOICE (0u)
#define E3_BMS_35_A_BMS_INSULATION_FAULT_LIGHT_CONTROL_ON_CHOICE (1u)

#define E3_BMS_35_A_BMS_CHG_FINISH_REMAIN_TIME_INVALID_CHOICE (-1u)

#define E3_BMS_35_A_BMS_BAT_HEAT_MAN_MODE_ACTI_INACTIVE_CHOICE (0u)
#define E3_BMS_35_A_BMS_BAT_HEAT_MAN_MODE_ACTI_BATTERY_HEAT_ACTIVE_CHOICE (1u)
#define E3_BMS_35_A_BMS_BAT_HEAT_MAN_MODE_ACTI_BATTERY_COOL_ACTIVE_CHOICE (2u)
#define E3_BMS_35_A_BMS_BAT_HEAT_MAN_MODE_ACTI_RESERVED_CHOICE (3u)

#define E3_BMS_363_BMS_TEMP_NUM_INVALID_CHOICE (-1u)

#define E3_BMS_363_BMS_TEMP_NO_INVALID_CHOICE (-1u)

#define E3_BMS_363_BMS_TEMP_VAL1_INVALID_CHOICE (-1u)

#define E3_BMS_363_BMS_TEMP_VAL2_INVALID_CHOICE (-1u)

#define E3_BMS_363_BMS_TEMP_VAL3_INVALID_CHOICE (-1u)

#define E3_BMS_363_BMS_TEMP_VAL4_INVALID_CHOICE (-1u)

#define E3_BMS_363_BMS_TEMP_VAL5_INVALID_CHOICE (-1u)

#define E3_BMS_363_BMS_TEMP_VAL6_INVALID_CHOICE (-1u)

#define E3_BMS_35_F_BMS_CELL_NUM_INVALID_CHOICE (-1u)

#define E3_BMS_35_F_BMS_CV_NO_INVALID_CHOICE (-1u)

#define E3_BMS_35_F_BMS_CELL_VOLT1_INVALID_CHOICE (-1u)

#define E3_BMS_35_F_BMS_CELL_VOLT2_INVALID_CHOICE (-1u)

#define E3_BMS_35_F_BMS_CELL_VOLT3_INVALID_CHOICE (-1u)

#define E3_BMS_59_B_BMS_BAT_UNDER_VOLT_NORMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_BAT_UNDER_VOLT_FAULT__LEVEL_1_CHOICE (1u)
#define E3_BMS_59_B_BMS_BAT_UNDER_VOLT_FAULT__LEVEL_2_CHOICE (2u)
#define E3_BMS_59_B_BMS_BAT_UNDER_VOLT_FAULT__LEVEL_3_CHOICE (3u)

#define E3_BMS_59_B_BMS_BAT_OVER_VOLT_NORMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_BAT_OVER_VOLT_FAULT__LEVEL_1_CHOICE (1u)
#define E3_BMS_59_B_BMS_BAT_OVER_VOLT_FAULT__LEVEL_2_CHOICE (2u)
#define E3_BMS_59_B_BMS_BAT_OVER_VOLT_FAULT__LEVEL_3_CHOICE (3u)

#define E3_BMS_59_B_BMS_TEMP_HIGH_NORMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_TEMP_HIGH_FAULT__LEVEL_1_CHOICE (1u)
#define E3_BMS_59_B_BMS_TEMP_HIGH_FAULT__LEVEL_2_CHOICE (2u)
#define E3_BMS_59_B_BMS_TEMP_HIGH_FAULT__LEVEL_3_CHOICE (3u)

#define E3_BMS_59_B_BMS_DELT_TEMP_ERR_NORMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_DELT_TEMP_ERR_FAULT__LEVEL_1_CHOICE (1u)
#define E3_BMS_59_B_BMS_DELT_TEMP_ERR_FAULT__LEVEL_2_CHOICE (2u)
#define E3_BMS_59_B_BMS_DELT_TEMP_ERR_FAULT__LEVEL_3_CHOICE (3u)

#define E3_BMS_59_B_BMS_SOC_OVER_ALARM_NORMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_SOC_OVER_ALARM_FAULT__LEVEL_1_CHOICE (1u)
#define E3_BMS_59_B_BMS_SOC_OVER_ALARM_FAULT__LEVEL_2_CHOICE (2u)
#define E3_BMS_59_B_BMS_SOC_OVER_ALARM_FAULT__LEVEL_3_CHOICE (3u)

#define E3_BMS_59_B_BMS_CELL_UNDER_VOLT_NORMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_CELL_UNDER_VOLT_FAULT__LEVEL_1_CHOICE (1u)
#define E3_BMS_59_B_BMS_CELL_UNDER_VOLT_FAULT__LEVEL_2_CHOICE (2u)
#define E3_BMS_59_B_BMS_CELL_UNDER_VOLT_FAULT__LEVEL_3_CHOICE (3u)

#define E3_BMS_59_B_BMS_CELL_OVER_VOLT_NORMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_CELL_OVER_VOLT_FAULT__LEVEL_1_CHOICE (1u)
#define E3_BMS_59_B_BMS_CELL_OVER_VOLT_FAULT__LEVEL_2_CHOICE (2u)
#define E3_BMS_59_B_BMS_CELL_OVER_VOLT_FAULT__LEVEL_3_CHOICE (3u)

#define E3_BMS_59_B_BMS_SOC_LOW_NORMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_SOC_LOW_FAULT__LEVEL_1_CHOICE (1u)
#define E3_BMS_59_B_BMS_SOC_LOW_FAULT__LEVEL_2_CHOICE (2u)
#define E3_BMS_59_B_BMS_SOC_LOW_FAULT__LEVEL_3_CHOICE (3u)

#define E3_BMS_59_B_BMS_INSULATION_FAULT_INSIDE_NORMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_INSULATION_FAULT_INSIDE_FAULT__LEVEL_1_CHOICE (1u)
#define E3_BMS_59_B_BMS_INSULATION_FAULT_INSIDE_FAULT__LEVEL_2_CHOICE (2u)
#define E3_BMS_59_B_BMS_INSULATION_FAULT_INSIDE_FAULT__LEVEL_3_CHOICE (3u)

#define E3_BMS_59_B_BMS_CELL_DELT_VOLT_ERR_NORMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_CELL_DELT_VOLT_ERR_FAULT__LEVEL_1_CHOICE (1u)
#define E3_BMS_59_B_BMS_CELL_DELT_VOLT_ERR_FAULT__LEVEL_2_CHOICE (2u)
#define E3_BMS_59_B_BMS_CELL_DELT_VOLT_ERR_FAULT__LEVEL_3_CHOICE (3u)

#define E3_BMS_59_B_BMS_TEMP_LOW_NOMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_TEMP_LOW_FAULT_CHOICE (1u)

#define E3_BMS_59_B_BMS_CHGABLE_ENSYS_MATC_ALARM_NOMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_CHGABLE_ENSYS_MATC_ALARM_FAULT_CHOICE (1u)

#define E3_BMS_59_B_BMS_SOC_TRANSIT_ALARM_NORMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_SOC_TRANSIT_ALARM_FAULT__LEVEL_1_CHOICE (1u)
#define E3_BMS_59_B_BMS_SOC_TRANSIT_ALARM_FAULT__LEVEL_2_CHOICE (2u)
#define E3_BMS_59_B_BMS_SOC_TRANSIT_ALARM_FAULT__LEVEL_3_CHOICE (3u)

#define E3_BMS_59_B_BMS_POS_RLY_FAULT_NOMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_POS_RLY_FAULT_FAULT_CHOICE (1u)

#define E3_BMS_59_B_BMS_TEMP_DETECT_FAULT_NOMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_TEMP_DETECT_FAULT_FAULT_CHOICE (1u)

#define E3_BMS_59_B_BMS_CURR_DETECT_FAULT_NOMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_CURR_DETECT_FAULT_FAULT_CHOICE (1u)

#define E3_BMS_59_B_BMS_VOLT_DETECT_FAULT_NOMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_VOLT_DETECT_FAULT_FAULT_CHOICE (1u)

#define E3_BMS_59_B_BMS_PRECHG_FAULT_NOMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_PRECHG_FAULT_FAULT_CHOICE (1u)

#define E3_BMS_59_B_BMS_INT_COM_FAULT_NOMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_INT_COM_FAULT_FAULT_CHOICE (1u)

#define E3_BMS_59_B_BMS_EXT_COM_FAULT_NOMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_EXT_COM_FAULT_FAULT_CHOICE (1u)

#define E3_BMS_59_B_BMS_CRASH_FAULT_NOMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_CRASH_FAULT_FAULT_CHOICE (1u)

#define E3_BMS_59_B_BMS_AC_CHG_LOCK_FAULT_NOMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_AC_CHG_LOCK_FAULT_FAULT_CHOICE (1u)

#define E3_BMS_59_B_BMS_VEH_ENQUIP_OVER_ALARM_NOMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_VEH_ENQUIP_OVER_ALARM_FAULT_CHOICE (1u)

#define E3_BMS_59_B_BMS_PRECHG_RLY_FAULT_NOMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_PRECHG_RLY_FAULT_FAULT_CHOICE (1u)

#define E3_BMS_59_B_BMS_NEG_RLY_FAULT_NOMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_NEG_RLY_FAULT_FAULT_CHOICE (1u)

#define E3_BMS_59_B_BMS_DC_CHG_PORT_OVER_TEMP_NORMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_DC_CHG_PORT_OVER_TEMP_FAULT__LEVEL_1_CHOICE (1u)
#define E3_BMS_59_B_BMS_DC_CHG_PORT_OVER_TEMP_FAULT__LEVEL_2_CHOICE (2u)
#define E3_BMS_59_B_BMS_DC_CHG_PORT_OVER_TEMP_FAULT__LEVEL_3_CHOICE (3u)

#define E3_BMS_59_B_BMS_INSULATION_FAULT_OUTSIDE_NORMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_INSULATION_FAULT_OUTSIDE_FAULT__LEVEL_1_CHOICE (1u)
#define E3_BMS_59_B_BMS_INSULATION_FAULT_OUTSIDE_FAULT__LEVEL_2_CHOICE (2u)
#define E3_BMS_59_B_BMS_INSULATION_FAULT_OUTSIDE_FAULT__LEVEL_3_CHOICE (3u)

#define E3_BMS_59_B_BMS_CELL_VOLT_DETECT_FAULT_NOMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_CELL_VOLT_DETECT_FAULT_FAULT_CHOICE (1u)

#define E3_BMS_59_B_BMS_CC2_FAULT_NOMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_CC2_FAULT_FAULT_CHOICE (1u)

#define E3_BMS_59_B_BMS_PACK_THERMAL_RUNAWAY_ALARM_NOMAL_CHOICE (0u)
#define E3_BMS_59_B_BMS_PACK_THERMAL_RUNAWAY_ALARM_FAULT_CHOICE (1u)

#define E3_BMS_VERSION_580_BMS_CURR_DETECT_TEMP_FAULT_NOMAL_CHOICE (0u)
#define E3_BMS_VERSION_580_BMS_CURR_DETECT_TEMP_FAULT_FAULT_CHOICE (1u)

#define E3_BMS_VERSION_580_BMS_12_V_OVER_VOLT_NOMAL_CHOICE (0u)
#define E3_BMS_VERSION_580_BMS_12_V_OVER_VOLT_FAULT_CHOICE (1u)

#define E3_BMS_VERSION_580_BMS_12_V_UNDER_VOLT_NOMAL_CHOICE (0u)
#define E3_BMS_VERSION_580_BMS_12_V_UNDER_VOLT_FAULT_CHOICE (1u)

#define E3_BMS_VERSION_580_BMS_OBC_FULT_NOMAL_CHOICE (0u)
#define E3_BMS_VERSION_580_BMS_OBC_FULT_FAULT_CHOICE (1u)

#define E3_BMS_VERSION_580_BMS_CHG_OVER_CURRENT_NORMAL_CHOICE (0u)
#define E3_BMS_VERSION_580_BMS_CHG_OVER_CURRENT_FAULT__LEVEL_1_CHOICE (1u)
#define E3_BMS_VERSION_580_BMS_CHG_OVER_CURRENT_FAULT__LEVEL_2_CHOICE (2u)
#define E3_BMS_VERSION_580_BMS_CHG_OVER_CURRENT_FAULT__LEVEL_3_CHOICE (3u)

#define E3_BMS_VERSION_580_BMS_DIS_OVER_CURRENT_NORMAL_CHOICE (0u)
#define E3_BMS_VERSION_580_BMS_DIS_OVER_CURRENT_FAULT__LEVEL_1_CHOICE (1u)
#define E3_BMS_VERSION_580_BMS_DIS_OVER_CURRENT_FAULT__LEVEL_2_CHOICE (2u)
#define E3_BMS_VERSION_580_BMS_DIS_OVER_CURRENT_FAULT__LEVEL_3_CHOICE (3u)

#define E3_BMS_VERSION_580_BMS_CELL_UNDER_VOLT_LEVEL4_NOMAL_CHOICE (0u)
#define E3_BMS_VERSION_580_BMS_CELL_UNDER_VOLT_LEVEL4_FAULT_CHOICE (1u)

#define E3_BMS_VERSION_580_BMS_BALANCERESIST_FAULT_NOMAL_CHOICE (0u)
#define E3_BMS_VERSION_580_BMS_BALANCERESIST_FAULT_FAULT_CHOICE (1u)

#define E3_BMS_VERSION_580_BMS_BALANCE_FAULT_NOMAL_CHOICE (0u)
#define E3_BMS_VERSION_580_BMS_BALANCE_FAULT_FAULT_CHOICE (1u)

#define E3_BMS_VERSION_580_BMS_TEMP_WATERINPUT_FAULT_NOMAL_CHOICE (0u)
#define E3_BMS_VERSION_580_BMS_TEMP_WATERINPUT_FAULT_FAULT_CHOICE (1u)

#define E3_BMS_VERSION_580_BMS_BATCOOL_FAULT_NOMAL_CHOICE (0u)
#define E3_BMS_VERSION_580_BMS_BATCOOL_FAULT_FAULT_CHOICE (1u)

#define E3_BMS_VERSION_580_BMS_BATHEAT_FAULT_NOMAL_CHOICE (0u)
#define E3_BMS_VERSION_580_BMS_BATHEAT_FAULT_FAULT_CHOICE (1u)

#define E3_BMS_VERSION_580_BMS_FUSE_FAULLT_NOMAL_CHOICE (0u)
#define E3_BMS_VERSION_580_BMS_FUSE_FAULLT_FAULT_CHOICE (1u)

#define E3_BMS_VERSION_580_BMS_INSPECTION_FAULT_NOMAL_CHOICE (0u)
#define E3_BMS_VERSION_580_BMS_INSPECTION_FAULT_FAULT_CHOICE (1u)

#define E3_BMS_VERSION_580_BMS_SUM_AH_INVALID_CHOICE (-1u)

#define E3_BMS_VERSION_580_BMS_SOE_INVALID_CHOICE (-1u)

#define E3_BMS_VERSION_580_BMS_TEMP_DETECT_FAULT_LEVEL2_NOMAL_CHOICE (0u)
#define E3_BMS_VERSION_580_BMS_TEMP_DETECT_FAULT_LEVEL2_FAULT_CHOICE (1u)

#define E3_BMS_VERSION_580_BMS_CELL_VOLT_DETECT_FAULT_LEVEL2_NOMAL_CHOICE (0u)
#define E3_BMS_VERSION_580_BMS_CELL_VOLT_DETECT_FAULT_LEVEL2_FAULT_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_CV_NO1_INVALID_CHOICE (-1u)

#define E3_BMS_VERSION_581_BMS_1_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_1_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_2_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_2_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_3_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_3_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_4_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_4_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_5_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_5_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_6_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_6_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_7_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_7_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_8_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_8_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_9_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_9_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_10_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_10_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_11_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_11_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_12_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_12_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_13_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_13_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_14_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_14_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_15_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_15_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_16_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_16_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_17_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_17_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_18_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_18_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_19_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_19_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_20_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_20_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_21_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_21_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_22_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_22_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_23_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_23_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_24_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_24_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_25_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_25_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_26_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_26_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_27_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_27_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_28_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_28_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_29_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_29_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_30_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_30_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_31_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_31_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_32_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_32_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_33_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_33_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_34_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_34_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_35_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_35_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_36_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_36_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_37_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_37_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_38_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_38_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_39_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_39_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_40_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_40_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_41_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_41_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_42_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_42_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_43_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_43_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_44_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_44_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_45_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_45_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_46_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_46_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_47_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_47_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_48_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_48_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_49_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_49_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_50_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_50_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_51_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_51_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_52_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_52_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_53_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_53_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_54_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_54_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_55_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_55_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_581_BMS_56_CELL_BALANCE_STS___0_CHOICE (0u)
#define E3_BMS_VERSION_581_BMS_56_CELL_BALANCE_STS___1_CHOICE (1u)

#define E3_BMS_VERSION_3_E1_BMSH_REQUEST_DC_CHARGE_CURRENT_INVALID_CHOICE (-1u)

#define E3_BMS_VERSION_3_E1_DC_EQUIPMENT_DISPLAY_CURRENT_INVALID_CHOICE (-1u)

#define E3_BMS_VERSION_3_E1_BMS_INS_RES_VAL_INSIDE_INVALID_CHOICE (-1u)

#define E3_BMS_59_D_BMS_AVAI_CHG_SYS_NUMS_INVALID_CHOICE (-1u)

#define E3_BMS_59_D_BMS_AVAI_CHG_SYS_NUMS_LEHTH_INVALID_CHOICE (-1u)

#define E3_BMS_59_D_BMS_AVAI_CHG_SYS_NUMS_LEHTH_CODE_INVALID_CHOICE (-1u)

#define E3_BMS_59_D_BMS_AVAI_CHG_SYS_NUMS_N_INVALID_CHOICE (-1u)

#define E3_BMS_59_D_BMS_AVAI_CHG_SYS_NUMS_N_1_INVALID_CHOICE (-1u)

#define E3_BMS_59_D_BMS_AVAI_CHG_SYS_NUMS_N_2_INVALID_CHOICE (-1u)

#define E3_BMS_59_D_BMS_AVAI_CHG_SYS_NUMS_N_3_INVALID_CHOICE (-1u)

#define E3_BMS_GBT32960_59_A_BMS_DTC_COUNTER_INVALID_CHOICE (-1u)

#define E3_BMS_GBT32960_59_A_BMS_DTC_LIST_INVALID_CHOICE (-1u)

#define E3_BMS_59_E_BMS_BAT_SUBSYS_MAX_VOLT_INVALID_CHOICE (-1u)

#define E3_BMS_59_E_BMS_BAT_SUBSYS_MIN_VOLT_INVALID_CHOICE (-1u)

#define E3_BMS_59_E_BMS_SUBSYS_MAX_TEMP_INVALID_CHOICE (-1u)

#define E3_BMS_59_E_BMS_SUBSYS_MIN_TEMP_INVALID_CHOICE (-1u)

#define E3_BMS_59_E_BMS_AVAI_CHG_SYS_NUMS_VOLT_INVALID_CHOICE (-1u)

#define E3_BMS_59_E_BMS_AVAI_CHG_SYS_NUMBER_VOLT_INVALID_CHOICE (-1u)

#define E3_BMS_59_E_BMS_AVAI_CHG_SYS_NUMS_TEMP_INVALID_CHOICE (-1u)

#define E3_BMS_59_E_BMS_AVAI_CHG_SYS_NUMBER_TEMP_INVALID_CHOICE (-1u)

#define E3_BMS_VERSION_3_E4_BMS_HEAT_DISP_INVALID__1_CHOICE (-1u)
#define E3_BMS_VERSION_3_E4_BMS_HEAT_DISP_NO_REMIND_CHOICE (0u)
#define E3_BMS_VERSION_3_E4_BMS_HEAT_DISP_ACTIVE_REMIND_CHOICE (1u)
#define E3_BMS_VERSION_3_E4_BMS_HEAT_DISP_ACTIVE_SUCCESS_REMIND_CHOICE (2u)
#define E3_BMS_VERSION_3_E4_BMS_HEAT_DISP_END_REMIND_CHOICE (3u)
#define E3_BMS_VERSION_3_E4_BMS_HEAT_DISP_FAULT_REMIND_CHOICE (4u)
#define E3_BMS_VERSION_3_E4_BMS_HEAT_DISP_RESERVED_5_CHOICE (5u)
#define E3_BMS_VERSION_3_E4_BMS_HEAT_DISP_RESERVED_6_CHOICE (6u)
#define E3_BMS_VERSION_3_E4_BMS_HEAT_DISP_INVALID_7_CHOICE (7u)

#define E3_BMS_VERSION_3_E4_BMS_DC_CHG_DISP_INVALID__1_CHOICE (-1u)
#define E3_BMS_VERSION_3_E4_BMS_DC_CHG_DISP_NO_REMIND_CHOICE (0u)
#define E3_BMS_VERSION_3_E4_BMS_DC_CHG_DISP_ACTIVE_REMIND_CHOICE (1u)
#define E3_BMS_VERSION_3_E4_BMS_DC_CHG_DISP_ACTIVE_SUCCESS_REMIND_CHOICE (2u)
#define E3_BMS_VERSION_3_E4_BMS_DC_CHG_DISP_END_REMIND_CHOICE (3u)
#define E3_BMS_VERSION_3_E4_BMS_DC_CHG_DISP_FAULT_REMIND_CHOICE (4u)
#define E3_BMS_VERSION_3_E4_BMS_DC_CHG_DISP_RESERVED_5_CHOICE (5u)
#define E3_BMS_VERSION_3_E4_BMS_DC_CHG_DISP_RESERVED_6_CHOICE (6u)
#define E3_BMS_VERSION_3_E4_BMS_DC_CHG_DISP_INVALID_7_CHOICE (7u)

#define E3_BMS_VERSION_3_E4_BMS_AC_CHG_DISP_INVALID__1_CHOICE (-1u)
#define E3_BMS_VERSION_3_E4_BMS_AC_CHG_DISP_NO_REMIND_CHOICE (0u)
#define E3_BMS_VERSION_3_E4_BMS_AC_CHG_DISP_ACTIVE_REMIND_CHOICE (1u)
#define E3_BMS_VERSION_3_E4_BMS_AC_CHG_DISP_ACTIVE_SUCCESS_REMIND_CHOICE (2u)
#define E3_BMS_VERSION_3_E4_BMS_AC_CHG_DISP_END_REMIND_CHOICE (3u)
#define E3_BMS_VERSION_3_E4_BMS_AC_CHG_DISP_FAULT_REMIND_CHOICE (4u)
#define E3_BMS_VERSION_3_E4_BMS_AC_CHG_DISP_RESERVED_5_CHOICE (5u)
#define E3_BMS_VERSION_3_E4_BMS_AC_CHG_DISP_RESERVED_6_CHOICE (6u)
#define E3_BMS_VERSION_3_E4_BMS_AC_CHG_DISP_INVALID_7_CHOICE (7u)

#define E3_BMS_VERSION_3_E4_BMS_DIS_CHG_DISP_INVALID__1_CHOICE (-1u)
#define E3_BMS_VERSION_3_E4_BMS_DIS_CHG_DISP_NO_REMIND_CHOICE (0u)
#define E3_BMS_VERSION_3_E4_BMS_DIS_CHG_DISP_ACTIVE_REMIND_CHOICE (1u)
#define E3_BMS_VERSION_3_E4_BMS_DIS_CHG_DISP_ACTIVE_SUCCESS_REMIND_CHOICE (2u)
#define E3_BMS_VERSION_3_E4_BMS_DIS_CHG_DISP_END_REMIND_CHOICE (3u)
#define E3_BMS_VERSION_3_E4_BMS_DIS_CHG_DISP_FAULT_REMIND_CHOICE (4u)
#define E3_BMS_VERSION_3_E4_BMS_DIS_CHG_DISP_RESERVED_5_CHOICE (5u)
#define E3_BMS_VERSION_3_E4_BMS_DIS_CHG_DISP_RESERVED_6_CHOICE (6u)
#define E3_BMS_VERSION_3_E4_BMS_DIS_CHG_DISP_INVALID_7_CHOICE (7u)

#define E3_MCUF0_STATE_112_MCUF0_I_BUS_INVALID_CHOICE (-1u)

#define E3_MCUF0_STATE_112_MCUF0_V_BUS_INVALID_CHOICE (-1u)

#define E3_VCU_253_HV_BAT_POWER_ENABLE__0_CHOICE (0u)
#define E3_VCU_253_HV_BAT_POWER_ENABLE__1_CHOICE (1u)
#define E3_VCU_253_HV_BAT_POWER_ENABLE__2_CHOICE (2u)
#define E3_VCU_253_HV_BAT_POWER_ENABLE__3_CHOICE (3u)

#define E3_VCU_253_VEHICLE_CHARGE_STATE__0_CHOICE (0u)
#define E3_VCU_253_VEHICLE_CHARGE_STATE__1_CHOICE (1u)

#define E3_VCU_253_VEHICLE_DISCHARGING_STATE__0_CHOICE (0u)
#define E3_VCU_253_VEHICLE_DISCHARGING_STATE__1_CHOICE (1u)

#define E3_VCU_253_VCU_CHG_POS_RELAY_ST__0_CHOICE (0u)
#define E3_VCU_253_VCU_CHG_POS_RELAY_ST__1_CHOICE (1u)

#define E3_VCU_253_VCU_CHG_NEG_RELAY_ST__0_CHOICE (0u)
#define E3_VCU_253_VCU_CHG_NEG_RELAY_ST__1_CHOICE (1u)

#define E3_VCU_253_ALLOW_INT_CHG_STATE__0_CHOICE (0u)
#define E3_VCU_253_ALLOW_INT_CHG_STATE__1_CHOICE (1u)

#define E3_OBC_STATE1_387_OBC_DC_CURRENT_INVALID_CHOICE (-1u)

#define E3_OBC_STATE1_387_OBC_DC_VOLTAGE_INVALID_CHOICE (-1u)

#define E3_OBC_STATE1_387_OBC_WORKSTATE_INT_CHOICE (0u)
#define E3_OBC_STATE1_387_OBC_WORKSTATE_STANDBY_CHOICE (1u)
#define E3_OBC_STATE1_387_OBC_WORKSTATE_WORKING_CHOICE (2u)
#define E3_OBC_STATE1_387_OBC_WORKSTATE_FAULT_CHOICE (3u)

#define E3_OBC_STATE1_387_OBC_WORK_MODE_NO_MODE_CHOICE (0u)
#define E3_OBC_STATE1_387_OBC_WORK_MODE_CHARGE_MODE_CHOICE (1u)
#define E3_OBC_STATE1_387_OBC_WORK_MODE_HEAT_MODE_CHOICE (2u)
#define E3_OBC_STATE1_387_OBC_WORK_MODE_DISCHARGE_MODE_CHOICE (3u)

#define E3_OBC_STATE1_387_OBC_LIMIT_CURRENT_INVALID_CHOICE (-1u)

#define E3_OBC_STATE1_387_OBC_TEMP_INVALID_CHOICE (-1u)

#define E3_OBC_STATE1_387_OBC_LIMIT_POWER_INVALID_CHOICE (-1u)

#define E3_OBC_STATE1_387_OBC_BMS_CONMIN_FAULT_NOMAL_CHOICE (0u)
#define E3_OBC_STATE1_387_OBC_BMS_CONMIN_FAULT_FAULT_CHOICE (1u)

#define E3_OBC_STATE2_388_OBC_AC_CURRENT_INVALID_CHOICE (-1u)

#define E3_OBC_STATE2_388_OBC_FAULT_LEVEL_NORMAL_CHOICE (0u)
#define E3_OBC_STATE2_388_OBC_FAULT_LEVEL_FAULT_LEVEL_1_CHOICE (1u)
#define E3_OBC_STATE2_388_OBC_FAULT_LEVEL_FAULT_LEVEL_2_CHOICE (2u)
#define E3_OBC_STATE2_388_OBC_FAULT_LEVEL_FAULT_LEVEL_3_CHOICE (3u)
#define E3_OBC_STATE2_388_OBC_FAULT_LEVEL_FAULT_LEVEL_4_CHOICE (4u)
#define E3_OBC_STATE2_388_OBC_FAULT_LEVEL_RESERVED_5_CHOICE (5u)
#define E3_OBC_STATE2_388_OBC_FAULT_LEVEL_RESERVED_6_CHOICE (6u)
#define E3_OBC_STATE2_388_OBC_FAULT_LEVEL_RESERVED_7_CHOICE (7u)

#define E3_OBC_STATE2_388_OBC_BAT_CONNECT_STATE_CONNECT_CHOICE (0u)
#define E3_OBC_STATE2_388_OBC_BAT_CONNECT_STATE_DISCONNECT_CHOICE (1u)

#define E3_OBC_STATE2_388_OBC_AC_INPUT_FAULT_STATE_NORMAL_CHOICE (0u)
#define E3_OBC_STATE2_388_OBC_AC_INPUT_FAULT_STATE_FAULT_CHOICE (1u)
#define E3_OBC_STATE2_388_OBC_AC_INPUT_FAULT_STATE_RESERVED_2_CHOICE (2u)
#define E3_OBC_STATE2_388_OBC_AC_INPUT_FAULT_STATE_RESERVED_3_CHOICE (3u)

#define E3_OBC_STATE2_388_OBC_INLET_TEMP_INVALID_CHOICE (-1u)

#define E3_OBC_STATE2_388_OBC_A_CCHARGE_PORT_TEMP_INVALID_CHOICE (-1u)

#define E3_OBC_STATE2_388_OBC_CC_STATUS_DISCONNECT_CHOICE (0u)
#define E3_OBC_STATE2_388_OBC_CC_STATUS_CONNECT_CHOICE (1u)

#define E3_OBC_STATE2_388_OBC_CP_STATUS_INVALID_CHOICE (0u)
#define E3_OBC_STATE2_388_OBC_CP_STATUS_VALID_CHOICE (1u)

#define E3_OBC_STATE2_388_OBC_S2_SWITCH_STATUS_OPEN_CHOICE (0u)
#define E3_OBC_STATE2_388_OBC_S2_SWITCH_STATUS_CLOSE_CHOICE (1u)

#define E3_OBC_STATE3_389_OBC_CC_RES_INVALID_CHOICE (-1u)

#define E3_OBC_STATE3_389_OBC_CP_DUTY_INVALID_CHOICE (-1u)

#define E3_OBC_STATE3_389_OBC_INTERLOCK_FAULT___0_CHOICE (0u)
#define E3_OBC_STATE3_389_OBC_INTERLOCK_FAULT___1_CHOICE (1u)

#define E3_VCU_335_VCU_MODE_DEFAULT_MODE_CHOICE (0u)
#define E3_VCU_335_VCU_MODE_NORMAL_MODE_CHOICE (1u)
#define E3_VCU_335_VCU_MODE_AC_CHARGE_MODE_CHOICE (2u)
#define E3_VCU_335_VCU_MODE_AC_DISCHARGE_MODE_CHOICE (3u)
#define E3_VCU_335_VCU_MODE_DC_CHARGE_MODE_CHOICE (4u)
#define E3_VCU_335_VCU_MODE_DC_DISCHARGE_MODE_CHOICE (5u)
#define E3_VCU_335_VCU_MODE_RESERVATION_AC_CHARGE_MODE_CHOICE (6u)
#define E3_VCU_335_VCU_MODE_12_V_CHARGE__MODE_CHOICE (7u)
#define E3_VCU_335_VCU_MODE_REMOTE_CONTROL_MODE_CHOICE (8u)
#define E3_VCU_335_VCU_MODE_CHARGE_BATTERY_HEAT_MODE_CHOICE (9u)
#define E3_VCU_335_VCU_MODE_REMOTE_BATTERY_HEAT_MODE_CHOICE (10u)
#define E3_VCU_335_VCU_MODE_RESERVED_11_CHOICE (11u)
#define E3_VCU_335_VCU_MODE_RESERVED_12_CHOICE (12u)
#define E3_VCU_335_VCU_MODE_RESERVED_13_CHOICE (13u)
#define E3_VCU_335_VCU_MODE_RESERVED_14_CHOICE (14u)
#define E3_VCU_335_VCU_MODE_RESERVED_15_CHOICE (15u)

#define E3_CCU_369_COMPRESSOR_STATE__0_CHOICE (0u)
#define E3_CCU_369_COMPRESSOR_STATE__1_CHOICE (1u)
#define E3_CCU_369_COMPRESSOR_STATE__2_CHOICE (2u)
#define E3_CCU_369_COMPRESSOR_STATE__3_CHOICE (3u)
#define E3_CCU_369_COMPRESSOR_STATE_REVERSE_4_CHOICE (4u)
#define E3_CCU_369_COMPRESSOR_STATE_REVERSE_5_CHOICE (5u)
#define E3_CCU_369_COMPRESSOR_STATE_REVERSE_6_CHOICE (6u)
#define E3_CCU_369_COMPRESSOR_STATE_REVERSE_7_CHOICE (7u)

#define E3_PTCH_379_PTC_POWER_RATE___STOP_0_CHOICE (0u)
#define E3_PTCH_379_PTC_POWER_RATE___STOP_1_CHOICE (1u)
#define E3_PTCH_379_PTC_POWER_RATE___STOP_2_CHOICE (2u)
#define E3_PTCH_379_PTC_POWER_RATE___STOP_3_CHOICE (3u)
#define E3_PTCH_379_PTC_POWER_RATE___STOP_4_CHOICE (4u)
#define E3_PTCH_379_PTC_POWER_RATE___STOP_5_CHOICE (5u)
#define E3_PTCH_379_PTC_POWER_RATE___STOP_6_CHOICE (6u)
#define E3_PTCH_379_PTC_POWER_RATE___STOP_7_CHOICE (7u)
#define E3_PTCH_379_PTC_POWER_RATE___STOP_8_CHOICE (8u)
#define E3_PTCH_379_PTC_POWER_RATE___STOP_9_CHOICE (9u)
#define E3_PTCH_379_PTC_POWER_RATE___STOP_10_CHOICE (10u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______11_CHOICE (11u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______12_CHOICE (12u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______13_CHOICE (13u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______14_CHOICE (14u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______15_CHOICE (15u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______16_CHOICE (16u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______17_CHOICE (17u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______18_CHOICE (18u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______19_CHOICE (19u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______20_CHOICE (20u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______21_CHOICE (21u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______22_CHOICE (22u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______23_CHOICE (23u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______24_CHOICE (24u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______25_CHOICE (25u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______26_CHOICE (26u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______27_CHOICE (27u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______28_CHOICE (28u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______29_CHOICE (29u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______30_CHOICE (30u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______31_CHOICE (31u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______32_CHOICE (32u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______33_CHOICE (33u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______34_CHOICE (34u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______35_CHOICE (35u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______36_CHOICE (36u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______37_CHOICE (37u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______38_CHOICE (38u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______39_CHOICE (39u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______40_CHOICE (40u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______41_CHOICE (41u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______42_CHOICE (42u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______43_CHOICE (43u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______44_CHOICE (44u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______45_CHOICE (45u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______46_CHOICE (46u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______47_CHOICE (47u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______48_CHOICE (48u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______49_CHOICE (49u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______50_CHOICE (50u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______51_CHOICE (51u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______52_CHOICE (52u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______53_CHOICE (53u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______54_CHOICE (54u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______55_CHOICE (55u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______56_CHOICE (56u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______57_CHOICE (57u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______58_CHOICE (58u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______59_CHOICE (59u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______60_CHOICE (60u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______61_CHOICE (61u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______62_CHOICE (62u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______63_CHOICE (63u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______64_CHOICE (64u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______65_CHOICE (65u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______66_CHOICE (66u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______67_CHOICE (67u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______68_CHOICE (68u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______69_CHOICE (69u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______70_CHOICE (70u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______71_CHOICE (71u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______72_CHOICE (72u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______73_CHOICE (73u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______74_CHOICE (74u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______75_CHOICE (75u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______76_CHOICE (76u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______77_CHOICE (77u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______78_CHOICE (78u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______79_CHOICE (79u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______80_CHOICE (80u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______81_CHOICE (81u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______82_CHOICE (82u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______83_CHOICE (83u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______84_CHOICE (84u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______85_CHOICE (85u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______86_CHOICE (86u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______87_CHOICE (87u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______88_CHOICE (88u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______89_CHOICE (89u)
#define E3_PTCH_379_PTC_POWER_RATE___WORK__BY_PTC_POWER_RATE______90_CHOICE (90u)
#define E3_PTCH_379_PTC_POWER_RATE____91_CHOICE (91u)
#define E3_PTCH_379_PTC_POWER_RATE____92_CHOICE (92u)
#define E3_PTCH_379_PTC_POWER_RATE____93_CHOICE (93u)
#define E3_PTCH_379_PTC_POWER_RATE____94_CHOICE (94u)
#define E3_PTCH_379_PTC_POWER_RATE____95_CHOICE (95u)
#define E3_PTCH_379_PTC_POWER_RATE____96_CHOICE (96u)
#define E3_PTCH_379_PTC_POWER_RATE____97_CHOICE (97u)
#define E3_PTCH_379_PTC_POWER_RATE____98_CHOICE (98u)
#define E3_PTCH_379_PTC_POWER_RATE____99_CHOICE (99u)
#define E3_PTCH_379_PTC_POWER_RATE____100_CHOICE (100u)

#define E3_PTCH_379_RUN_STATUS_INVALID_CHOICE (-1u)
#define E3_PTCH_379_RUN_STATUS__0_CHOICE (0u)
#define E3_PTCH_379_RUN_STATUS__1_CHOICE (1u)
#define E3_PTCH_379_RUN_STATUS__2_CHOICE (2u)

#define E3_PTCH_379_ERROR_CODE__0_CHOICE (0u)
#define E3_PTCH_379_ERROR_CODE__1_CHOICE (1u)
#define E3_PTCH_379_ERROR_CODE__2_CHOICE (2u)
#define E3_PTCH_379_ERROR_CODE__3_CHOICE (3u)
#define E3_PTCH_379_ERROR_CODE__4_CHOICE (4u)
#define E3_PTCH_379_ERROR_CODE__5_CHOICE (5u)
#define E3_PTCH_379_ERROR_CODE__6_CHOICE (6u)
#define E3_PTCH_379_ERROR_CODE__7_CHOICE (7u)

#define E3_HMC_36_C_MOTOR_COOL_QUALIFIER__0_CHOICE (0u)
#define E3_HMC_36_C_MOTOR_COOL_QUALIFIER__1_CHOICE (1u)

#define E3_HMC_36_C_VEHICLE_HEAT_MANAGEMENT_MODES__0_CHOICE (0u)
#define E3_HMC_36_C_VEHICLE_HEAT_MANAGEMENT_MODES__1_CHOICE (1u)
#define E3_HMC_36_C_VEHICLE_HEAT_MANAGEMENT_MODES__2_CHOICE (2u)
#define E3_HMC_36_C_VEHICLE_HEAT_MANAGEMENT_MODES__3_CHOICE (3u)
#define E3_HMC_36_C_VEHICLE_HEAT_MANAGEMENT_MODES__4_CHOICE (4u)
#define E3_HMC_36_C_VEHICLE_HEAT_MANAGEMENT_MODES____CHOICE (5u)
#define E3_HMC_36_C_VEHICLE_HEAT_MANAGEMENT_MODES__6_CHOICE (6u)
#define E3_HMC_36_C_VEHICLE_HEAT_MANAGEMENT_MODES__7_CHOICE (7u)
#define E3_HMC_36_C_VEHICLE_HEAT_MANAGEMENT_MODES__8_CHOICE (8u)
#define E3_HMC_36_C_VEHICLE_HEAT_MANAGEMENT_MODES__9_CHOICE (9u)
#define E3_HMC_36_C_VEHICLE_HEAT_MANAGEMENT_MODES__10_CHOICE (10u)
#define E3_HMC_36_C_VEHICLE_HEAT_MANAGEMENT_MODES__11_CHOICE (11u)

#define E3_HMC_36_C_DEFOREST_QUALIFIER__0_CHOICE (0u)
#define E3_HMC_36_C_DEFOREST_QUALIFIER__1_CHOICE (1u)

#define E3_HMC_36_D_HMC_WORK_STATUS__0_CHOICE (0u)
#define E3_HMC_36_D_HMC_WORK_STATUS__1_CHOICE (1u)
#define E3_HMC_36_D_HMC_WORK_STATUS__2_CHOICE (2u)
#define E3_HMC_36_D_HMC_WORK_STATUS__3_CHOICE (3u)

#define E3_ABM_385_ABM_CRASH_OUTPUT_STATUS____NO__CRASH_CHOICE (0u)
#define E3_ABM_385_ABM_CRASH_OUTPUT_STATUS____CRASH_CHOICE (1u)
#define E3_ABM_385_ABM_CRASH_OUTPUT_STATUS____NOTE_USED_2_CHOICE (2u)
#define E3_ABM_385_ABM_CRASH_OUTPUT_STATUS____NOTE_USED_3_CHOICE (3u)

#define E3_ABM_385_ABM_CRASH_STATUS_CRASH_SIGNAL_VALID_CHOICE (0u)
#define E3_ABM_385_ABM_CRASH_STATUS_CRASH_SIGNAL_INVALID_CHOICE (1u)
#define E3_ABM_385_ABM_CRASH_STATUS___RESERVED_2_CHOICE (2u)
#define E3_ABM_385_ABM_CRASH_STATUS___RESERVED_3_CHOICE (3u)

#define E3_BCM_PEPS_365_IGNITION_STS_INVALID_CHOICE (-1u)
#define E3_BCM_PEPS_365_IGNITION_STS__DEFAULT_CHOICE (0u)
#define E3_BCM_PEPS_365_IGNITION_STS__OFF_CHOICE (1u)
#define E3_BCM_PEPS_365_IGNITION_STS__ACC_CHOICE (2u)
#define E3_BCM_PEPS_365_IGNITION_STS__ON_CHOICE (3u)
#define E3_BCM_PEPS_365_IGNITION_STS__START_CHOICE (4u)
#define E3_BCM_PEPS_365_IGNITION_STS__INVALID_VALUE_5_CHOICE (5u)
#define E3_BCM_PEPS_365_IGNITION_STS__INVALID_VALUE_6_CHOICE (6u)
#define E3_BCM_PEPS_365_IGNITION_STS__INVALID_CHOICE (7u)

#define E3_BCM_PEPS_365_AC_CHG_UNLOCK_REQ___0_CHOICE (0u)
#define E3_BCM_PEPS_365_AC_CHG_UNLOCK_REQ___1_CHOICE (1u)

#define E3_BCM_PEPS_365_AC_CHG_STATUS___0_CHOICE (0u)
#define E3_BCM_PEPS_365_AC_CHG_STATUS___1_CHOICE (1u)
#define E3_BCM_PEPS_365_AC_CHG_STATUS___2_CHOICE (2u)
#define E3_BCM_PEPS_365_AC_CHG_STATUS___3_CHOICE (3u)

/**
 * Signals in message BMS_675.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_bms_675_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t real_soc;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t h_soc;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t l_soc;
};

/**
 * Signals in message BMS_104.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_bms_104_t {
    /**
     * Range: 0..10000 (0..1000 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t batt_volt;

    /**
     * Range: 0..10000 (0..1000 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t link_volt;

    /**
     * Range: 0..14000 (-400..1000 A)
     * Scale: 0.1
     * Offset: -400
     */
    uint16_t batt_curr;

    /**
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t soc;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t message_counter;

    /**
     * Byte6 XOR byte5 XOR byte4 XOR byte3 XOR byte2 XOR byte1 XOR byte0
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t check_sum;
};

/**
 * Signals in message BMS_355.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_bms_355_t {
    /**
     * Range: 0..4000 (0..400 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_peak_dis_pwr_30s;

    /**
     * Range: 0..4000 (0..400 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_ctn_dis_pwr;

    /**
     * Range: 0..4000 (0..400 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_peak_chg_pwr_30s;

    /**
     * Range: 0..4000 (0..400 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_ctn_chg_pwr;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_355_rolling_counter;

    /**
     * CRC8 checksum
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_355_checksum;
};

/**
 * Signals in message BMS_356.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_bms_356_t {
    /**
     * Range: 0..4000 (0..400 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_peak_dis_pwr_10s;

    /**
     * Range: 0..4000 (0..400 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_peak_chg_pwr_10s;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pow_bat_allow_int_char_sta;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_356_message_counter;

    /**
     * Byte6 XOR byte5 XOR byte4 XOR byte3 XOR byte2 XOR byte1 XOR byte0
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_356_check_sum;
};

/**
 * Signals in message BMS_109.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_bms_109_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pre_chg_st;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_work_status;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_level;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_ctrl_req;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_neg_relay_st;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pre_relay_st;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pos_relay_st;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chg_status_t_box;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_s2switch_req;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_dis_chg_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_crash_sig_st;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_mode;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chg_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cc2_sta;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_vcu_wakeup_bms;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_interlock_status;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_onc_con_st;

    /**
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_vcu_soc;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_bool_battbalance_act;

    /**
     * Rolling Counter
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_109_rolling_counter;

    /**
     * CRC8 checksum
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_109_checksum;
};

/**
 * Signals in message BMS_357.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_bms_357_t {
    /**
     * Range: 0..5000 (0..5 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_max_cell_volt;

    /**
     * Range: 0..5000 (0..5 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_min_cell_volt;

    /**
     * Range: 0..20 (80..100 %)
     * Scale: 1
     * Offset: 80
     */
    uint8_t bms_soh;

    /**
     * Range: 0..249 (1..250 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_max_cv_no;

    /**
     * Range: 0..249 (1..250 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_min_cv_no;

    /**
     * Range: 0..255 (0..25.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t bms_12_v_volt;
};

/**
 * Signals in message BMS_358.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_bms_358_t {
    /**
     * Range: 0..250 (-40..210 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_max_cell_temp;

    /**
     * Range: 0..249 (1..250 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_max_ct_no;

    /**
     * Range: 0..250 (-40..210 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_min_cell_temp;

    /**
     * Range: 0..249 (1..250 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_min_ct_no;

    /**
     * Range: 0..254 (-40..214 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_temp_input_act_bat;

    /**
     * Range: 0..254 (-40..214 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_bat_temp_in_desr;
};

/**
 * Signals in message BMS_360.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_bms_360_t {
    /**
     * Range: 0..4000 (0..400 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_chg_req_curr;

    /**
     * Range: 0..800 (0..800 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_chg_req_volt;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_ob_cmod_req;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_obc_out_enb;

    /**
     * Range: 0..80 (0..80 A)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_dis_chg_limit_curr;

    /**
     * Range: 0..400 (0..400 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_dis_chg_req_volt;

    /**
     * Range: 0..66 (0..6.6 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t bms_dis_chg_allowed_out_pwr;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_bat_cool_req;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_bat_heat_req;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chag_lock_request;
};

/**
 * Signals in message BMS_35A.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_bms_35_a_t {
    /**
     * Range: 0..508 (-254..254 -)
     * Scale: 1
     * Offset: -254
     */
    uint16_t bms_power;

    /**
     * Range: 0..600 (0..60 kWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_chg_amount;

    /**
     * Range: 0..600 (0..60 kWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_dis_chg_amount;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_charge_status_light_control;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_charge_connect_light_ctr;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_batter_fault_light_control;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_soc_low_light_control;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_batter_higtemp_light_control;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_insulation_fault_light_control;

    /**
     * Range: 0..254 (0..25.4 h)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t bms_chg_finish_remain_time;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_bat_heat_man_mode_acti;

    /**
     * Range: 0..59 (0..59 min)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chg_finish_remainminute_time;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_charger_reminder;
};

/**
 * Signals in message BMS_363.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_bms_363_t {
    /**
     * Range: 0..249 (1..250 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_temp_num;

    /**
     * Range: 0..249 (1..250 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_temp_no;

    /**
     *  1
     *
     * Range: 0..250 (-40..210 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_temp_val1;

    /**
     *  2
     *
     * Range: 0..250 (-40..210 V)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_temp_val2;

    /**
     *  3
     *
     * Range: 0..250 (-40..210 -)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_temp_val3;

    /**
     *  4
     *
     * Range: 0..250 (-40..210 -)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_temp_val4;

    /**
     *  5
     *
     * Range: 0..250 (-40..210 -)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_temp_val5;

    /**
     *  6
     *
     * Range: 0..250 (-40..210 V)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_temp_val6;
};

/**
 * Signals in message BMS_35F.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_bms_35_f_t {
    /**
     * Range: 0..249 (1..250 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_cell_num;

    /**
     * Range: 0..249 (1..250 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_cv_no;

    /**
     * Range: 0..5000 (0..5 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_cell_volt1;

    /**
     * Range: 0..5000 (0..5 -)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_cell_volt2;

    /**
     * Range: 0..5000 (0..5 -)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_cell_volt3;
};

/**
 * Signals in message BMS_59B.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_bms_59_b_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_bat_under_volt;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_bat_over_volt;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_temp_high;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_delt_temp_err;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_soc_over_alarm;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cell_under_volt;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cell_over_volt;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_soc_low;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_insulation_fault_inside;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cell_delt_volt_err;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_temp_low;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chgable_ensys_matc_alarm;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_soc_transit_alarm;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pos_rly_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_temp_detect_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_curr_detect_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_volt_detect_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_prechg_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_int_com_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_ext_com_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_crash_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_ac_chg_lock_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_veh_enquip_over_alarm;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_prechg_rly_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_neg_rly_fault;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_dc_chg_port_over_temp;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_insulation_fault_outside;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cell_volt_detect_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cc2_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pack_thermal_runaway_alarm;
};

/**
 * Signals in message BMS_Version_580.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_bms_version_580_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_curr_detect_temp_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_12_v_over_volt;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_12_v_under_volt;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_obc_fult;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chg_over_current;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_dis_over_current;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_total_fault_num;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_err_num;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cell_under_volt_level4;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_balanceresist_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_balance_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_temp_waterinput_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_batcool_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_batheat_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fuse_faullt;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_inspection_fault;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_sum_ah;

    /**
     * Range: 0..1000 (0..100 kWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_soe;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_temp_detect_fault_level2;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cell_volt_detect_fault_level2;
};

/**
 * Signals in message BMS_Version_581.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_bms_version_581_t {
    /**
     * Range: 0..249 (1..250 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_cv_no1;

    /**
     * 1
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_1_cell_balance_sts;

    /**
     * 2
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_2_cell_balance_sts;

    /**
     * 3
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_3_cell_balance_sts;

    /**
     * 4
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_4_cell_balance_sts;

    /**
     * 5
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_5_cell_balance_sts;

    /**
     * 6
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_6_cell_balance_sts;

    /**
     * 7
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_7_cell_balance_sts;

    /**
     * 8
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_8_cell_balance_sts;

    /**
     * 9
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_9_cell_balance_sts;

    /**
     * 10
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_10_cell_balance_sts;

    /**
     * 11
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_11_cell_balance_sts;

    /**
     * 12
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_12_cell_balance_sts;

    /**
     * 13
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_13_cell_balance_sts;

    /**
     * 14
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_14_cell_balance_sts;

    /**
     * 15
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_15_cell_balance_sts;

    /**
     * 16
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_16_cell_balance_sts;

    /**
     * 17
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_17_cell_balance_sts;

    /**
     * 18
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_18_cell_balance_sts;

    /**
     * 19
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_19_cell_balance_sts;

    /**
     * 20
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_20_cell_balance_sts;

    /**
     * 21
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_21_cell_balance_sts;

    /**
     * 22
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_22_cell_balance_sts;

    /**
     * 23
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_23_cell_balance_sts;

    /**
     * 24
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_24_cell_balance_sts;

    /**
     * 25
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_25_cell_balance_sts;

    /**
     * 26
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_26_cell_balance_sts;

    /**
     * 27
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_27_cell_balance_sts;

    /**
     * 28
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_28_cell_balance_sts;

    /**
     * 29
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_29_cell_balance_sts;

    /**
     * 30
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_30_cell_balance_sts;

    /**
     * 31
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_31_cell_balance_sts;

    /**
     * 32
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_32_cell_balance_sts;

    /**
     * 33
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_33_cell_balance_sts;

    /**
     * 34
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_34_cell_balance_sts;

    /**
     * 35
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_35_cell_balance_sts;

    /**
     * 36
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_36_cell_balance_sts;

    /**
     * 37
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_37_cell_balance_sts;

    /**
     * 38
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_38_cell_balance_sts;

    /**
     * 39
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_39_cell_balance_sts;

    /**
     * 40
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_40_cell_balance_sts;

    /**
     * 41
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_41_cell_balance_sts;

    /**
     * 42
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_42_cell_balance_sts;

    /**
     * 43
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_43_cell_balance_sts;

    /**
     * 44
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_44_cell_balance_sts;

    /**
     * 45
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_45_cell_balance_sts;

    /**
     * 46
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_46_cell_balance_sts;

    /**
     * 47
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_47_cell_balance_sts;

    /**
     * 48
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_48_cell_balance_sts;

    /**
     * 49
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_49_cell_balance_sts;

    /**
     * 50
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_50_cell_balance_sts;

    /**
     * 51
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_51_cell_balance_sts;

    /**
     * 52
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_52_cell_balance_sts;

    /**
     * 53
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_53_cell_balance_sts;

    /**
     * 54
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_54_cell_balance_sts;

    /**
     * 55
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_55_cell_balance_sts;

    /**
     * 56
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_56_cell_balance_sts;
};

/**
 * Signals in message BMS_Version_3E1.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_bms_version_3_e1_t {
    /**
     * Range: 0..511 (0..511 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bmsh_request_dc_charge_limit_voltage;

    /**
     * Range: 0..511 (0..511 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dc_equipment_display_voltage;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bmsh_request_dc_charge_current;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_equipment_display_current;

    /**
     * Range: 0..60000 (0..60000 kohm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_ins_res_val_inside;
};

/**
 * Signals in message BMS_59D.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_bms_59_d_t {
    /**
     * Range: 1..250 (1..250 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avai_chg_sys_nums;

    /**
     * Range: 1..50 (1..50 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avai_chg_sys_nums_lehth;

    /**
     * Range: 1..50 (1..50 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avai_chg_sys_nums_lehth_code;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avai_chg_sys_nums_n;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avai_chg_sys_nums_n_1;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avai_chg_sys_nums_n_2;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avai_chg_sys_nums_n_3;
};

/**
 * Signals in message BMS_GBT32960_59A.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_bms_gbt32960_59_a_t {
    /**
     * Range: 0..252 (0..252 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_dtc_counter;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t bms_dtc_list;
};

/**
 * Signals in message BMS_59E.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_bms_59_e_t {
    /**
     * Range: 1..250 (1..250 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_bat_subsys_max_volt;

    /**
     * Range: 1..250 (1..250 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_bat_subsys_min_volt;

    /**
     * Range: 1..250 (1..250 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_subsys_max_temp;

    /**
     * Range: 1..250 (1..250 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_subsys_min_temp;

    /**
     * Range: 1..250 (1..250 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avai_chg_sys_nums_volt;

    /**
     * Range: 1..250 (1..250 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avai_chg_sys_number_volt;

    /**
     * Range: 1..250 (1..250 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avai_chg_sys_nums_temp;

    /**
     * Range: 1..250 (1..250 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avai_chg_sys_number_temp;
};

/**
 * Signals in message BMS_Test_Version_69C.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_bms_test_version_69_c_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hw_version_sign;

    /**
     * Range: 0..16777215 (0..16777215 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t bms_hw_version;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_sw_version_sign;

    /**
     * Range: 0..16777215 (0..16777215 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t bms_sw_version;
};

/**
 * Signals in message BMS_Version_3E4.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_bms_version_3_e4_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_heat_disp;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_dc_chg_disp;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_ac_chg_disp;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_dis_chg_disp;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_int_chg_disp;
};

/**
 * Signals in message MCUF0_state_112.
 *
 * 
 *
 * All signal values are as on the CAN bus.
 */
struct e3_mcuf0_state_112_t {
    /**
     * Range: 0..20000 (-1000..1000 A)
     * Scale: 0.1
     * Offset: -1000
     */
    uint16_t mcuf0_i_bus;

    /**
     * Range: 0..60000 (0..6000 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t mcuf0_v_bus;
};

/**
 * Signals in message VCU_253.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_vcu_253_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hv_bat_power_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vehicle_charge_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vehicle_discharging_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_chg_pos_relay_st;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_chg_neg_relay_st;

    /**
     * Range: 0..66 (0..6.6 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t hv_net_cosumption_power;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t allow_int_chg_state;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_253_message_counter;

    /**
     * Byte6 XOR byte5 XOR byte4 XOR byte3 XOR byte2 XOR byte1 XOR byte0
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_253_check_sum;
};

/**
 * Signals in message OBC_state1_387.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_obc_state1_387_t {
    /**
     * Range: 0..2000 (-100..100 A)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t obc_dc_current;

    /**
     * Range: 0..800 (0..800 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t obc_dc_voltage;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_workstate;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_work_mode;

    /**
     * Range: 0..4000 (0..400 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t obc_limit_current;

    /**
     * Range: 0..254 (-40..214 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t obc_temp;

    /**
     * Range: 0..240 (0..24 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t obc_limit_power;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_bms_conmin_fault;
};

/**
 * Signals in message OBC_state2_388.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_obc_state2_388_t {
    /**
     * Range: 0..4000 (0..400 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t obc_ac_current;

    /**
     * Range: 0..800 (0..800 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t obc_ac_voltage;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_fault_level;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_bat_connect_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_ac_input_fault_state;

    /**
     * Range: 0..254 (-40..214 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t obc_inlet_temp;

    /**
     * Range: 0..254 (-40..214 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t obc_a_ccharge_port_temp;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_cc_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_cp_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_s2_switch_status;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_dtc_num;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_dtc_list;
};

/**
 * Signals in message OBC_state3_389.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_obc_state3_389_t {
    /**
     * Range: 0..10000 (0..10000 ohm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t obc_cc_res;

    /**
     * Range: 0..100 (0..100 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_cp_duty;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_system_status;

    /**
     * Range: 0..255 (0..255 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_ratio;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_interlock_fault;
};

/**
 * Signals in message VCU_335.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_vcu_335_t {
    /**
     * VCU work mode
     * VCU
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_mode;
};

/**
 * Signals in message CCU_369.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_ccu_369_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t compressor_state;
};

/**
 * Signals in message PTCH_379.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_ptch_379_t {
    /**
     * Range: 0..255 (0..255 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ptc_power_rate;

    /**
     * Range: 0..255 (-39..216 degC)
     * Scale: 1
     * Offset: -39
     */
    uint8_t tempreture_of_out_water;

    /**
     * Range: 0..255 (-39..216 degC)
     * Scale: 1
     * Offset: -39
     */
    uint8_t tempreture_of_ptc;

    /**
     * Range: 0..2550 (0..255 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t ptc_work_current;

    /**
     * Range: 0..3.75 (0..15 V)
     * Scale: 4
     * Offset: 0
     */
    uint8_t hv_voltage;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t run_status;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t error_code;
};

/**
 * Signals in message HMC_36C.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_hmc_36_c_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_cool_qualifier;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vehicle_heat_management_modes;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hmc_36_c_message_counter;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t deforest_qualifier;
};

/**
 * Signals in message HMC_36D.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_hmc_36_d_t {
    /**
     * Range: 0..100 (0..10 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t hmc_act_power;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hmc_work_status;
};

/**
 * Signals in message ABM_385.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_abm_385_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abm_crash_output_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abm_crash_status;
};

/**
 * Signals in message BCM_PEPS_365.
 *
 * All signal values are as on the CAN bus.
 */
struct e3_bcm_peps_365_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ignition_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_chg_unlock_req;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_chg_status;
};

/**
 * Pack message BMS_675.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_bms_675_pack(
    uint8_t *dst_p,
    const struct e3_bms_675_t *src_p,
    size_t size);

/**
 * Unpack message BMS_675.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_bms_675_unpack(
    struct e3_bms_675_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_675_real_soc_is_in_range(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_675_h_soc_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_675_l_soc_is_in_range(int16_t value);

/**
 * Pack message BMS_104.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_bms_104_pack(
    uint8_t *dst_p,
    const struct e3_bms_104_t *src_p,
    size_t size);

/**
 * Unpack message BMS_104.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_bms_104_unpack(
    struct e3_bms_104_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_104_batt_volt_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_104_link_volt_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_104_batt_curr_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_104_soc_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_104_message_counter_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_104_check_sum_is_in_range(uint8_t value);

/**
 * Pack message BMS_355.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_bms_355_pack(
    uint8_t *dst_p,
    const struct e3_bms_355_t *src_p,
    size_t size);

/**
 * Unpack message BMS_355.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_bms_355_unpack(
    struct e3_bms_355_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_355_bms_peak_dis_pwr_30s_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_355_bms_ctn_dis_pwr_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_355_bms_peak_chg_pwr_30s_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_355_bms_ctn_chg_pwr_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_355_bms_355_rolling_counter_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_355_bms_355_checksum_is_in_range(uint8_t value);

/**
 * Pack message BMS_356.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_bms_356_pack(
    uint8_t *dst_p,
    const struct e3_bms_356_t *src_p,
    size_t size);

/**
 * Unpack message BMS_356.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_bms_356_unpack(
    struct e3_bms_356_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_356_bms_peak_dis_pwr_10s_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_356_bms_peak_chg_pwr_10s_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_356_bms_pow_bat_allow_int_char_sta_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_356_bms_356_message_counter_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_356_bms_356_check_sum_is_in_range(uint8_t value);

/**
 * Pack message BMS_109.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_bms_109_pack(
    uint8_t *dst_p,
    const struct e3_bms_109_t *src_p,
    size_t size);

/**
 * Unpack message BMS_109.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_bms_109_unpack(
    struct e3_bms_109_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_109_bms_pre_chg_st_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_109_bms_work_status_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_109_bms_fault_level_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_109_bms_hv_ctrl_req_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_109_bms_neg_relay_st_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_109_bms_pre_relay_st_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_109_bms_pos_relay_st_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_109_bms_chg_status_t_box_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_109_bms_s2switch_req_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_109_bms_dis_chg_status_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_109_bms_crash_sig_st_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_109_bms_mode_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_109_bms_chg_status_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_109_bms_cc2_sta_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_109_bms_vcu_wakeup_bms_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_109_bms_hv_interlock_status_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_109_bms_onc_con_st_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_109_bms_vcu_soc_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_109_bms_bool_battbalance_act_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_109_bms_109_rolling_counter_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_109_bms_109_checksum_is_in_range(uint8_t value);

/**
 * Pack message BMS_357.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_bms_357_pack(
    uint8_t *dst_p,
    const struct e3_bms_357_t *src_p,
    size_t size);

/**
 * Unpack message BMS_357.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_bms_357_unpack(
    struct e3_bms_357_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_357_bms_max_cell_volt_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_357_bms_min_cell_volt_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_357_bms_soh_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_357_bms_max_cv_no_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_357_bms_min_cv_no_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_357_bms_12_v_volt_is_in_range(uint8_t value);

/**
 * Pack message BMS_358.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_bms_358_pack(
    uint8_t *dst_p,
    const struct e3_bms_358_t *src_p,
    size_t size);

/**
 * Unpack message BMS_358.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_bms_358_unpack(
    struct e3_bms_358_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_358_bms_max_cell_temp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_358_bms_max_ct_no_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_358_bms_min_cell_temp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_358_bms_min_ct_no_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_358_bms_temp_input_act_bat_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_358_bms_bat_temp_in_desr_is_in_range(uint8_t value);

/**
 * Pack message BMS_360.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_bms_360_pack(
    uint8_t *dst_p,
    const struct e3_bms_360_t *src_p,
    size_t size);

/**
 * Unpack message BMS_360.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_bms_360_unpack(
    struct e3_bms_360_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_360_bms_chg_req_curr_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_360_bms_chg_req_volt_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_360_bms_ob_cmod_req_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_360_bms_obc_out_enb_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_360_bms_dis_chg_limit_curr_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_360_bms_dis_chg_req_volt_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_360_bms_dis_chg_allowed_out_pwr_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_360_bms_bat_cool_req_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_360_bms_bat_heat_req_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_360_bms_chag_lock_request_is_in_range(uint8_t value);

/**
 * Pack message BMS_35A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_bms_35_a_pack(
    uint8_t *dst_p,
    const struct e3_bms_35_a_t *src_p,
    size_t size);

/**
 * Unpack message BMS_35A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_bms_35_a_unpack(
    struct e3_bms_35_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_35_a_bms_power_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_35_a_bms_chg_amount_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_35_a_bms_dis_chg_amount_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_35_a_bms_charge_status_light_control_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_35_a_bms_charge_connect_light_ctr_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_35_a_bms_batter_fault_light_control_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_35_a_bms_soc_low_light_control_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_35_a_bms_batter_higtemp_light_control_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_35_a_bms_insulation_fault_light_control_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_35_a_bms_chg_finish_remain_time_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_35_a_bms_bat_heat_man_mode_acti_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_35_a_bms_chg_finish_remainminute_time_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_35_a_bms_charger_reminder_is_in_range(uint8_t value);

/**
 * Pack message BMS_363.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_bms_363_pack(
    uint8_t *dst_p,
    const struct e3_bms_363_t *src_p,
    size_t size);

/**
 * Unpack message BMS_363.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_bms_363_unpack(
    struct e3_bms_363_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_363_bms_temp_num_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_363_bms_temp_no_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_363_bms_temp_val1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_363_bms_temp_val2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_363_bms_temp_val3_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_363_bms_temp_val4_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_363_bms_temp_val5_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_363_bms_temp_val6_is_in_range(uint8_t value);

/**
 * Pack message BMS_35F.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_bms_35_f_pack(
    uint8_t *dst_p,
    const struct e3_bms_35_f_t *src_p,
    size_t size);

/**
 * Unpack message BMS_35F.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_bms_35_f_unpack(
    struct e3_bms_35_f_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_35_f_bms_cell_num_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_35_f_bms_cv_no_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_35_f_bms_cell_volt1_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_35_f_bms_cell_volt2_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_35_f_bms_cell_volt3_is_in_range(uint16_t value);

/**
 * Pack message BMS_59B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_bms_59_b_pack(
    uint8_t *dst_p,
    const struct e3_bms_59_b_t *src_p,
    size_t size);

/**
 * Unpack message BMS_59B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_bms_59_b_unpack(
    struct e3_bms_59_b_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_bat_under_volt_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_bat_over_volt_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_temp_high_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_delt_temp_err_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_soc_over_alarm_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_cell_under_volt_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_cell_over_volt_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_soc_low_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_insulation_fault_inside_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_cell_delt_volt_err_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_temp_low_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_chgable_ensys_matc_alarm_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_soc_transit_alarm_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_pos_rly_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_temp_detect_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_curr_detect_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_volt_detect_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_prechg_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_int_com_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_ext_com_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_crash_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_ac_chg_lock_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_veh_enquip_over_alarm_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_prechg_rly_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_neg_rly_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_dc_chg_port_over_temp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_insulation_fault_outside_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_cell_volt_detect_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_cc2_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_b_bms_pack_thermal_runaway_alarm_is_in_range(uint8_t value);

/**
 * Pack message BMS_Version_580.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_bms_version_580_pack(
    uint8_t *dst_p,
    const struct e3_bms_version_580_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Version_580.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_bms_version_580_unpack(
    struct e3_bms_version_580_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_580_bms_curr_detect_temp_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_580_bms_12_v_over_volt_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_580_bms_12_v_under_volt_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_580_bms_obc_fult_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_580_bms_chg_over_current_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_580_bms_dis_over_current_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_580_bms_total_fault_num_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_580_bms_err_num_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_580_bms_cell_under_volt_level4_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_580_bms_balanceresist_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_580_bms_balance_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_580_bms_temp_waterinput_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_580_bms_batcool_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_580_bms_batheat_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_580_bms_fuse_faullt_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_580_bms_inspection_fault_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_580_bms_sum_ah_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_580_bms_soe_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_580_bms_temp_detect_fault_level2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_580_bms_cell_volt_detect_fault_level2_is_in_range(uint8_t value);

/**
 * Pack message BMS_Version_581.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_bms_version_581_pack(
    uint8_t *dst_p,
    const struct e3_bms_version_581_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Version_581.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_bms_version_581_unpack(
    struct e3_bms_version_581_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_cv_no1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_1_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_2_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_3_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_4_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_5_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_6_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_7_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_8_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_9_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_10_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_11_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_12_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_13_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_14_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_15_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_16_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_17_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_18_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_19_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_20_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_21_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_22_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_23_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_24_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_25_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_26_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_27_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_28_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_29_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_30_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_31_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_32_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_33_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_34_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_35_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_36_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_37_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_38_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_39_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_40_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_41_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_42_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_43_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_44_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_45_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_46_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_47_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_48_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_49_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_50_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_51_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_52_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_53_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_54_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_55_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_581_bms_56_cell_balance_sts_is_in_range(uint8_t value);

/**
 * Pack message BMS_Version_3E1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_bms_version_3_e1_pack(
    uint8_t *dst_p,
    const struct e3_bms_version_3_e1_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Version_3E1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_bms_version_3_e1_unpack(
    struct e3_bms_version_3_e1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_3_e1_bmsh_request_dc_charge_limit_voltage_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_3_e1_dc_equipment_display_voltage_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_3_e1_bmsh_request_dc_charge_current_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_3_e1_dc_equipment_display_current_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_3_e1_bms_ins_res_val_inside_is_in_range(uint16_t value);

/**
 * Pack message BMS_59D.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_bms_59_d_pack(
    uint8_t *dst_p,
    const struct e3_bms_59_d_t *src_p,
    size_t size);

/**
 * Unpack message BMS_59D.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_bms_59_d_unpack(
    struct e3_bms_59_d_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_d_bms_avai_chg_sys_nums_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_d_bms_avai_chg_sys_nums_lehth_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_d_bms_avai_chg_sys_nums_lehth_code_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_d_bms_avai_chg_sys_nums_n_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_d_bms_avai_chg_sys_nums_n_1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_d_bms_avai_chg_sys_nums_n_2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_d_bms_avai_chg_sys_nums_n_3_is_in_range(uint8_t value);

/**
 * Pack message BMS_GBT32960_59A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_bms_gbt32960_59_a_pack(
    uint8_t *dst_p,
    const struct e3_bms_gbt32960_59_a_t *src_p,
    size_t size);

/**
 * Unpack message BMS_GBT32960_59A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_bms_gbt32960_59_a_unpack(
    struct e3_bms_gbt32960_59_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_gbt32960_59_a_bms_dtc_counter_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_gbt32960_59_a_bms_dtc_list_is_in_range(uint32_t value);

/**
 * Pack message BMS_59E.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_bms_59_e_pack(
    uint8_t *dst_p,
    const struct e3_bms_59_e_t *src_p,
    size_t size);

/**
 * Unpack message BMS_59E.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_bms_59_e_unpack(
    struct e3_bms_59_e_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_e_bms_bat_subsys_max_volt_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_e_bms_bat_subsys_min_volt_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_e_bms_subsys_max_temp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_e_bms_subsys_min_temp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_e_bms_avai_chg_sys_nums_volt_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_e_bms_avai_chg_sys_number_volt_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_e_bms_avai_chg_sys_nums_temp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_59_e_bms_avai_chg_sys_number_temp_is_in_range(uint8_t value);

/**
 * Pack message BMS_Test_Version_69C.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_bms_test_version_69_c_pack(
    uint8_t *dst_p,
    const struct e3_bms_test_version_69_c_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Test_Version_69C.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_bms_test_version_69_c_unpack(
    struct e3_bms_test_version_69_c_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_test_version_69_c_bms_hw_version_sign_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_test_version_69_c_bms_hw_version_is_in_range(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_test_version_69_c_bms_sw_version_sign_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_test_version_69_c_bms_sw_version_is_in_range(uint32_t value);

/**
 * Pack message BMS_Version_3E4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_bms_version_3_e4_pack(
    uint8_t *dst_p,
    const struct e3_bms_version_3_e4_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Version_3E4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_bms_version_3_e4_unpack(
    struct e3_bms_version_3_e4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_3_e4_bms_heat_disp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_3_e4_bms_dc_chg_disp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_3_e4_bms_ac_chg_disp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_3_e4_bms_dis_chg_disp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bms_version_3_e4_bms_int_chg_disp_is_in_range(uint8_t value);

/**
 * Pack message MCUF0_state_112.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_mcuf0_state_112_pack(
    uint8_t *dst_p,
    const struct e3_mcuf0_state_112_t *src_p,
    size_t size);

/**
 * Unpack message MCUF0_state_112.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_mcuf0_state_112_unpack(
    struct e3_mcuf0_state_112_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_mcuf0_state_112_mcuf0_i_bus_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_mcuf0_state_112_mcuf0_v_bus_is_in_range(uint16_t value);

/**
 * Pack message VCU_253.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_vcu_253_pack(
    uint8_t *dst_p,
    const struct e3_vcu_253_t *src_p,
    size_t size);

/**
 * Unpack message VCU_253.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_vcu_253_unpack(
    struct e3_vcu_253_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_vcu_253_hv_bat_power_enable_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_vcu_253_vehicle_charge_state_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_vcu_253_vehicle_discharging_state_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_vcu_253_vcu_chg_pos_relay_st_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_vcu_253_vcu_chg_neg_relay_st_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_vcu_253_hv_net_cosumption_power_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_vcu_253_allow_int_chg_state_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_vcu_253_vcu_253_message_counter_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_vcu_253_vcu_253_check_sum_is_in_range(uint8_t value);

/**
 * Pack message OBC_state1_387.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_obc_state1_387_pack(
    uint8_t *dst_p,
    const struct e3_obc_state1_387_t *src_p,
    size_t size);

/**
 * Unpack message OBC_state1_387.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_obc_state1_387_unpack(
    struct e3_obc_state1_387_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state1_387_obc_dc_current_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state1_387_obc_dc_voltage_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state1_387_obc_workstate_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state1_387_obc_work_mode_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state1_387_obc_limit_current_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state1_387_obc_temp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state1_387_obc_limit_power_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state1_387_obc_bms_conmin_fault_is_in_range(uint8_t value);

/**
 * Pack message OBC_state2_388.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_obc_state2_388_pack(
    uint8_t *dst_p,
    const struct e3_obc_state2_388_t *src_p,
    size_t size);

/**
 * Unpack message OBC_state2_388.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_obc_state2_388_unpack(
    struct e3_obc_state2_388_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state2_388_obc_ac_current_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state2_388_obc_ac_voltage_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state2_388_obc_fault_level_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state2_388_obc_bat_connect_state_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state2_388_obc_ac_input_fault_state_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state2_388_obc_inlet_temp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state2_388_obc_a_ccharge_port_temp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state2_388_obc_cc_status_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state2_388_obc_cp_status_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state2_388_obc_s2_switch_status_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state2_388_obc_dtc_num_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state2_388_obc_dtc_list_is_in_range(uint8_t value);

/**
 * Pack message OBC_state3_389.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_obc_state3_389_pack(
    uint8_t *dst_p,
    const struct e3_obc_state3_389_t *src_p,
    size_t size);

/**
 * Unpack message OBC_state3_389.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_obc_state3_389_unpack(
    struct e3_obc_state3_389_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state3_389_obc_cc_res_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state3_389_obc_cp_duty_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state3_389_obc_system_status_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state3_389_obc_ratio_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_obc_state3_389_obc_interlock_fault_is_in_range(uint8_t value);

/**
 * Pack message VCU_335.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_vcu_335_pack(
    uint8_t *dst_p,
    const struct e3_vcu_335_t *src_p,
    size_t size);

/**
 * Unpack message VCU_335.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_vcu_335_unpack(
    struct e3_vcu_335_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_vcu_335_vcu_mode_is_in_range(uint8_t value);

/**
 * Pack message CCU_369.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_ccu_369_pack(
    uint8_t *dst_p,
    const struct e3_ccu_369_t *src_p,
    size_t size);

/**
 * Unpack message CCU_369.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_ccu_369_unpack(
    struct e3_ccu_369_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_ccu_369_compressor_state_is_in_range(uint8_t value);

/**
 * Pack message PTCH_379.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_ptch_379_pack(
    uint8_t *dst_p,
    const struct e3_ptch_379_t *src_p,
    size_t size);

/**
 * Unpack message PTCH_379.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_ptch_379_unpack(
    struct e3_ptch_379_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_ptch_379_ptc_power_rate_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_ptch_379_tempreture_of_out_water_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_ptch_379_tempreture_of_ptc_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_ptch_379_ptc_work_current_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_ptch_379_hv_voltage_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_ptch_379_run_status_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_ptch_379_error_code_is_in_range(uint8_t value);

/**
 * Pack message HMC_36C.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_hmc_36_c_pack(
    uint8_t *dst_p,
    const struct e3_hmc_36_c_t *src_p,
    size_t size);

/**
 * Unpack message HMC_36C.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_hmc_36_c_unpack(
    struct e3_hmc_36_c_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_hmc_36_c_motor_cool_qualifier_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_hmc_36_c_vehicle_heat_management_modes_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_hmc_36_c_hmc_36_c_message_counter_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_hmc_36_c_deforest_qualifier_is_in_range(uint8_t value);

/**
 * Pack message HMC_36D.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_hmc_36_d_pack(
    uint8_t *dst_p,
    const struct e3_hmc_36_d_t *src_p,
    size_t size);

/**
 * Unpack message HMC_36D.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_hmc_36_d_unpack(
    struct e3_hmc_36_d_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_hmc_36_d_hmc_act_power_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_hmc_36_d_hmc_work_status_is_in_range(uint8_t value);

/**
 * Pack message ABM_385.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_abm_385_pack(
    uint8_t *dst_p,
    const struct e3_abm_385_t *src_p,
    size_t size);

/**
 * Unpack message ABM_385.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_abm_385_unpack(
    struct e3_abm_385_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_abm_385_abm_crash_output_status_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_abm_385_abm_crash_status_is_in_range(uint8_t value);

/**
 * Pack message BCM_PEPS_365.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e3_bcm_peps_365_pack(
    uint8_t *dst_p,
    const struct e3_bcm_peps_365_t *src_p,
    size_t size);

/**
 * Unpack message BCM_PEPS_365.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e3_bcm_peps_365_unpack(
    struct e3_bcm_peps_365_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bcm_peps_365_ignition_sts_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bcm_peps_365_ac_chg_unlock_req_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e3_bcm_peps_365_ac_chg_status_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
