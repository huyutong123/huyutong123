/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 37.0.0 Thu Oct 13 18:59:43 2022.
 */

#ifndef E501_CAN_MATRIX_H
#define E501_CAN_MATRIX_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define E501_CAN_MATRIX_BMS_104_FRAME_ID (0x104u)
#define E501_CAN_MATRIX_BMS_355_FRAME_ID (0x355u)
#define E501_CAN_MATRIX_BMS_356_FRAME_ID (0x356u)
#define E501_CAN_MATRIX_BMS_109_FRAME_ID (0x109u)
#define E501_CAN_MATRIX_BMS_357_FRAME_ID (0x357u)
#define E501_CAN_MATRIX_BMS_358_FRAME_ID (0x358u)
#define E501_CAN_MATRIX_BMS_359_FRAME_ID (0x359u)
#define E501_CAN_MATRIX_BMS_35_A_FRAME_ID (0x35au)
#define E501_CAN_MATRIX_BMS_35_D_FRAME_ID (0x35du)
#define E501_CAN_MATRIX_BMS_35_F_FRAME_ID (0x35fu)
#define E501_CAN_MATRIX_BMS_59_B_FRAME_ID (0x59bu)
#define E501_CAN_MATRIX_BMS_59_D_FRAME_ID (0x59du)
#define E501_CAN_MATRIX_BMS_59_E_FRAME_ID (0x59eu)
#define E501_CAN_MATRIX_BMS_TEST_VERSION_69_C_FRAME_ID (0x69cu)
#define E501_CAN_MATRIX_BMS_VERSION_3_E4_FRAME_ID (0x3e4u)
#define E501_CAN_MATRIX_BMS_VERSION_3_E1_FRAME_ID (0x3e1u)
#define E501_CAN_MATRIX_BMS_GBT32960_59_A_FRAME_ID (0x59au)
#define E501_CAN_MATRIX_VCU_STATE_111_FRAME_ID (0x111u)
#define E501_CAN_MATRIX_VCU_VEHICLE_107_FRAME_ID (0x107u)
#define E501_CAN_MATRIX_VCU_39_A_FRAME_ID (0x39au)
#define E501_CAN_MATRIX_VCU_REV_331_FRAME_ID (0x331u)
#define E501_CAN_MATRIX_MCUR0_TEMPERATURE_302_FRAME_ID (0x302u)
#define E501_CAN_MATRIX_MCUR0_STATE_112_FRAME_ID (0x112u)
#define E501_CAN_MATRIX_OBC_STATE1_387_FRAME_ID (0x387u)
#define E501_CAN_MATRIX_OBC_STATE2_388_FRAME_ID (0x388u)
#define E501_CAN_MATRIX_OBC_STATE3_389_FRAME_ID (0x389u)
#define E501_CAN_MATRIX_ABM_385_FRAME_ID (0x385u)
#define E501_CAN_MATRIX_TBOX_0_A4_FRAME_ID (0xa4u)
#define E501_CAN_MATRIX_TBOX_043_FRAME_ID (0x43u)
#define E501_CAN_MATRIX_IC_1_C9_FRAME_ID (0x1c9u)
#define E501_CAN_MATRIX_IVI_3_F8_FRAME_ID (0x3f8u)

/* Frame lengths in bytes. */
#define E501_CAN_MATRIX_BMS_104_LENGTH (8u)
#define E501_CAN_MATRIX_BMS_355_LENGTH (8u)
#define E501_CAN_MATRIX_BMS_356_LENGTH (8u)
#define E501_CAN_MATRIX_BMS_109_LENGTH (8u)
#define E501_CAN_MATRIX_BMS_357_LENGTH (8u)
#define E501_CAN_MATRIX_BMS_358_LENGTH (8u)
#define E501_CAN_MATRIX_BMS_359_LENGTH (8u)
#define E501_CAN_MATRIX_BMS_35_A_LENGTH (8u)
#define E501_CAN_MATRIX_BMS_35_D_LENGTH (8u)
#define E501_CAN_MATRIX_BMS_35_F_LENGTH (8u)
#define E501_CAN_MATRIX_BMS_59_B_LENGTH (8u)
#define E501_CAN_MATRIX_BMS_59_D_LENGTH (8u)
#define E501_CAN_MATRIX_BMS_59_E_LENGTH (8u)
#define E501_CAN_MATRIX_BMS_TEST_VERSION_69_C_LENGTH (8u)
#define E501_CAN_MATRIX_BMS_VERSION_3_E4_LENGTH (8u)
#define E501_CAN_MATRIX_BMS_VERSION_3_E1_LENGTH (8u)
#define E501_CAN_MATRIX_BMS_GBT32960_59_A_LENGTH (8u)
#define E501_CAN_MATRIX_VCU_STATE_111_LENGTH (8u)
#define E501_CAN_MATRIX_VCU_VEHICLE_107_LENGTH (8u)
#define E501_CAN_MATRIX_VCU_39_A_LENGTH (8u)
#define E501_CAN_MATRIX_VCU_REV_331_LENGTH (8u)
#define E501_CAN_MATRIX_MCUR0_TEMPERATURE_302_LENGTH (8u)
#define E501_CAN_MATRIX_MCUR0_STATE_112_LENGTH (8u)
#define E501_CAN_MATRIX_OBC_STATE1_387_LENGTH (8u)
#define E501_CAN_MATRIX_OBC_STATE2_388_LENGTH (8u)
#define E501_CAN_MATRIX_OBC_STATE3_389_LENGTH (8u)
#define E501_CAN_MATRIX_ABM_385_LENGTH (8u)
#define E501_CAN_MATRIX_TBOX_0_A4_LENGTH (8u)
#define E501_CAN_MATRIX_TBOX_043_LENGTH (8u)
#define E501_CAN_MATRIX_IC_1_C9_LENGTH (8u)
#define E501_CAN_MATRIX_IVI_3_F8_LENGTH (8u)

/* Extended or standard frame types. */
#define E501_CAN_MATRIX_BMS_104_IS_EXTENDED (0)
#define E501_CAN_MATRIX_BMS_355_IS_EXTENDED (0)
#define E501_CAN_MATRIX_BMS_356_IS_EXTENDED (0)
#define E501_CAN_MATRIX_BMS_109_IS_EXTENDED (0)
#define E501_CAN_MATRIX_BMS_357_IS_EXTENDED (0)
#define E501_CAN_MATRIX_BMS_358_IS_EXTENDED (0)
#define E501_CAN_MATRIX_BMS_359_IS_EXTENDED (0)
#define E501_CAN_MATRIX_BMS_35_A_IS_EXTENDED (0)
#define E501_CAN_MATRIX_BMS_35_D_IS_EXTENDED (0)
#define E501_CAN_MATRIX_BMS_35_F_IS_EXTENDED (0)
#define E501_CAN_MATRIX_BMS_59_B_IS_EXTENDED (0)
#define E501_CAN_MATRIX_BMS_59_D_IS_EXTENDED (0)
#define E501_CAN_MATRIX_BMS_59_E_IS_EXTENDED (0)
#define E501_CAN_MATRIX_BMS_TEST_VERSION_69_C_IS_EXTENDED (0)
#define E501_CAN_MATRIX_BMS_VERSION_3_E4_IS_EXTENDED (0)
#define E501_CAN_MATRIX_BMS_VERSION_3_E1_IS_EXTENDED (0)
#define E501_CAN_MATRIX_BMS_GBT32960_59_A_IS_EXTENDED (0)
#define E501_CAN_MATRIX_VCU_STATE_111_IS_EXTENDED (0)
#define E501_CAN_MATRIX_VCU_VEHICLE_107_IS_EXTENDED (0)
#define E501_CAN_MATRIX_VCU_39_A_IS_EXTENDED (0)
#define E501_CAN_MATRIX_VCU_REV_331_IS_EXTENDED (0)
#define E501_CAN_MATRIX_MCUR0_TEMPERATURE_302_IS_EXTENDED (0)
#define E501_CAN_MATRIX_MCUR0_STATE_112_IS_EXTENDED (0)
#define E501_CAN_MATRIX_OBC_STATE1_387_IS_EXTENDED (0)
#define E501_CAN_MATRIX_OBC_STATE2_388_IS_EXTENDED (0)
#define E501_CAN_MATRIX_OBC_STATE3_389_IS_EXTENDED (0)
#define E501_CAN_MATRIX_ABM_385_IS_EXTENDED (0)
#define E501_CAN_MATRIX_TBOX_0_A4_IS_EXTENDED (0)
#define E501_CAN_MATRIX_TBOX_043_IS_EXTENDED (0)
#define E501_CAN_MATRIX_IC_1_C9_IS_EXTENDED (0)
#define E501_CAN_MATRIX_IVI_3_F8_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define E501_CAN_MATRIX_BMS_104_CYCLE_TIME_MS (10u)
#define E501_CAN_MATRIX_BMS_355_CYCLE_TIME_MS (100u)
#define E501_CAN_MATRIX_BMS_356_CYCLE_TIME_MS (100u)
#define E501_CAN_MATRIX_BMS_109_CYCLE_TIME_MS (10u)
#define E501_CAN_MATRIX_BMS_357_CYCLE_TIME_MS (100u)
#define E501_CAN_MATRIX_BMS_358_CYCLE_TIME_MS (100u)
#define E501_CAN_MATRIX_BMS_359_CYCLE_TIME_MS (100u)
#define E501_CAN_MATRIX_BMS_35_A_CYCLE_TIME_MS (100u)
#define E501_CAN_MATRIX_BMS_35_D_CYCLE_TIME_MS (100u)
#define E501_CAN_MATRIX_BMS_35_F_CYCLE_TIME_MS (100u)
#define E501_CAN_MATRIX_BMS_59_B_CYCLE_TIME_MS (1000u)
#define E501_CAN_MATRIX_BMS_59_D_CYCLE_TIME_MS (1000u)
#define E501_CAN_MATRIX_BMS_59_E_CYCLE_TIME_MS (1000u)
#define E501_CAN_MATRIX_BMS_TEST_VERSION_69_C_CYCLE_TIME_MS (1000u)
#define E501_CAN_MATRIX_BMS_VERSION_3_E4_CYCLE_TIME_MS (100u)
#define E501_CAN_MATRIX_BMS_VERSION_3_E1_CYCLE_TIME_MS (100u)
#define E501_CAN_MATRIX_BMS_GBT32960_59_A_CYCLE_TIME_MS (1000u)
#define E501_CAN_MATRIX_VCU_STATE_111_CYCLE_TIME_MS (10u)
#define E501_CAN_MATRIX_VCU_VEHICLE_107_CYCLE_TIME_MS (20u)
#define E501_CAN_MATRIX_VCU_39_A_CYCLE_TIME_MS (200u)
#define E501_CAN_MATRIX_VCU_REV_331_CYCLE_TIME_MS (100u)
#define E501_CAN_MATRIX_MCUR0_TEMPERATURE_302_CYCLE_TIME_MS (200u)
#define E501_CAN_MATRIX_MCUR0_STATE_112_CYCLE_TIME_MS (10u)
#define E501_CAN_MATRIX_OBC_STATE1_387_CYCLE_TIME_MS (100u)
#define E501_CAN_MATRIX_OBC_STATE2_388_CYCLE_TIME_MS (100u)
#define E501_CAN_MATRIX_OBC_STATE3_389_CYCLE_TIME_MS (100u)
#define E501_CAN_MATRIX_ABM_385_CYCLE_TIME_MS (100u)
#define E501_CAN_MATRIX_IC_1_C9_CYCLE_TIME_MS (20u)
#define E501_CAN_MATRIX_IVI_3_F8_CYCLE_TIME_MS (100u)

/* Signal choices. */


/**
 * Signals in message BMS_104.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_bms_104_t {
    /**
     * Range: 0..10000 (0..1000 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_batt_volt;

    /**
     * Range: 0..10000 (0..1000 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_link_volt;

    /**
     * Range: 0..14000 (-400..1000 A)
     * Scale: 0.1
     * Offset: -400
     */
    uint16_t bms_batt_curr;

    /**
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_soc;

    /**
     * Rolling Counter
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_104_rolling_counter;

    /**
     * CRC8 checksum
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_104_checksum;
};

/**
 * Signals in message BMS_355.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_bms_355_t {
    /**
     * Range: 0..4000 (0..400 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_peak_dis_pwr_30s;

    /**
     * Range: 0..4000 (0..400 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_ctn_dis_pwr;

    /**
     * Range: 0..4000 (0..400 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_peak_chg_pwr_30s;

    /**
     * Range: 0..4000 (0..400 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_ctn_chg_pwr;

    /**
     * Rolling Counter
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_355_rolling_counter;

    /**
     * CRC8 checksum
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_355_checksum;
};

/**
 * Signals in message BMS_356.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_bms_356_t {
    /**
     * Range: 0..4000 (0..400 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_peak_dis_pwr_10s;

    /**
     * Range: 0..4000 (0..400 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_peak_chg_pwr_10s;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_heat_relay_st1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pow_bat_allow_int_char_sta;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_ota_conditon_feedback;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_ot_arequest_feedback;

    /**
     * Rolling Counter
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_356_rolling_counter;

    /**
     * CRC8 checksum
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_356_checksum;
};

/**
 * Signals in message BMS_109.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_bms_109_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pre_chg_st;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_work_status;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_fault_level;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_ctrl_req;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pre_relay_st;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pos_relay_st;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chg_status_t_box;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_mode;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chg_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cp_sig_st;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hi_volt_load_req;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hv_interlock_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_s2_lock_ctl;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_onc_con_st;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pduhv_interlock_status;

    /**
     * Rolling Counter
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_109_rolling_counter;

    /**
     * CRC8 checksum
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_109_checksum;
};

/**
 * Signals in message BMS_357.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_bms_357_t {
    /**
     * Range: 0..5000 (0..5 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_max_cell_volt;

    /**
     * Range: 0..5000 (0..5 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_min_cell_volt;

    /**
     * Range: 0..20 (80..100 %)
     * Scale: 1
     * Offset: 80
     */
    uint8_t bms_soh;

    /**
     * Range: 0..249 (1..250 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_max_cv_no;

    /**
     * Range: 0..249 (1..250 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_min_cv_no;

    /**
     * Range: 0..66 (0..6.6 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t bms_obc_allowed_max_out_pwr;
};

/**
 * Signals in message BMS_358.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_bms_358_t {
    /**
     * Range: 0..250 (-40..210 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_max_cell_temp;

    /**
     * Range: 0..249 (1..250 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_max_ct_no;

    /**
     * Range: 0..250 (-40..210 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_min_cell_temp;

    /**
     * Range: 0..249 (1..250 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_min_ct_no;

    /**
     * Range: 0..254 (-40..214 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_avrg_cell_temp;
};

/**
 * Signals in message BMS_359.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_bms_359_t {
    /**
     * Range: 0..4000 (0..400 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_chg_req_curr;

    /**
     * Range: 0..800 (0..800 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_chg_req_volt;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_ob_cmod_req;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_obc_out_enb;

    /**
     * Range: 0..570 (6..63 A)
     * Scale: 0.1
     * Offset: 6
     */
    uint16_t bms_maxallw_crr;

    /**
     * Range: 0..4 (0..4 A)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chg_cabl_crr;
};

/**
 * Signals in message BMS_35A.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_bms_35_a_t {
    /**
     * Range: 0..508 (-254..254 -)
     * Scale: 1
     * Offset: -254
     */
    uint16_t bms_power;

    /**
     * Range: 0..600 (0..60 kWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_chg_amount;

    /**
     * Range: 0..600 (0..60 kWh)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t bms_dis_chg_amount;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chag_lock_instr;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_charge_status_light_control;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_charge_connect_light_ctr;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_batter_fault_light_control;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_soc_low_light_control;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_batter_higtemp_light_control;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_insulation_fault_light_control;

    /**
     * Range: 0..254 (0..25.4 h)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t bms_chg_finish_remain_time;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_bat_heat_man_mode_acti;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_no_charge_reminder;
};

/**
 * Signals in message BMS_35D.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_bms_35_d_t {
    /**
     * Range: 0..249 (1..250 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_temp_num;

    /**
     * Range: 0..249 (1..250 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_temp_no;

    /**
     * Range: 0..250 (-40..210 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_temp_val1;

    /**
     * Range: 0..250 (-40..210 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_temp_val2;

    /**
     * Range: 0..250 (-40..210 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_temp_val3;

    /**
     * Range: 0..250 (-40..210 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_temp_val4;

    /**
     * Range: 0..250 (-40..210 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_temp_val5;

    /**
     * Range: 0..250 (-40..210 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bms_temp_val6;
};

/**
 * Signals in message BMS_35F.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_bms_35_f_t {
    /**
     * Range: 0..249 (1..250 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_cell_num;

    /**
     * Range: 0..249 (1..250 -)
     * Scale: 1
     * Offset: 1
     */
    uint8_t bms_cv_no;

    /**
     * Range: 0..5000 (0..5 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_cell_volt1;

    /**
     * Range: 0..5000 (0..5 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_cell_volt2;

    /**
     * Range: 0..5000 (0..5 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t bms_cell_volt3;
};

/**
 * Signals in message BMS_59B.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_bms_59_b_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_bat_under_volt;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_bat_over_volt;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_temp_high;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_delt_temp_err;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_soc_over_alarm;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cell_under_volt;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cell_over_volt;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_soc_low;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_insulation_fault_inside;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cell_delt_volt_err;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_temp_low;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chgable_ensys_matc_alarm;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_soc_transit_alarm;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pos_rly_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_temp_detect_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_curr_detect_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_volt_detect_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_prechg_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_int_com_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_ext_com_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_crash_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_ac_chg_lock_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cp_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_cc_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_veh_enquip_over_alarm;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_slow_chg_rly_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_prechg_rly_fault;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_chg_over_current;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_ac_chg_port_over_temp;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_vcu_wakeup_bms_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_pack_thermal_runaway_alarm;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_heat_relay_fault1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_temp_input_act_bat_high;
};

/**
 * Signals in message BMS_59D.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_bms_59_d_t {
    /**
     * Range: 1..250 (1..250 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avai_chg_sys_nums;

    /**
     * Range: 1..50 (1..50 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avai_chg_sys_nums_lehth;

    /**
     * Range: 1..50 (1..50 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avai_chg_sys_nums_lehth_code;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avai_chg_sys_nums_n;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avai_chg_sys_nums_n_1;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avai_chg_sys_nums_n_2;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avai_chg_sys_nums_n_3;
};

/**
 * Signals in message BMS_59E.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_bms_59_e_t {
    /**
     * Range: 1..250 (1..250 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_bat_subsys_max_volt;

    /**
     * Range: 1..250 (1..250 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_bat_subsys_min_volt;

    /**
     * Range: 1..250 (1..250 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_subsys_max_temp;

    /**
     * Range: 1..250 (1..250 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_subsys_min_temp;

    /**
     * Range: 1..250 (1..250 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avai_chg_sys_nums_volt;

    /**
     * Range: 1..250 (1..250 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avai_chg_sys_number_volt;

    /**
     * Range: 1..250 (1..250 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avai_chg_sys_nums_temp;

    /**
     * Range: 1..250 (1..250 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_avai_chg_sys_number_temp;
};

/**
 * Signals in message BMS_Test_Version_69C.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_bms_test_version_69_c_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_hw_version_sign;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t bms_hw_version;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_sw_version_sign;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t bms_sw_version;
};

/**
 * Signals in message BMS_Version_3E4.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_bms_version_3_e4_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_int_chg_disp;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_ac_chg_disp;
};

/**
 * Signals in message BMS_Version_3E1.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_bms_version_3_e1_t {
    /**
     * Range: 0..254 (0..254 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_charge_end_code;

    /**
     * Range: 0..60000 (0..60000 kohm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_ins_res_val_inside;
};

/**
 * Signals in message BMS_GBT32960_59A.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_bms_gbt32960_59_a_t {
    /**
     * Range: 0..252 (0..252 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_dtc_counter;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t bms_dtc_list;
};

/**
 * Signals in message VCU_state_111.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_vcu_state_111_t {
    /**
     * Charge request allowed for BMS
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_chrg_allowed_bms;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_hv_bat_power_enable;

    /**
     * VCU work mode
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_mode;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_hivolt_unload_finish_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_hivolt_load_finish_state;

    /**
     * Rolling Counter
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_111_counter;

    /**
     * CRC8 checksum
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_111_checksum;
};

/**
 * Signals in message VCU_vehicle_107.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_vcu_vehicle_107_t {
    /**
     * vehicle reference speed
     *
     * Range: 0..4800 (0..270 km/h)
     * Scale: 0.05625
     * Offset: 0
     */
    uint16_t vcu_vehicle_speed;

    /**
     *  Indicate vehicle reference speed valid
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_vehicle_speed_valid;

    /**
     * Vehicle gear
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_gear;
};

/**
 * Signals in message VCU_39A.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_vcu_39_a_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vcu_wakeup_bms;
};

/**
 * Signals in message VCU_Rev_331.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_vcu_rev_331_t {
    /**
     * Range: 0..20000 (0..20000 W)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vcu_rev_vehicle_h_vpower;
};

/**
 * Signals in message MCUR0_temperature_302.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_mcur0_temperature_302_t {
    /**
     * Rear MCU0 PCB temperature
     *
     * Range: 0..250 (-40..210 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t mcur0_temp_pcb;
};

/**
 * Signals in message MCUR0_state_112.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_mcur0_state_112_t {
    /**
     * Range: 0..20000 (-1000..1000 A)
     * Scale: 0.1
     * Offset: -1000
     */
    uint16_t mcur0_i_bus;

    /**
     * Range: 0..60000 (0..6000 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t mcur0_v_bus;

    /**
     * Rolling Counter
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcur0_112_counter;

    /**
     * CRC8 checksum
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mcur0_112_checksum;
};

/**
 * Signals in message OBC_state1_387.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_obc_state1_387_t {
    /**
     * Range: 0..2000 (-100..100 A)
     * Scale: 0.1
     * Offset: -100
     */
    uint16_t obc_dc_current;

    /**
     * Range: 0..800 (0..800 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t obc_dc_voltage;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_workstate;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_work_mode;

    /**
     * Range: 0..4000 (0..400 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t obc_limit_current;

    /**
     * Range: 0..254 (-40..214 degC)
     * Scale: 1
     * Offset: -40
     */
    uint8_t obc_temp;

    /**
     * Range: 0..240 (0..24 kW)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t obc_limit_power;
};

/**
 * Signals in message OBC_state2_388.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_obc_state2_388_t {
    /**
     * Range: 0..4000 (0..400 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t obc_ac_current;

    /**
     * Range: 0..800 (0..800 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t obc_ac_voltage;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_fault_level;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_bat_connect_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_ac_input_fault_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_cp_status;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_s2_switch_status;
};

/**
 * Signals in message OBC_state3_389.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_obc_state3_389_t {
    /**
     * Range: 0..10000 (0..10000 ohm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t obc_cc_res;

    /**
     * Range: 0..100 (0..100 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obc_cp_duty;
};

/**
 * Signals in message ABM_385.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_abm_385_t {
    /**
     * Crash Output Status
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abm_crash_output_status;

    /**
     * Crash signal valid Crash Signal Valid, Bosch always sending 0x0
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abm_crash_output_status_valid;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abm_385_rolling_counter;

    /**
     * CRC8 checksum
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t abm_385_checksum;
};

/**
 * Signals in message TBOX_0A4.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_tbox_0_a4_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_ota_control_power;
};

/**
 * Signals in message TBOX_043.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_tbox_043_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_ota_check;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tbox_ota_request;
};

/**
 * Signals in message IC_1C9.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_ic_1_c9_t {
    /**
     * Range: 0..16777214 (0..1677721.4 km)
     * Scale: 0.1
     * Offset: 0
     */
    uint32_t ic_mileage;
};

/**
 * Signals in message IVI_3F8.
 *
 * All signal values are as on the CAN bus.
 */
struct e501_can_matrix_ivi_3_f8_t {
    /**
     * Range: 0..59 (0..59 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_time_info_second;

    /**
     * Range: 0..59 (0..59 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_time_info_minute;

    /**
     * Range: 0..23 (0..23 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_time_info_hour;

    /**
     * Range: 1..31 (1..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_time_info_day;

    /**
     * Range: 1..12 (1..12 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_time_info_month;

    /**
     * Range: 0..59 (0..59 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ivi_time_info_year;
};

/**
 * Pack message BMS_104.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_bms_104_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_bms_104_t *src_p,
    size_t size);

/**
 * Unpack message BMS_104.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_bms_104_unpack(
    struct e501_can_matrix_bms_104_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_bms_104_bms_batt_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_104_bms_batt_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_104_bms_batt_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_bms_104_bms_link_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_104_bms_link_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_104_bms_link_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_bms_104_bms_batt_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_104_bms_batt_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_104_bms_batt_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_bms_104_bms_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_104_bms_soc_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_104_bms_soc_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_104_bms_104_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_104_bms_104_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_104_bms_104_rolling_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_104_bms_104_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_104_bms_104_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_104_bms_104_checksum_is_in_range(uint8_t value);

/**
 * Pack message BMS_355.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_bms_355_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_bms_355_t *src_p,
    size_t size);

/**
 * Unpack message BMS_355.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_bms_355_unpack(
    struct e501_can_matrix_bms_355_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_bms_355_bms_peak_dis_pwr_30s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_355_bms_peak_dis_pwr_30s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_355_bms_peak_dis_pwr_30s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_bms_355_bms_ctn_dis_pwr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_355_bms_ctn_dis_pwr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_355_bms_ctn_dis_pwr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_bms_355_bms_peak_chg_pwr_30s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_355_bms_peak_chg_pwr_30s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_355_bms_peak_chg_pwr_30s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_bms_355_bms_ctn_chg_pwr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_355_bms_ctn_chg_pwr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_355_bms_ctn_chg_pwr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_355_bms_355_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_355_bms_355_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_355_bms_355_rolling_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_355_bms_355_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_355_bms_355_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_355_bms_355_checksum_is_in_range(uint8_t value);

/**
 * Pack message BMS_356.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_bms_356_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_bms_356_t *src_p,
    size_t size);

/**
 * Unpack message BMS_356.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_bms_356_unpack(
    struct e501_can_matrix_bms_356_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_bms_356_bms_peak_dis_pwr_10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_356_bms_peak_dis_pwr_10s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_356_bms_peak_dis_pwr_10s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_bms_356_bms_peak_chg_pwr_10s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_356_bms_peak_chg_pwr_10s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_356_bms_peak_chg_pwr_10s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_356_bms_heat_relay_st1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_356_bms_heat_relay_st1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_356_bms_heat_relay_st1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_356_bms_pow_bat_allow_int_char_sta_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_356_bms_pow_bat_allow_int_char_sta_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_356_bms_pow_bat_allow_int_char_sta_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_356_bms_ota_conditon_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_356_bms_ota_conditon_feedback_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_356_bms_ota_conditon_feedback_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_356_bms_ot_arequest_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_356_bms_ot_arequest_feedback_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_356_bms_ot_arequest_feedback_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_356_bms_356_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_356_bms_356_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_356_bms_356_rolling_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_356_bms_356_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_356_bms_356_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_356_bms_356_checksum_is_in_range(uint8_t value);

/**
 * Pack message BMS_109.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_bms_109_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_bms_109_t *src_p,
    size_t size);

/**
 * Unpack message BMS_109.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_bms_109_unpack(
    struct e501_can_matrix_bms_109_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_109_bms_pre_chg_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_109_bms_pre_chg_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_109_bms_pre_chg_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_109_bms_work_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_109_bms_work_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_109_bms_work_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_109_bms_fault_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_109_bms_fault_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_109_bms_fault_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_109_bms_hv_ctrl_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_109_bms_hv_ctrl_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_109_bms_hv_ctrl_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_109_bms_pre_relay_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_109_bms_pre_relay_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_109_bms_pre_relay_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_109_bms_pos_relay_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_109_bms_pos_relay_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_109_bms_pos_relay_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_109_bms_chg_status_t_box_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_109_bms_chg_status_t_box_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_109_bms_chg_status_t_box_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_109_bms_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_109_bms_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_109_bms_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_109_bms_chg_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_109_bms_chg_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_109_bms_chg_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_109_bms_cp_sig_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_109_bms_cp_sig_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_109_bms_cp_sig_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_109_bms_hi_volt_load_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_109_bms_hi_volt_load_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_109_bms_hi_volt_load_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_109_bms_hv_interlock_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_109_bms_hv_interlock_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_109_bms_hv_interlock_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_109_bms_s2_lock_ctl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_109_bms_s2_lock_ctl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_109_bms_s2_lock_ctl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_109_bms_onc_con_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_109_bms_onc_con_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_109_bms_onc_con_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_109_bms_pduhv_interlock_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_109_bms_pduhv_interlock_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_109_bms_pduhv_interlock_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_109_bms_109_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_109_bms_109_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_109_bms_109_rolling_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_109_bms_109_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_109_bms_109_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_109_bms_109_checksum_is_in_range(uint8_t value);

/**
 * Pack message BMS_357.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_bms_357_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_bms_357_t *src_p,
    size_t size);

/**
 * Unpack message BMS_357.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_bms_357_unpack(
    struct e501_can_matrix_bms_357_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_bms_357_bms_max_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_357_bms_max_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_357_bms_max_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_bms_357_bms_min_cell_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_357_bms_min_cell_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_357_bms_min_cell_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_357_bms_soh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_357_bms_soh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_357_bms_soh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_357_bms_max_cv_no_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_357_bms_max_cv_no_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_357_bms_max_cv_no_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_357_bms_min_cv_no_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_357_bms_min_cv_no_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_357_bms_min_cv_no_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_357_bms_obc_allowed_max_out_pwr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_357_bms_obc_allowed_max_out_pwr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_357_bms_obc_allowed_max_out_pwr_is_in_range(uint8_t value);

/**
 * Pack message BMS_358.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_bms_358_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_bms_358_t *src_p,
    size_t size);

/**
 * Unpack message BMS_358.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_bms_358_unpack(
    struct e501_can_matrix_bms_358_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_358_bms_max_cell_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_358_bms_max_cell_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_358_bms_max_cell_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_358_bms_max_ct_no_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_358_bms_max_ct_no_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_358_bms_max_ct_no_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_358_bms_min_cell_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_358_bms_min_cell_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_358_bms_min_cell_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_358_bms_min_ct_no_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_358_bms_min_ct_no_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_358_bms_min_ct_no_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_358_bms_avrg_cell_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_358_bms_avrg_cell_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_358_bms_avrg_cell_temp_is_in_range(uint8_t value);

/**
 * Pack message BMS_359.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_bms_359_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_bms_359_t *src_p,
    size_t size);

/**
 * Unpack message BMS_359.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_bms_359_unpack(
    struct e501_can_matrix_bms_359_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_bms_359_bms_chg_req_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_359_bms_chg_req_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_359_bms_chg_req_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_bms_359_bms_chg_req_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_359_bms_chg_req_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_359_bms_chg_req_volt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_359_bms_ob_cmod_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_359_bms_ob_cmod_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_359_bms_ob_cmod_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_359_bms_obc_out_enb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_359_bms_obc_out_enb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_359_bms_obc_out_enb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_bms_359_bms_maxallw_crr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_359_bms_maxallw_crr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_359_bms_maxallw_crr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_359_bms_chg_cabl_crr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_359_bms_chg_cabl_crr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_359_bms_chg_cabl_crr_is_in_range(uint8_t value);

/**
 * Pack message BMS_35A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_bms_35_a_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_bms_35_a_t *src_p,
    size_t size);

/**
 * Unpack message BMS_35A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_bms_35_a_unpack(
    struct e501_can_matrix_bms_35_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_bms_35_a_bms_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_a_bms_power_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_a_bms_power_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_bms_35_a_bms_chg_amount_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_a_bms_chg_amount_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_a_bms_chg_amount_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_bms_35_a_bms_dis_chg_amount_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_a_bms_dis_chg_amount_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_a_bms_dis_chg_amount_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_35_a_bms_chag_lock_instr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_a_bms_chag_lock_instr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_a_bms_chag_lock_instr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_35_a_bms_charge_status_light_control_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_a_bms_charge_status_light_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_a_bms_charge_status_light_control_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_35_a_bms_charge_connect_light_ctr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_a_bms_charge_connect_light_ctr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_a_bms_charge_connect_light_ctr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_35_a_bms_batter_fault_light_control_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_a_bms_batter_fault_light_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_a_bms_batter_fault_light_control_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_35_a_bms_soc_low_light_control_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_a_bms_soc_low_light_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_a_bms_soc_low_light_control_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_35_a_bms_batter_higtemp_light_control_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_a_bms_batter_higtemp_light_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_a_bms_batter_higtemp_light_control_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_35_a_bms_insulation_fault_light_control_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_a_bms_insulation_fault_light_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_a_bms_insulation_fault_light_control_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_35_a_bms_chg_finish_remain_time_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_a_bms_chg_finish_remain_time_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_a_bms_chg_finish_remain_time_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_35_a_bms_bat_heat_man_mode_acti_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_a_bms_bat_heat_man_mode_acti_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_a_bms_bat_heat_man_mode_acti_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_35_a_bms_no_charge_reminder_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_a_bms_no_charge_reminder_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_a_bms_no_charge_reminder_is_in_range(uint8_t value);

/**
 * Pack message BMS_35D.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_bms_35_d_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_bms_35_d_t *src_p,
    size_t size);

/**
 * Unpack message BMS_35D.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_bms_35_d_unpack(
    struct e501_can_matrix_bms_35_d_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_35_d_bms_temp_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_d_bms_temp_num_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_d_bms_temp_num_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_35_d_bms_temp_no_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_d_bms_temp_no_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_d_bms_temp_no_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_35_d_bms_temp_val1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_d_bms_temp_val1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_d_bms_temp_val1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_35_d_bms_temp_val2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_d_bms_temp_val2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_d_bms_temp_val2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_35_d_bms_temp_val3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_d_bms_temp_val3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_d_bms_temp_val3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_35_d_bms_temp_val4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_d_bms_temp_val4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_d_bms_temp_val4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_35_d_bms_temp_val5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_d_bms_temp_val5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_d_bms_temp_val5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_35_d_bms_temp_val6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_d_bms_temp_val6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_d_bms_temp_val6_is_in_range(uint8_t value);

/**
 * Pack message BMS_35F.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_bms_35_f_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_bms_35_f_t *src_p,
    size_t size);

/**
 * Unpack message BMS_35F.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_bms_35_f_unpack(
    struct e501_can_matrix_bms_35_f_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_35_f_bms_cell_num_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_f_bms_cell_num_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_f_bms_cell_num_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_35_f_bms_cv_no_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_f_bms_cv_no_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_f_bms_cv_no_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_bms_35_f_bms_cell_volt1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_f_bms_cell_volt1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_f_bms_cell_volt1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_bms_35_f_bms_cell_volt2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_f_bms_cell_volt2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_f_bms_cell_volt2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_bms_35_f_bms_cell_volt3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_35_f_bms_cell_volt3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_35_f_bms_cell_volt3_is_in_range(uint16_t value);

/**
 * Pack message BMS_59B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_bms_59_b_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_bms_59_b_t *src_p,
    size_t size);

/**
 * Unpack message BMS_59B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_bms_59_b_unpack(
    struct e501_can_matrix_bms_59_b_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_bat_under_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_bat_under_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_bat_under_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_bat_over_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_bat_over_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_bat_over_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_temp_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_temp_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_temp_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_delt_temp_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_delt_temp_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_delt_temp_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_soc_over_alarm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_soc_over_alarm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_soc_over_alarm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_cell_under_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_cell_under_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_cell_under_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_cell_over_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_cell_over_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_cell_over_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_soc_low_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_soc_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_soc_low_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_insulation_fault_inside_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_insulation_fault_inside_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_insulation_fault_inside_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_cell_delt_volt_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_cell_delt_volt_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_cell_delt_volt_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_temp_low_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_temp_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_temp_low_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_chgable_ensys_matc_alarm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_chgable_ensys_matc_alarm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_chgable_ensys_matc_alarm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_soc_transit_alarm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_soc_transit_alarm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_soc_transit_alarm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_pos_rly_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_pos_rly_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_pos_rly_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_temp_detect_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_temp_detect_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_temp_detect_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_curr_detect_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_curr_detect_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_curr_detect_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_volt_detect_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_volt_detect_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_volt_detect_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_prechg_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_prechg_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_prechg_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_int_com_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_int_com_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_int_com_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_ext_com_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_ext_com_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_ext_com_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_crash_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_crash_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_crash_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_ac_chg_lock_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_ac_chg_lock_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_ac_chg_lock_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_cp_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_cp_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_cp_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_cc_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_cc_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_cc_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_veh_enquip_over_alarm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_veh_enquip_over_alarm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_veh_enquip_over_alarm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_slow_chg_rly_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_slow_chg_rly_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_slow_chg_rly_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_prechg_rly_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_prechg_rly_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_prechg_rly_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_chg_over_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_chg_over_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_chg_over_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_ac_chg_port_over_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_ac_chg_port_over_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_ac_chg_port_over_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_vcu_wakeup_bms_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_vcu_wakeup_bms_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_vcu_wakeup_bms_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_pack_thermal_runaway_alarm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_pack_thermal_runaway_alarm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_pack_thermal_runaway_alarm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_heat_relay_fault1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_heat_relay_fault1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_heat_relay_fault1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_b_bms_temp_input_act_bat_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_b_bms_temp_input_act_bat_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_b_bms_temp_input_act_bat_high_is_in_range(uint8_t value);

/**
 * Pack message BMS_59D.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_bms_59_d_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_bms_59_d_t *src_p,
    size_t size);

/**
 * Unpack message BMS_59D.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_bms_59_d_unpack(
    struct e501_can_matrix_bms_59_d_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_d_bms_avai_chg_sys_nums_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_d_bms_avai_chg_sys_nums_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_d_bms_avai_chg_sys_nums_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_d_bms_avai_chg_sys_nums_lehth_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_d_bms_avai_chg_sys_nums_lehth_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_d_bms_avai_chg_sys_nums_lehth_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_d_bms_avai_chg_sys_nums_lehth_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_d_bms_avai_chg_sys_nums_lehth_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_d_bms_avai_chg_sys_nums_lehth_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_d_bms_avai_chg_sys_nums_n_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_d_bms_avai_chg_sys_nums_n_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_d_bms_avai_chg_sys_nums_n_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_d_bms_avai_chg_sys_nums_n_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_d_bms_avai_chg_sys_nums_n_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_d_bms_avai_chg_sys_nums_n_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_d_bms_avai_chg_sys_nums_n_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_d_bms_avai_chg_sys_nums_n_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_d_bms_avai_chg_sys_nums_n_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_d_bms_avai_chg_sys_nums_n_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_d_bms_avai_chg_sys_nums_n_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_d_bms_avai_chg_sys_nums_n_3_is_in_range(uint8_t value);

/**
 * Pack message BMS_59E.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_bms_59_e_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_bms_59_e_t *src_p,
    size_t size);

/**
 * Unpack message BMS_59E.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_bms_59_e_unpack(
    struct e501_can_matrix_bms_59_e_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_e_bms_bat_subsys_max_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_e_bms_bat_subsys_max_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_e_bms_bat_subsys_max_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_e_bms_bat_subsys_min_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_e_bms_bat_subsys_min_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_e_bms_bat_subsys_min_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_e_bms_subsys_max_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_e_bms_subsys_max_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_e_bms_subsys_max_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_e_bms_subsys_min_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_e_bms_subsys_min_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_e_bms_subsys_min_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_e_bms_avai_chg_sys_nums_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_e_bms_avai_chg_sys_nums_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_e_bms_avai_chg_sys_nums_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_e_bms_avai_chg_sys_number_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_e_bms_avai_chg_sys_number_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_e_bms_avai_chg_sys_number_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_e_bms_avai_chg_sys_nums_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_e_bms_avai_chg_sys_nums_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_e_bms_avai_chg_sys_nums_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_59_e_bms_avai_chg_sys_number_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_59_e_bms_avai_chg_sys_number_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_59_e_bms_avai_chg_sys_number_temp_is_in_range(uint8_t value);

/**
 * Pack message BMS_Test_Version_69C.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_bms_test_version_69_c_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_bms_test_version_69_c_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Test_Version_69C.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_bms_test_version_69_c_unpack(
    struct e501_can_matrix_bms_test_version_69_c_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_test_version_69_c_bms_hw_version_sign_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_test_version_69_c_bms_hw_version_sign_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_test_version_69_c_bms_hw_version_sign_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t e501_can_matrix_bms_test_version_69_c_bms_hw_version_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_test_version_69_c_bms_hw_version_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_test_version_69_c_bms_hw_version_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_test_version_69_c_bms_sw_version_sign_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_test_version_69_c_bms_sw_version_sign_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_test_version_69_c_bms_sw_version_sign_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t e501_can_matrix_bms_test_version_69_c_bms_sw_version_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_test_version_69_c_bms_sw_version_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_test_version_69_c_bms_sw_version_is_in_range(uint32_t value);

/**
 * Pack message BMS_Version_3E4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_bms_version_3_e4_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_bms_version_3_e4_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Version_3E4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_bms_version_3_e4_unpack(
    struct e501_can_matrix_bms_version_3_e4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_version_3_e4_bms_int_chg_disp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_version_3_e4_bms_int_chg_disp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_version_3_e4_bms_int_chg_disp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_version_3_e4_bms_ac_chg_disp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_version_3_e4_bms_ac_chg_disp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_version_3_e4_bms_ac_chg_disp_is_in_range(uint8_t value);

/**
 * Pack message BMS_Version_3E1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_bms_version_3_e1_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_bms_version_3_e1_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Version_3E1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_bms_version_3_e1_unpack(
    struct e501_can_matrix_bms_version_3_e1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_version_3_e1_bms_charge_end_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_version_3_e1_bms_charge_end_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_version_3_e1_bms_charge_end_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_bms_version_3_e1_bms_ins_res_val_inside_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_version_3_e1_bms_ins_res_val_inside_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_version_3_e1_bms_ins_res_val_inside_is_in_range(uint16_t value);

/**
 * Pack message BMS_GBT32960_59A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_bms_gbt32960_59_a_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_bms_gbt32960_59_a_t *src_p,
    size_t size);

/**
 * Unpack message BMS_GBT32960_59A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_bms_gbt32960_59_a_unpack(
    struct e501_can_matrix_bms_gbt32960_59_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_bms_gbt32960_59_a_bms_dtc_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_gbt32960_59_a_bms_dtc_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_gbt32960_59_a_bms_dtc_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t e501_can_matrix_bms_gbt32960_59_a_bms_dtc_list_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_bms_gbt32960_59_a_bms_dtc_list_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_bms_gbt32960_59_a_bms_dtc_list_is_in_range(uint32_t value);

/**
 * Pack message VCU_state_111.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_vcu_state_111_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_vcu_state_111_t *src_p,
    size_t size);

/**
 * Unpack message VCU_state_111.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_vcu_state_111_unpack(
    struct e501_can_matrix_vcu_state_111_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_vcu_state_111_vcu_chrg_allowed_bms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_vcu_state_111_vcu_chrg_allowed_bms_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_vcu_state_111_vcu_chrg_allowed_bms_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_vcu_state_111_vcu_hv_bat_power_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_vcu_state_111_vcu_hv_bat_power_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_vcu_state_111_vcu_hv_bat_power_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_vcu_state_111_vcu_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_vcu_state_111_vcu_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_vcu_state_111_vcu_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_vcu_state_111_vcu_hivolt_unload_finish_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_vcu_state_111_vcu_hivolt_unload_finish_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_vcu_state_111_vcu_hivolt_unload_finish_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_vcu_state_111_vcu_hivolt_load_finish_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_vcu_state_111_vcu_hivolt_load_finish_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_vcu_state_111_vcu_hivolt_load_finish_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_vcu_state_111_vcu_111_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_vcu_state_111_vcu_111_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_vcu_state_111_vcu_111_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_vcu_state_111_vcu_111_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_vcu_state_111_vcu_111_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_vcu_state_111_vcu_111_checksum_is_in_range(uint8_t value);

/**
 * Pack message VCU_vehicle_107.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_vcu_vehicle_107_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_vcu_vehicle_107_t *src_p,
    size_t size);

/**
 * Unpack message VCU_vehicle_107.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_vcu_vehicle_107_unpack(
    struct e501_can_matrix_vcu_vehicle_107_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_vcu_vehicle_107_vcu_vehicle_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_vcu_vehicle_107_vcu_vehicle_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_vcu_vehicle_107_vcu_vehicle_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_vcu_vehicle_107_vcu_vehicle_speed_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_vcu_vehicle_107_vcu_vehicle_speed_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_vcu_vehicle_107_vcu_vehicle_speed_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_vcu_vehicle_107_vcu_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_vcu_vehicle_107_vcu_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_vcu_vehicle_107_vcu_gear_is_in_range(uint8_t value);

/**
 * Pack message VCU_39A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_vcu_39_a_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_vcu_39_a_t *src_p,
    size_t size);

/**
 * Unpack message VCU_39A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_vcu_39_a_unpack(
    struct e501_can_matrix_vcu_39_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_vcu_39_a_vcu_wakeup_bms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_vcu_39_a_vcu_wakeup_bms_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_vcu_39_a_vcu_wakeup_bms_is_in_range(uint8_t value);

/**
 * Pack message VCU_Rev_331.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_vcu_rev_331_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_vcu_rev_331_t *src_p,
    size_t size);

/**
 * Unpack message VCU_Rev_331.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_vcu_rev_331_unpack(
    struct e501_can_matrix_vcu_rev_331_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_vcu_rev_331_vcu_rev_vehicle_h_vpower_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_vcu_rev_331_vcu_rev_vehicle_h_vpower_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_vcu_rev_331_vcu_rev_vehicle_h_vpower_is_in_range(uint16_t value);

/**
 * Pack message MCUR0_temperature_302.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_mcur0_temperature_302_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_mcur0_temperature_302_t *src_p,
    size_t size);

/**
 * Unpack message MCUR0_temperature_302.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_mcur0_temperature_302_unpack(
    struct e501_can_matrix_mcur0_temperature_302_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_mcur0_temperature_302_mcur0_temp_pcb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_mcur0_temperature_302_mcur0_temp_pcb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_mcur0_temperature_302_mcur0_temp_pcb_is_in_range(uint8_t value);

/**
 * Pack message MCUR0_state_112.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_mcur0_state_112_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_mcur0_state_112_t *src_p,
    size_t size);

/**
 * Unpack message MCUR0_state_112.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_mcur0_state_112_unpack(
    struct e501_can_matrix_mcur0_state_112_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_mcur0_state_112_mcur0_i_bus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_mcur0_state_112_mcur0_i_bus_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_mcur0_state_112_mcur0_i_bus_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_mcur0_state_112_mcur0_v_bus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_mcur0_state_112_mcur0_v_bus_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_mcur0_state_112_mcur0_v_bus_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_mcur0_state_112_mcur0_112_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_mcur0_state_112_mcur0_112_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_mcur0_state_112_mcur0_112_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_mcur0_state_112_mcur0_112_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_mcur0_state_112_mcur0_112_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_mcur0_state_112_mcur0_112_checksum_is_in_range(uint8_t value);

/**
 * Pack message OBC_state1_387.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_obc_state1_387_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_obc_state1_387_t *src_p,
    size_t size);

/**
 * Unpack message OBC_state1_387.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_obc_state1_387_unpack(
    struct e501_can_matrix_obc_state1_387_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_obc_state1_387_obc_dc_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_obc_state1_387_obc_dc_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_obc_state1_387_obc_dc_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_obc_state1_387_obc_dc_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_obc_state1_387_obc_dc_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_obc_state1_387_obc_dc_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_obc_state1_387_obc_workstate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_obc_state1_387_obc_workstate_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_obc_state1_387_obc_workstate_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_obc_state1_387_obc_work_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_obc_state1_387_obc_work_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_obc_state1_387_obc_work_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_obc_state1_387_obc_limit_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_obc_state1_387_obc_limit_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_obc_state1_387_obc_limit_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_obc_state1_387_obc_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_obc_state1_387_obc_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_obc_state1_387_obc_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_obc_state1_387_obc_limit_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_obc_state1_387_obc_limit_power_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_obc_state1_387_obc_limit_power_is_in_range(uint8_t value);

/**
 * Pack message OBC_state2_388.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_obc_state2_388_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_obc_state2_388_t *src_p,
    size_t size);

/**
 * Unpack message OBC_state2_388.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_obc_state2_388_unpack(
    struct e501_can_matrix_obc_state2_388_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_obc_state2_388_obc_ac_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_obc_state2_388_obc_ac_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_obc_state2_388_obc_ac_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_obc_state2_388_obc_ac_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_obc_state2_388_obc_ac_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_obc_state2_388_obc_ac_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_obc_state2_388_obc_fault_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_obc_state2_388_obc_fault_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_obc_state2_388_obc_fault_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_obc_state2_388_obc_bat_connect_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_obc_state2_388_obc_bat_connect_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_obc_state2_388_obc_bat_connect_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_obc_state2_388_obc_ac_input_fault_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_obc_state2_388_obc_ac_input_fault_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_obc_state2_388_obc_ac_input_fault_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_obc_state2_388_obc_cp_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_obc_state2_388_obc_cp_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_obc_state2_388_obc_cp_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_obc_state2_388_obc_s2_switch_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_obc_state2_388_obc_s2_switch_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_obc_state2_388_obc_s2_switch_status_is_in_range(uint8_t value);

/**
 * Pack message OBC_state3_389.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_obc_state3_389_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_obc_state3_389_t *src_p,
    size_t size);

/**
 * Unpack message OBC_state3_389.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_obc_state3_389_unpack(
    struct e501_can_matrix_obc_state3_389_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t e501_can_matrix_obc_state3_389_obc_cc_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_obc_state3_389_obc_cc_res_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_obc_state3_389_obc_cc_res_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_obc_state3_389_obc_cp_duty_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_obc_state3_389_obc_cp_duty_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_obc_state3_389_obc_cp_duty_is_in_range(uint8_t value);

/**
 * Pack message ABM_385.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_abm_385_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_abm_385_t *src_p,
    size_t size);

/**
 * Unpack message ABM_385.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_abm_385_unpack(
    struct e501_can_matrix_abm_385_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_abm_385_abm_crash_output_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_abm_385_abm_crash_output_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_abm_385_abm_crash_output_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_abm_385_abm_crash_output_status_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_abm_385_abm_crash_output_status_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_abm_385_abm_crash_output_status_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_abm_385_abm_385_rolling_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_abm_385_abm_385_rolling_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_abm_385_abm_385_rolling_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_abm_385_abm_385_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_abm_385_abm_385_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_abm_385_abm_385_checksum_is_in_range(uint8_t value);

/**
 * Pack message TBOX_0A4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_tbox_0_a4_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_tbox_0_a4_t *src_p,
    size_t size);

/**
 * Unpack message TBOX_0A4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_tbox_0_a4_unpack(
    struct e501_can_matrix_tbox_0_a4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_tbox_0_a4_tbox_ota_control_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_tbox_0_a4_tbox_ota_control_power_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_tbox_0_a4_tbox_ota_control_power_is_in_range(uint8_t value);

/**
 * Pack message TBOX_043.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_tbox_043_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_tbox_043_t *src_p,
    size_t size);

/**
 * Unpack message TBOX_043.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_tbox_043_unpack(
    struct e501_can_matrix_tbox_043_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_tbox_043_tbox_ota_check_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_tbox_043_tbox_ota_check_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_tbox_043_tbox_ota_check_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_tbox_043_tbox_ota_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_tbox_043_tbox_ota_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_tbox_043_tbox_ota_request_is_in_range(uint8_t value);

/**
 * Pack message IC_1C9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_ic_1_c9_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_ic_1_c9_t *src_p,
    size_t size);

/**
 * Unpack message IC_1C9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_ic_1_c9_unpack(
    struct e501_can_matrix_ic_1_c9_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t e501_can_matrix_ic_1_c9_ic_mileage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_ic_1_c9_ic_mileage_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_ic_1_c9_ic_mileage_is_in_range(uint32_t value);

/**
 * Pack message IVI_3F8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int e501_can_matrix_ivi_3_f8_pack(
    uint8_t *dst_p,
    const struct e501_can_matrix_ivi_3_f8_t *src_p,
    size_t size);

/**
 * Unpack message IVI_3F8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int e501_can_matrix_ivi_3_f8_unpack(
    struct e501_can_matrix_ivi_3_f8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_ivi_3_f8_ivi_time_info_second_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_ivi_3_f8_ivi_time_info_second_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_ivi_3_f8_ivi_time_info_second_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_ivi_3_f8_ivi_time_info_minute_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_ivi_3_f8_ivi_time_info_minute_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_ivi_3_f8_ivi_time_info_minute_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_ivi_3_f8_ivi_time_info_hour_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_ivi_3_f8_ivi_time_info_hour_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_ivi_3_f8_ivi_time_info_hour_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_ivi_3_f8_ivi_time_info_day_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_ivi_3_f8_ivi_time_info_day_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_ivi_3_f8_ivi_time_info_day_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_ivi_3_f8_ivi_time_info_month_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_ivi_3_f8_ivi_time_info_month_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_ivi_3_f8_ivi_time_info_month_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t e501_can_matrix_ivi_3_f8_ivi_time_info_year_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double e501_can_matrix_ivi_3_f8_ivi_time_info_year_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool e501_can_matrix_ivi_3_f8_ivi_time_info_year_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
